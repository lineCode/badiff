"((MappedByteBuffer) super.buf).load();"	"* (non-Javadoc)"	-38+15;
"* (non-Javadoc)"	"* 1) Redistributions of source code must retain the above copyright notice,"	-14+3>1+71;
"* 1) Redistributions of source code must retain the above copyright notice,"	"* 2) Redistributions in binary form must reproduce the above copyright notice,"	-3+3>18-14+14>8-4+7>28;
"* 2) Redistributions in binary form must reproduce the above copyright notice,"	"* 3) Neither the name of the badiff nor the names of its contributors may be"	-78+76;
"* 3) Neither the name of the badiff nor the names of its contributors may be"	"* </ul>"	-76+7;
"* </ul>"	"* <li>DELETE costs 3 bytes of any run length (one byte for a null array)"	>3-2>1+1>1+66;
"* <li>DELETE costs 3 bytes of any run length (one byte for a null array)"	"* <li>INSERT costs 2 bytes plus the run length"	>6-26+16>1+12>11-28;
"* <li>INSERT costs 2 bytes plus the run length"	"* <li>NEXT costs 2 bytes of any run length"	>6-5+3>16-8+6>11;
"* <li>NEXT costs 2 bytes of any run length"	"* <ul>"	>3-39+3;
"* <ul>"	"* @author robin"	-6+15;
"* @author robin"	"* @param algorithm"	>3-12+15;
"* @param algorithm"	"* @param c"	>9-9+1;
"* @param c"	"* @param capacity"	>10+7;
"* @param capacity"	"* @param chunk"	>10-7+4;
"* @param chunk"	"* @param count"	>10-4+4;
"* @param count"	"* @param data"	>9-4+2>1+1;
"* @param data"	"* @param diff"	>10-3+3;
"* @param diff"	"* @param diff The diff to export"	>13+19;
"* @param diff The diff to export"	"* @param digest"	>11-21+4;
"* @param digest"	"* @param e"	>9-6+1;
"* @param e"	"* @param extDiff The diff to import"	>10+25;
"* @param extDiff The diff to import"	"* @param file"	>9-26+4;
"* @param file"	"* @param hashAlgorithm"	>9-4+13;
"* @param hashAlgorithm"	"* @param in"	>9-13+2;
"* @param in"	"* @param links"	>9+1>2+2;
"* @param links"	"* @param object"	>9-5+6;
"* @param object"	"* @param op"	>10-5+1;
"* @param op"	"* @param ops"	>11+1;
"* @param ops"	"* @param opt"	>11-1+1;
"* @param opt"	"* @param orig"	>10-2+3;
"* @param orig"	"* @param orig The original file"	>13+18;
"* @param orig The original file"	"* @param orig The original file to reference while exporting"	>31+29;
"* @param orig The original file to reference while exporting"	"* @param orig The source of {@link Op#DELETE} chunks"	>18-42+34;
"* @param orig The source of {@link Op#DELETE} chunks"	"* @param out"	>10-42+2;
"* @param out"	"* @param out The output to which to write the exported diff"	>12+47;
"* @param out The output to which to write the exported diff"	"* @param pos"	>9-50+3;
"* @param pos"	"* @param postHash"	>12+5;
"* @param postHash"	"* @param preHash"	>10-3+2>4;
"* @param preHash"	"* @param q"	>9-7+1;
"* @param q"	"* @param run"	>9-1+3;
"* @param run"	"* @param serial"	>9-3+6;
"* @param serial"	"* @param size"	>10-5+3;
"* @param size"	"* @param source"	>10-3+5;
"* @param source"	"* @param stats"	>10-5+4;
"* @param stats"	"* @param target"	>9-5+6;
"* @param target"	"* @param target The source of {@link Op#INSERT} chunks"	>15+39;
"* @param target The source of {@link Op#INSERT} chunks"	"* @param type"	>10-44+3;
"* @param type"	"* @param workers"	>9-3+4>1+2;
"* @param workers"	"* @return"	>3-13+6;
"* @return"	"* @return A badiff diff"	>9+14;
"* @return A badiff diff"	"* @see InputStream#skip(long)"	>3-20+26;
"* @see InputStream#skip(long)"	"* @see org.badiff.q.FilterOpQueue#offer(org.badiff.Op)"	>7-22+47;
"* @see org.badiff.q.FilterOpQueue#offer(org.badiff.Op)"	"* @throws IOException"	>3-51+18;
"* @throws IOException"	"* A byte-level difference between two inputs. Can be applied to streams"	-17+6>1+9>1+19>1+11>1+22;
"* A byte-level difference between two inputs. Can be applied to streams"	"* A diff file using the badiff file format."	>4-66+11>1+27;
"* A diff file using the badiff file format."	"* A header found at the beginning of every badiff diff"	>4-15+15>3+17>1+2>8+3>1-11;
"* A header found at the beginning of every badiff diff"	"* A mechanism for serializing data to/from {@link OutputStream} / {@link InputStream}"	>4-47+6>1+3>1+23>1+46;
"* A mechanism for serializing data to/from {@link OutputStream} / {@link InputStream}"	"* A random-access {@link DataInput}"	>4-61+13>8+4>5-6>1;
"* A random-access {@link DataInput}"	"* A single run-length-encoded operation in a {@link Diff}."	>4-12>1+39>9-8+3>1+1;
"* A single run-length-encoded operation in a {@link Diff}."	"* A unidirectional double-buffering queue of {@link Op}."	>3-39>1+12>1+27>8-4+2>2;
"* A unidirectional double-buffering queue of {@link Op}."	"* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"	>3-53+72;
"* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"	"* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE"	>3-68+36>1+8>1+1>1+3>1+20;
"* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE"	"* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF"	>4-70+63>1+4;
"* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF"	"* Add another {@link OpQueue} to the chain"	>3-69+39;
"* Add another {@link OpQueue} to the chain"	"* Also coalesces consecutive NEXT {@link Op}s"	>3-10+30>10-19+2;
"* Also coalesces consecutive NEXT {@link Op}s"	"* An object which can be applied to an original {@link InputStream} and write"	>3-30+44>8-4+22;
"* An object which can be applied to an original {@link InputStream} and write"	"* An object which can convert a {@link Diff} to an external format for long-term storage"	>22-25+9>8-19+1>1+35>2+10;
"* An object which can convert a {@link Diff} to an external format for long-term storage"	"* An object which can import a diff from an external format"	>21-23>1+5>1+10>1+1>19-22;
"* An object which can import a diff from an external format"	"* An object which can provide an {@link OpQueue}"	>22-37+26;
"* An object which can provide an {@link OpQueue}"	"* An object which can store a sequence of {@link Op}s"	>22-6+4>3+6>1+5>10-5>1+1;
"* An object which can store a sequence of {@link Op}s"	"* An object which computes an {@link OpQueue} to convert an input byte array to an"	>19-22+10>10-2+43;
"* An object which computes an {@link OpQueue} to convert an input byte array to an"	"* Apply the inverse of {@code diff} to {@code target} and return the result"	>3-72+3>1+28>2+5>1+10>2+8>1+11;
"* Apply the inverse of {@code diff} to {@code target} and return the result"	"* Apply this diff to the {@code orig} File, (over)writing the {@code target} File."	>10-11+6>1+7>8-7+13>1+15>16-21+5;
"* Apply this diff to the {@code orig} File, (over)writing the {@code target} File."	"* Apply this object to {@code orig} and write the result to {@code target}."	>13-10+3>1+5>14-19+9>3+3>1+7>15-5>1;
"* Apply this object to {@code orig} and write the result to {@code target}."	"* Apply {@code diff} to {@code orig} and return the result"	>8-11+12>21-4+1>1+4>11-19;
"* Apply {@code diff} to {@code orig} and return the result"	"* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF"	-58+70;
"* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF"	"* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)"	>5-17+7>1+24>11-36+25;
"* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)"	"* Call to add an element to the queue of prepared elements"	>3-70+55;
"* Call to add an element to the queue of prepared elements"	"* Called when a {@link Op} should be moved from {@link #pending} to {@link #prepared}."	>6-28+5>1+18>1+4>2+1>1+4>1+30>1+1>8-9+2;
"* Called when a {@link Op} should be moved from {@link #pending} to {@link #prepared}."	"* Calls {@link Diff#store(Iterator)} with this object as the argument."	>6-61+1>8-11+55;
"* Calls {@link Diff#store(Iterator)} with this object as the argument."	"* Chunk the delete and insert"	>3-67+26;
"* Chunk the delete and insert"	"* Chunking is used primarily to pre-process input to other algorithms,"	>7-16>2+33>1+13>1+6>1+1>1+4;
"* Chunking is used primarily to pre-process input to other algorithms,"	"* Chunking means removing the two pending operations and replacing them"	>11-59+60;
"* Chunking means removing the two pending operations and replacing them"	"* Command-line interface for badiff"	>3-67+2>1+29;
"* Command-line interface for badiff"	"* Compute a diff from {@code orig} to {@code target} and store in this badiff diff."	>5-18+3>1+7>2+41>2+9>3+5>4+1;
"* Compute a diff from {@code orig} to {@code target} and store in this badiff diff."	"* Compute and return a diff between {@code orig} and {@code target}"	>9+11>8-4+7>14-2+3>15-31;
"* Compute and return a diff between {@code orig} and {@code target}"	"* Compute and return a diff between {@code orig} and {@code target} using"	>67+6;
"* Compute and return a diff between {@code orig} and {@code target} using"	"* Compute and return a one-way (unidirectional) diff from {@code orig} to {@code target}"	>22+25>6-7+4>14-3+2>15-6;
"* Compute and return a one-way (unidirectional) diff from {@code orig} to {@code target}"	"* Compute and return a one-way (unidirectional) diff given any diff"	>53-35+14;
"* Compute and return a one-way (unidirectional) diff given any diff"	"* Compute and return an undo diff from a two-way diff"	>19-38>3+3>1+21>6;
"* Compute and return an undo diff from a two-way diff"	"* Compute statistics for any {@link Diff}"	>10-40+27>3+1;
"* Compute statistics for any {@link Diff}"	"* Compute the hash of a {@link File} given a {@link MessageDigest}"	>10-18+13>8-4+4>1+30;
"* Compute the hash of a {@link File} given a {@link MessageDigest}"	"* Compute the {@link Op} graph for the argument original and target byte arrays."	>13-31>8-13+2>1+56;
"* Compute the {@link Op} graph for the argument original and target byte arrays."	"* Contains internally two {@link Deque} of {@link Op}: {@link #prepared}"	>4-8+33>1+4>11-56+19;
"* Contains internally two {@link Deque} of {@link Op}: {@link #prepared}"	"* Contains metadata in addition to the raw {@link Op}s found in {@link FileDiff}"	>11-31+31>11-1+10>8-10+9;
"* Contains metadata in addition to the raw {@link Op}s found in {@link FileDiff}"	"* Converts a byte array into a string of hex characters."	>5-75+51;
"* Converts a byte array into a string of hex characters."	"* Copy all data from {@code in} to {@code out} without closing either"	>4-52+65;
"* Copy all data from {@code in} to {@code out} without closing either"	"* Copy some bytes"	>7-62+10;
"* Copy some bytes"	"* Copy some data from {@code in} to {@code out} without closing either"	>12-2+21>1+7>1+17>1+10;
"* Copy some data from {@code in} to {@code out} without closing either"	"* Copyright (c) 2013, Robin Kirkman All rights reserved."	>6-59+1>1+2>1+32>1+6>2+4;
"* Copyright (c) 2013, Robin Kirkman All rights reserved."	"* Create a new parallel graphing {@link OpQueue} with the specified number of worker threads."	>3-53+90;
"* Create a new parallel graphing {@link OpQueue} with the specified number of worker threads."	"* Create a new parallel graphing {@link OpQueue} with {@link Runtime#availableProcessors()}"	>54-39+37;
"* Create a new parallel graphing {@link OpQueue} with {@link Runtime#availableProcessors()}"	"* Create a new {@link EditGraph} with the argument buffer size"	>14-39>8-29+9>1+30;
"* Create a new {@link EditGraph} with the argument buffer size"	"* Create a new {@link InertialGraph} with the given buffer capacity"	>22-3+4>1+3>16-8+5>8-4+8;
"* Create a new {@link InertialGraph} with the given buffer capacity"	"* Create a new {@link OpQueue} that draws elements into {@link OpQueue#pending}"	>22-45+57;
"* Create a new {@link OpQueue} that draws elements into {@link OpQueue#pending}"	"* Create a new {@link OpQueue} that draws its elements from the argument {@link OpQueue}s"	>40+4>11-3+2>1+14>15-8>1+1;
"* Create a new {@link OpQueue} that draws its elements from the argument {@link OpQueue}s"	"* Create a new {@link Op}"	>24-65+1;
"* Create a new {@link Op}"	"* Create a {@link ChunkingOpQueue} with a default chunk size"	>10-4>8+8>2+5>1+26;
"* Create a {@link ChunkingOpQueue} with a default chunk size"	"* Create a {@link ChunkingOpQueue} with a specified chunk size"	>42-7+9>11;
"* Create a {@link ChunkingOpQueue} with a specified chunk size"	"* Create a {@link OpQueue} that coalesces pairs of equivalent (INSERT,DELETE)."	>18-8>9-26+31>1+19;
"* Create a {@link OpQueue} that coalesces pairs of equivalent (INSERT,DELETE)."	"* Create a {@link StreamChunkingOpQueue} with the default chunk size"	>18+14>9-51+27;
"* Create a {@link StreamChunkingOpQueue} with the default chunk size"	"* Create a {@link StreamQueueable}"	>24-43+8>1+1;
"* Create a {@link StreamQueueable}"	"* Create a {@link StreamQueueable} with the {@link DefaultSerialization}"	>34+38;
"* Create a {@link StreamQueueable} with the {@link DefaultSerialization}"	"* Create an {@link OpQueue} lazily populated with alternating chunks of data read"	>10-33+1>8-20+7>1+54;
"* Create an {@link OpQueue} lazily populated with alternating chunks of data read"	"* Create an {@link OpQueue} populated with a {@link Op#DELETE}"	>27-7>17-30+18;
"* Create an {@link OpQueue} populated with a {@link Op#DELETE}"	"* DEEEEEEEEEEEEEEEEEEEEEEF"	-62+26;
"* DEEEEEEEEEEEEEEEEEEEEEEF"	"* DELETE takes 3 bytes to start (op, run, null-array) and 0 bytes to continue"	>4-22+73;
"* DELETE takes 3 bytes to start (op, run, null-array) and 0 bytes to continue"	"* Delete some bytes"	>3-56+10>6-12;
"* Delete some bytes"	"* Deserialize this object"	>4-13+8>1+4>1+7;
"* Deserialize this object"	"* DiffOp's with the types ({@link Op#DELETE},{@link Op#INSERT})."	>3-21+17>1+43;
"* DiffOp's with the types ({@link Op#DELETE},{@link Op#INSERT})."	"* Drain all the {@link Op}s in this object to a {@link List}"	>3-42+13>9-10+35;
"* Drain all the {@link Op}s in this object to a {@link List}"	"* Drain all the {@link Op}s in this object to another {@link OpQueue}"	>47+6>8-5+8;
"* Drain all the {@link Op}s in this object to another {@link OpQueue}"	"* Draw the next {@link Op} from this {@link OpQueue}, returning"	>5-6+1>3+3>1+2>11-26+2>1+7>16+11;
"* Draw the next {@link Op} from this {@link OpQueue}, returning"	"* Each operation requires 1 byte for the operation itself, plus 1 (or more)"	-63+75;
"* Each operation requires 1 byte for the operation itself, plus 1 (or more)"	"* Elements from the source currently being filtered"	>3-72+48;
"* Elements from the source currently being filtered"	"* Export the diff to the external format."	>3-45+3>1+4>1+1>1+27;
"* Export the diff to the external format."	"* Fast graph that can compute the optimal diff between two byte arrays."	-41+71;
"* Fast graph that can compute the optimal diff between two byte arrays."	"* Flag that this badiff diff has an optional data section"	>3-68+54;
"* Flag that this badiff diff has an optional data section"	"* Flag that this badiff diff uses an unknown serialization, which must be supplied"	>29-24+25>4+24;
"* Flag that this badiff diff uses an unknown serialization, which must be supplied"	"* Flag that this badiff diff uses the {@link DefaultSerialization}"	>34-12+19>12-24+1;
"* Flag that this badiff diff uses the {@link DefaultSerialization}"	"* Flag that this badiff diff uses the {@link SmallNumberSerialization}"	>45-7+11>14;
"* Flag that this badiff diff uses the {@link SmallNumberSerialization}"	"* Flag to indicate that this diff can only be applied to an {@link InputStream}"	>6+12>11-19+22>1+7>8-25+12;
"* Flag to indicate that this diff can only be applied to an {@link InputStream}"	"* For example, the difference between Hello world! and Hellish cruel world! is computed by"	>3-76+87;
"* For example, the difference between Hello world! and Hellish cruel world! is computed by"	"* For performance reasons the graph is stored in a byte[] with path lengths in"	>6-78+34>1+2>2+5>3+25;
"* For performance reasons the graph is stored in a byte[] with path lengths in"	"* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE"	-78+76;
"* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE"	"* INSERT takes 3 bytes to start (op, run, data) and 1 byte to continue"	>3-71+1>2+64;
"* INSERT takes 3 bytes to start (op, run, data) and 1 byte to continue"	"* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN"	>4-66+69;
"* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN"	"* If null when applying, the {@link Serialization} is read from the {@link Header}'s flags."	>3-70+88;
"* If null when applying, the {@link Serialization} is read from the {@link Header}'s flags."	"* If there are no pending DiffOp's, then try to draw one from"	>5-86+56;
"* If there are no pending DiffOp's, then try to draw one from"	"* Implementation of {@link Diff} that lives entirely in memory, backed"	>3-56+14>1+40>1+11;
"* Implementation of {@link Diff} that lives entirely in memory, backed"	"* Import the externally formatted diff"	>5-63+26>1+2>1+3;
"* Import the externally formatted diff"	"* Insert some bytes"	>3-35+16;
"* Insert some bytes"	"* Interface for objects which can be serialized and deserialized with a {@link Serialization}"	>4-12+17>1+31>2+38;
"* Interface for objects which can be serialized and deserialized with a {@link Serialization}"	"* It's probably easier to use {@link BadiffFileDiff} than this."	>3-66+12>1+1>1+11>8-13+14>1+11;
"* It's probably easier to use {@link BadiffFileDiff} than this."	"* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR"	-63+69;
"* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR"	"* Lazily offer new chunks if available"	>3-66+35;
"* Lazily offer new chunks if available"	"* Look for a (DELETE,INSERT) pair at the head of the pending queue"	>3-34+60>1+2;
"* Look for a (DELETE,INSERT) pair at the head of the pending queue"	"* Magic bytes at the beginning of every badiff file"	-48+16>5-12+15>1+14;
"* Magic bytes at the beginning of every badiff file"	"* NEXT takes 2 bytes to start (op, run) and 0 bytes to continue"	-50+49>1+13;
"* NEXT takes 2 bytes to start (op, run) and 0 bytes to continue"	"* Offer the input to the actual input queue, not the wrapped chain"	-57+13>1+13>1+4>2+7>1+16>1+7;
"* Offer the input to the actual input queue, not the wrapped chain"	"* Offers the element to the wrapped {@link OpQueue}"	>7-13+1>5-22+8>1+1>13-3+3>2+10;
"* Offers the element to the wrapped {@link OpQueue}"	"* Only {@link #INSERT} is guaranteed to have data; {@link #DELETE} may have {@code null}."	>3-32+3>8-5+13>1+53>1+5>1+1;
"* Only {@link #INSERT} is guaranteed to have data; {@link #DELETE} may have {@code null}."	"* Optional data (may be null) for this diff"	>3-86+40;
"* Optional data (may be null) for this diff"	"* Optional data for a diff. Any field may be null."	>16-1+22>11-15+1;
"* Optional data for a diff. Any field may be null."	"* Override this method to provide lazy sequences that populate {@link #pending} on demand."	>3-47+87;
"* Override this method to provide lazy sequences that populate {@link #pending} on demand."	"* Overwrite the argument {@link Diff} with the remaining {@link Op}s in this object."	>6-54+6>1+8>1+2>8-20+52;
"* Overwrite the argument {@link Diff} with the remaining {@link Op}s in this object."	"* Overwrite this object with the operations from the"	>11-60>12-1+29;
"* Overwrite this object with the operations from the"	"* Overwrite this {@link Diff}'s operations with the operations from the"	>17-5+20>1+4>29;
"* Overwrite this {@link Diff}'s operations with the operations from the"	"* Partially lazy means that it will eagerly draw elements until all worker threads are active"	-66+52>1+21>3+8>1+7;
"* Partially lazy means that it will eagerly draw elements until all worker threads are active"	"* Place a {@link Op} in {@link #pending}"	>3-89+30>1+6;
"* Place a {@link Op} in {@link #pending}"	"* Pretty-print a digest."	>3-37+21;
"* Pretty-print a digest."	"* Read a badiff diff header"	-24+27;
"* Read a badiff diff header"	"* Read a chunk from the {@link InputStream}"	>9-16+13>1+15>1+4;
"* Read a chunk from the {@link InputStream}"	"* Read an object of the argument type from the {@link InputStream}"	>8-6+29>29;
"* Read an object of the argument type from the {@link InputStream}"	"* Redistribution and use in source and binary forms, with or without modification,"	>4-62+78;
"* Redistribution and use in source and binary forms, with or without modification,"	"* Require that at least {@code count} elements be in the filtering buffer, polling"	>4-74+2>1+25>1+31>1+8>1+8;
"* Require that at least {@code count} elements be in the filtering buffer, polling"	"* Required for deserialization"	>9-73+21;
"* Required for deserialization"	"* Requires O(n^2) memory and time. Does the computation by computing the"	>9-16+41>5+17;
"* Requires O(n^2) memory and time. Does the computation by computing the"	"* Reset this graph and then recompute it for the new original and target arrays"	>4-63+9>1+30>3+23>1+8;
"* Reset this graph and then recompute it for the new original and target arrays"	"* Return a copy of this {@link Diff}'s operations. This copy may"	>4-71+2>1+2>1+4>1+39>1+9;
"* Return a copy of this {@link Diff}'s operations. This copy may"	"* Return a default message digest. Tries SHA-1, then MD5, then throws an exception."	>11-53+72;
"* Return a default message digest. Tries SHA-1, then MD5, then throws an exception."	"* Return an {@link OpQueue} with pre-populated {@link OpQueue#pending}"	>10-73+60;
"* Return an {@link OpQueue} with pre-populated {@link OpQueue#pending}"	"* Return the data for this operation. Only {@link #INSERT} and {@link #DELETE} have data."	>9+22>1+7>1+2>8-26+11>9-15+7>1+11;
"* Return the data for this operation. Only {@link #INSERT} and {@link #DELETE} have data."	"* Return the run-length of this operation"	>13-7>1+12>15-53;
"* Return the run-length of this operation"	"* Return the {@link OpQueue} of operations computed by this object"	>13-18+18>10+25;
"* Return the {@link OpQueue} of operations computed by this object"	"* Return this object's operations. This queue"	>8-46>12+25;
"* Return this object's operations. This queue"	"* Returns a {@link List} of the {@link Op}s for this graph in <b>reverse order</b>"	>8+39>6-30+23>1+5;
"* Returns a {@link List} of the {@link Op}s for this graph in <b>reverse order</b>"	"* Returns optional data about this diff (may be null)"	>10-72+43;
"* Returns optional data about this diff (may be null)"	"* Returns statistics about this badiff diff"	>10-11+1>2+7>11+7>5-14;
"* Returns statistics about this badiff diff"	"* Returns statistics about this diff"	>31-7>5;
"* Returns statistics about this diff"	"* Returns the current position"	>10-26+20;
"* Returns the current position"	"* Returns the expected hash of the input file"	>14-14+14>1+7>1+8;
"* Returns the expected hash of the input file"	"* Returns the expected hash of the output file"	>35-2+3>8;
"* Returns the expected hash of the output file"	"* Returns the expected input size"	>23-23+10;
"* Returns the expected input size"	"* Returns the expected output size"	>23-2+3>8;
"* Returns the expected output size"	"* Returns the first position that can be {@link #seek(long)}ed"	>14-19+46>1+1;
"* Returns the first position that can be {@link #seek(long)}ed"	"* Returns the flags for this diff"	>15-46+14>1+3;
"* Returns the flags for this diff"	"* Returns the hashing algorithm used"	>14-19+22;
"* Returns the hashing algorithm used"	"* Returns the header for this badiff diff"	>15-19+3>1+18>1+3;
"* Returns the header for this badiff diff"	"* Returns the last position, plus one, that can be {@link #seek(long)}ed"	>14-27+58;
"* Returns the last position, plus one, that can be {@link #seek(long)}ed"	"* Returns the magic bytes for this diff"	>14-56+9>1+11>1+3;
"* Returns the magic bytes for this diff"	"* Returns the number of rewinds (DELETE with negative run length)"	>14-24+8>1+42;
"* Returns the number of rewinds (DELETE with negative run length)"	"* Returns the operation, one of {@link #STOP}, {@link #DELETE}, {@link #INSERT}, or {@link #NEXT}"	>14-51+83;
"* Returns the operation, one of {@link #STOP}, {@link #DELETE}, {@link #INSERT}, or {@link #NEXT}"	"* Returns the queue of {@link OpQueue} used to draw elements from"	>14-13+4>12-57+7>1+27;
"* Returns the queue of {@link OpQueue} used to draw elements from"	"* Returns the specified digest, or throws a {@link RuntimeException}"	>14-7+5>1+23>8-34+5>1+11;
"* Returns the specified digest, or throws a {@link RuntimeException}"	"* Returns the total number of DELETE operations"	>14-54+33;
"* Returns the total number of DELETE operations"	"* Returns the total number of INSERT operations"	>30-5+3>1+2>11;
"* Returns the total number of INSERT operations"	"* Returns the total number of NEXT operations"	>30-5+3>12;
"* Returns the total number of NEXT operations"	"* Returns the version for this diff"	>14-27+4>3+8>1+5;
"* Returns the version for this diff"	"* Returns the {@link Serialization} used by this diff"	>14-10+9>1+19>10;
"* Returns the {@link Serialization} used by this diff"	"* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS"	-53+74;
"* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS"	"* Serialization used for this stream"	>2-71>1+33;
"* Serialization used for this stream"	"* Serialize this object"	>10-26+13;
"* Serialize this object"	"* Set the current position"	>4-16+4>1+1>1+11>1+3;
"* Set the current position"	"* Sets the expected hash of the input file"	>5+1>5-14+14>1+7>1+8;
"* Sets the expected hash of the input file"	"* Sets the expected hash of the output file"	>32-2+3>8;
"* Sets the expected hash of the output file"	"* Sets the hashing algorithm used"	>10-9>5-16>1+4>1+10>1+1;
"* Sets the hashing algorithm used"	"* Since the raw file contents are already serialized, just dump"	>3-27+39>1+7>1+8>1+3;
"* Since the raw file contents are already serialized, just dump"	"* Statistics about this diff"	>3-60+25;
"* Statistics about this diff"	"* Statistics summarizing this badiff diff"	>13-5+11>5+7>5;
"* Statistics summarizing this badiff diff"	"* Stop diffing"	>4-32+2>5+3;
"* Stop diffing"	"* THE POSSIBILITY OF SUCH DAMAGE."	-14+33;
"* THE POSSIBILITY OF SUCH DAMAGE."	"* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS"	>4-29+71;
"* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS"	"* The algorithm used to compute hashes"	>3-72+35;
"* The algorithm used to compute hashes"	"* The chunk size"	>6-31+6>1+3;
"* The chunk size"	"* The computed diff is one-way and uses rewind optimization."	>7-8+34>1+18;
"* The computed diff is one-way and uses rewind optimization."	"* The data for the operation"	>6-54+22;
"* The data for the operation"	"* The default size of a chunk for operations which chunk their input"	>7-10+10>1+15>10+25;
"* The default size of a chunk for operations which chunk their input"	"* The disadvantage of the {@link InertialGraph} compared with the {@link EditGraph} is that"	>7-60+80>1+3;
"* The disadvantage of the {@link InertialGraph} compared with the {@link EditGraph} is that"	"* The expected hash of the input file"	>6-53+5>1+6>1+3>5-24+4>1+5;
"* The expected hash of the input file"	"* The expected hash of the output file"	>27-2+3>8;
"* The expected hash of the output file"	"* The flags"	>6-32+5;
"* The flags"	"* The graph assigns costs for each possible {@link Op} transition. Each {@link Op} takes at least"	>6-2+6>1+3>1+78>1+1;
"* The graph assigns costs for each possible {@link Op} transition. Each {@link Op} takes at least"	"* The incremental cost of beginning the next operation given the"	>6-87+6>1+2>1+4>1+40>1+2;
"* The incremental cost of beginning the next operation given the"	"* The input stream"	>8-55+7>1+2;
"* The input stream"	"* The input stream has to be processed to determine when to stop reading,"	>18+55;
"* The input stream has to be processed to determine when to stop reading,"	"* The magic bytes"	>6-67+11;
"* The magic bytes"	"* The next {@link Op} to be returned by the iterator."	>6-11+47;
"* The next {@link Op} to be returned by the iterator."	"* The number of DELETE operations"	>7-46+26;
"* The number of DELETE operations"	"* The number of INSERT operations"	>16-5+3>1+2>11;
"* The number of INSERT operations"	"* The number of NEXT operations"	>16-5+3>12;
"* The number of NEXT operations"	"* The number of rewinds (DELETE with negative run length)"	>16-13+4>1+1>1+34;
"* The number of rewinds (DELETE with negative run length)"	"* The object may be null."	>6-51+19;
"* The object may be null."	"* The operation"	>7-18+8;
"* The operation"	"* The operation type"	>15+5;
"* The operation type"	"* The original byte sequence"	>7-12+17>1+3;
"* The original byte sequence"	"* The path length"	>6-21+6>1+4;
"* The path length"	"* The queue of {@link OpQueue} to draw elements from"	>6-11+46;
"* The queue of {@link OpQueue} to draw elements from"	"* The real source of elements"	>6-32+14>9-5;
"* The real source of elements"	"* The result of using a weight based on serialization rather than literal edge length is that, while"	>8-17+72>2+1>1+3>1+12;
"* The result of using a weight based on serialization rather than literal edge length is that, while"	"* The run-length of the operation"	>7-91+3>1+15>1+6;
"* The run-length of the operation"	"* The size of the input file"	>6-10+4>8-8+1>1+8;
"* The size of the input file"	"* The size of the output file"	>18-2+3>8;
"* The size of the output file"	"* The source of elements for this {@link FilterOpQueue}"	>7-15+1>1+13>1+1>2+16>2+9>1+1;
"* The source of elements for this {@link FilterOpQueue}"	"* The target byte sequence"	>6-49+20;
"* The target byte sequence"	"* The version"	>6-19+1>1+5;
"* The version"	"* The {@link #queue()} method can be called only once; calling it again"	>6-4+3>1+39>1+10>1+10;
"* The {@link #queue()} method can be called only once; calling it again"	"* The {@link Future} that will supply an {@link OpQueue} to draw elements from"	>13-55+25>1+5>1+25>1+7;
"* The {@link Future} that will supply an {@link OpQueue} to draw elements from"	"* The {@link Op}s which are prepared to be {@link #poll()}ed"	>13-27+29>8-30+10;
"* The {@link Op}s which are prepared to be {@link #poll()}ed"	"* The {@link Serialization} for this diff. If null when diffing, {@link DefaultSerialization} is used."	>13-28+40>1+10>8-7+20>1+6>2+1;
"* The {@link Serialization} for this diff. If null when diffing, {@link DefaultSerialization} is used."	"* The {@link Serialization} used for this diff"	>27+5>14-61;
"* The {@link Serialization} used for this diff"	"* Thread pool for parallelization"	>4-13+17>1+3>8-20;
"* Thread pool for parallelization"	"* Thread-local of {@link Graph} to avoid allocating ridonkulous amounts of memory"	>8-20+38>2+5>1+12>1+1>1+12;
"* Thread-local of {@link Graph} to avoid allocating ridonkulous amounts of memory"	"* Utilities for dealing with {@link Diff}s as {@code byte[]}."	-16+12>1+15>8-55+18>1+6;
"* Utilities for dealing with {@link Diff}s as {@code byte[]}."	"* Utilities for dealing with {@link Diff}s as {@link File}"	>48-13+10;
"* Utilities for dealing with {@link Diff}s as {@link File}"	"* Utility class for working with {@link MessageDigest}s"	>8-11+3>1+12>16-20+10>1+2>1+1;
"* Utility class for working with {@link MessageDigest}s"	"* Utility methods for computing and using differences"	>10-44+27>1+15;
"* Utility methods for computing and using differences"	"* Utility methods for dealing with streams"	>22-29+1>1+11>1+6;
"* Utility methods for dealing with streams"	"* Utility methods that produce {@link MemoryDiff} objects"	>18-24+39;
"* Utility methods that produce {@link MemoryDiff} objects"	"* View the {@link ObjectOutput} as an {@link OutputStream} by either casting or wrapping"	-29+9>9-13+1>5+47>1+16;
"* View the {@link ObjectOutput} as an {@link OutputStream} by either casting or wrapping"	"* View thw {@link ObjectInput} as an {@link InputStream} by either casting or wrapping"	>9-1+1>13-3>1+2>18-3+2>40;
"* View thw {@link ObjectInput} as an {@link InputStream} by either casting or wrapping"	"* Write a badiff diff header"	-86+28;
"* Write a badiff diff header"	"* Write a badiff file"	>17-11+4;
"* Write a badiff file"	"* Write the argument object to the {@link OutputStream}."	>8-11+29>1+13>1+4;
"* Write the argument object to the {@link OutputStream}."	"* a new {@link Op}.<p>"	-33+5>1+1>9-11+1>2+3;
"* a new {@link Op}.<p>"	"* a short[], rather than having individual objects for each node in the graph."	>4-18+74;
"* a short[], rather than having individual objects for each node in the graph."	"* a {@code byte[]}"	>4-74+14;
"* a {@code byte[]}"	"* an element from {@link #pending} to {@link #prepared}.<p>"	>3-14+51>1+4;
"* an element from {@link #pending} to {@link #prepared}.<p>"	"* and a node but instead on the logical byte cost to serialize that edge sequence. The general premise"	>4-55+98;
"* and a node but instead on the logical byte cost to serialize that edge sequence. The general premise"	"* and a {@link Op#INSERT}"	>8-94+17;
"* and a {@link Op#INSERT}"	"* and produces chunked output similar to {@link ChunkingOpQueue}."	>6+29>1+4>8-9+15>1+1;
"* and produces chunked output similar to {@link ChunkingOpQueue}."	"* and {@link #pending}. Calls to {@link #poll()} draw from {@link #prepared}"	>6-31+23>11-17+36;
"* and {@link #pending}. Calls to {@link #poll()} draw from {@link #prepared}"	"* and/or other materials provided with the distribution."	>5-71+51;
"* and/or other materials provided with the distribution."	"* any time a lazy element request is made."	>4-52+38;
"* any time a lazy element request is made."	"* applies {@link Graph} to them, in parallel. This {@link OpQueue} is <b>PARTIALLY LAZY</b>."	>3-37+39>1+1>1+47;
"* applies {@link Graph} to them, in parallel. This {@link OpQueue} is <b>PARTIALLY LAZY</b>."	"* are permitted provided that the following conditions are met:"	>3-89+60;
"* are permitted provided that the following conditions are met:"	"* argument {@link Iterator}"	>4-59+23;
"* argument {@link Iterator}"	"* badiff - byte array diff - fast pure-java byte-level diffing"	-27+62;
"* badiff - byte array diff - fast pure-java byte-level diffing"	"* badiff file format version"	>9-53+19;
"* badiff file format version"	"* be {@link OpQueue#poll()}'d from but not {@link OpQueue#offer(Op)}'d to."	>3-22+5>1+31>1+6>1+26;
"* be {@link OpQueue#poll()}'d from but not {@link OpQueue#offer(Op)}'d to."	"* by a {@link List} of {@link Op}."	>3-1+3>8-29+3>1+4>10-22+2;
"* by a {@link List} of {@link Op}."	"* by calling {@link OpQueue#poll()} on the argument"	>5-17+7>10-2+29;
"* by calling {@link OpQueue#poll()} on the argument"	"* bytes for the run length. Additionally, INSERT has 1 byte for each byte in the run."	>4-44+68>1+2>1+1>1+7;
"* bytes for the run length. Additionally, INSERT has 1 byte for each byte in the run."	"* compared with {@link EditGraph}'s run length of 21, but the serialized length of the {@link InertialGraph}'s"	-14+8>1+26>11-59+64;
"* compared with {@link EditGraph}'s run length of 21, but the serialized length of the {@link InertialGraph}'s"	"* current operation. These costs are based on the actual serialization"	>3-52>1+26>1+14>4+7>9-40+5;
"* current operation. These costs are based on the actual serialization"	"* diff is {@code 16}, versus {@code 21} for the {@link EditGraph}. <p>"	-67+7>1+33>1+10>1+17;
"* diff is {@code 16}, versus {@code 21} for the {@link EditGraph}. <p>"	"* discarding the head when it is emptied. Lazy."	>4-66+43;
"* discarding the head when it is emptied. Lazy."	"* from a {@link List}"	-47+21;
"* from a {@link List}"	"* from an evaluated {@link Future}{@code <OpQueue>} rather than a direct {@link OpQueue}."	>8+11>8-3+44>1+15>1+1;
"* from an evaluated {@link Future}{@code <OpQueue>} rather than a direct {@link OpQueue}."	"* from the argument list"	>7-82+17;
"* from the argument list"	"* from the head of a queue of other {@link OpQueue} instances,"	>11-7+20>1+3>1+2>1+13>1+1>2+6;
"* from the head of a queue of other {@link OpQueue} instances,"	"* from the streams."	>11-51+8;
"* from the streams."	"* from {@link #source} as necessary. Returns true if the filtering buffer contains"	>7-10+24>1+3>1+46;
"* from {@link #source} as necessary. Returns true if the filtering buffer contains"	"* in a lazy manner, emptying each {@link OpQueue} before drawing any from the next."	-5+21>1+11>8-68+42;
"* in a lazy manner, emptying each {@link OpQueue} before drawing any from the next."	"* in the head of its {@link OpQueue#pending} queue if they have the same {@link Op#getData()}."	>5-27+4>1+10>15-35+59;
"* in the head of its {@link OpQueue#pending} queue if they have the same {@link Op#getData()}."	"* is that the incremental cost of continuing an {@link Op}'s run is often less than the cost of starting"	>3-65>1+3>1+11>2+26>10-12+47;
"* is that the incremental cost of continuing an {@link Op}'s run is often less than the cost of starting"	"* it uses more memory to compute, and is slightly slower. On the other hand, you get better diffs."	>3-96+16>1+10>1+12>1+29>1+7>1+16;
"* it uses more memory to compute, and is slightly slower. On the other hand, you get better diffs."	"* make it easy to work with."	-98+28;
"* make it easy to work with."	"* memory-mapped files"	>3-25+18;
"* memory-mapped files"	"* methods with the {@link Iterator} methods.<p>"	>4-13+7>1+9>1+15>1+4>1+4;
"* methods with the {@link Iterator} methods.<p>"	"* null if this {@link OpQueue} is empty."	-18+14>8-21+18;
"* null if this {@link OpQueue} is empty."	"* number of worker threads."	>4-36+23;
"* number of worker threads."	"* or process their contents only in response to calls to {@link #poll()}."	-27+73;
"* or process their contents only in response to calls to {@link #poll()}."	"* or the chain is empty."	>5-68+19;
"* or the chain is empty."	"* output byte array. Usually this will use a mathematical graph construct."	>3-17+2>1+5>1+6>2+54;
"* output byte array. Usually this will use a mathematical graph construct."	"* output."	>7-65>2;
"* output."	"* shortest path across a graph connected by available {@link Op} operations."	-9+76;
"* shortest path across a graph connected by available {@link Op} operations."	"* shove the ops into a temp FileDiff first so we can compute some stats"	>5-71+66;
"* shove the ops into a temp FileDiff first so we can compute some stats"	"* specific prior written permission."	>3-66+18>1+9>1+4;
"* specific prior written permission."	"* such as {@link EditGraph}, into manageable sizes."	>3-33+48;
"* such as {@link EditGraph}, into manageable sizes."	"* that also implements {@link Random}"	-5+3>1+2>2+13>9-34+7;
"* that also implements {@link Random}"	"* the file to the output stream."	>4-33+28;
"* the file to the output stream."	"* the head of the chain until either there is a pending DiffOp"	>6-26+56;
"* the head of the chain until either there is a pending DiffOp"	"* the required count of elements, false if not."	>6-56+41;
"* the required count of elements, false if not."	"* the results to a target {@link OutputStream}. Objects which implement"	>8-15+39>1+3>1+13>6-16;
"* the results to a target {@link OutputStream}. Objects which implement"	"* the sum of the runs of the path may be greater than with {@link EditGraph}, the serialized diff"	>6-15+11>1+23>1+4>1+9>1+1>8-37+12>1+18;
"* the sum of the runs of the path may be greater than with {@link EditGraph}, the serialized diff"	"* the {@link InertialGraph} as {@code >4-1+9>7;} and computed by {@link EditGraph} as"	>6-49+3>1+7>1+7>1+38>18-21+3;
"* the {@link InertialGraph} as {@code >4-1+9>7;} and computed by {@link EditGraph} as"	"* this list of conditions and the following disclaimer in the documentation"	>4-78+21>2+19>1+28;
"* this list of conditions and the following disclaimer in the documentation"	"* this list of conditions and the following disclaimer."	>54-21+1;
"* this list of conditions and the following disclaimer."	"* to the constructor"	>3-52+17;
"* to the constructor"	"* to {@link Op#DELETE} a {@code byte[]} and one to {@link Op#INSERT}"	>5-15+63;
"* to {@link Op#DELETE} a {@code byte[]} and one to {@link Op#INSERT}"	"* two bytes:<p>"	>3-65+12;
"* two bytes:<p>"	"* unless it is empty, in which case they call {@link #pull()} to move"	-15+69;
"* unless it is empty, in which case they call {@link #pull()} to move"	"* unlike serialize(...) which can just dump the file to the output stream"	>5-19+18>9-35+38>1+2;
"* unlike serialize(...) which can just dump the file to the output stream"	"* used to endorse or promote products derived from this software without"	>3-69+46>1+22;
"* used to endorse or promote products derived from this software without"	"* via {@link Applyable}. {@link Diff} is a <b>re-usable</b> instance of {@link Applyable}."	-70+49>1+13>1+26;
"* via {@link Applyable}. {@link Diff} is a <b>re-usable</b> instance of {@link Applyable}."	"* whose {@link Op#getRun()} length is no greater than the chunk size.<p>"	-71+7>8-8+4>1+6>1+41>1+3;
"* whose {@link Op#getRun()} length is no greater than the chunk size.<p>"	"* will be smaller.<p>"	>3-64+12>1+1>4;
"* will be smaller.<p>"	"* will return the <b>next</b> sequence of {@link Op}s in the input stream."	>7-13+21>1+45;
"* will return the <b>next</b> sequence of {@link Op}s in the input stream."	"* with alternating {@link Op#DELETE} and {@link Op#INSERT} operations"	>4-37+14>10-23+41;
"* with alternating {@link Op#DELETE} and {@link Op#INSERT} operations"	"* with their {@link EditGraph}'d equivalents"	>7-33+5>8-21+24;
"* with their {@link EditGraph}'d equivalents"	"* without having them all in memory"	>6-38+29;
"* without having them all in memory"	"* {@code >2+1>1+8>1-1>7;}. The {@link InertialGraph} uses a total run length of 21"	-35+82;
"* {@code >2+1>1+8>1-1>7;}. The {@link InertialGraph} uses a total run length of 21"	"* {@link #apply(InputStream, OutputStream)} will work."	>4-78+50;
"* {@link #apply(InputStream, OutputStream)} will work."	"* {@link Applyable} might not be re-usable; for some objects only one call to"	>9-45+68;
"* {@link Applyable} might not be re-usable; for some objects only one call to"	"* {@link Diff} that is backed by a {@link File}. Extends {@link File} to"	>9-60+13>1+2>1+7>1+25>1+6>1+2>3;
"* {@link Diff} that is backed by a {@link File}. Extends {@link File} to"	"* {@link FilterInputStream} which doesn't close its wrapped {@link InputStream}"	>9-42+3>2+2>1+17>1+15>1+8>8-8+12;
"* {@link FilterInputStream} which doesn't close its wrapped {@link InputStream}"	"* {@link FilterOutputStream} which doesn't close its wrapped {@link OutputStream}"	>15-2+3>50-2+3>10;
"* {@link FilterOutputStream} which doesn't close its wrapped {@link OutputStream}"	"* {@link Graph} which computes diff path lengths based not on the literal edge count between the origin"	>9-18+5>8-46+81;
"* {@link Graph} which computes diff path lengths based not on the literal edge count between the origin"	"* {@link InputFormat} and {@link OutputFormat} for badiff diffs."	>9-92+20>2+33;
"* {@link InputFormat} and {@link OutputFormat} for badiff diffs."	"* {@link InputStream} that has no content"	>14-50+27;
"* {@link InputStream} that has no content"	"* {@link InputStream} that reads from an {@link ObjectInput}"	>27-11+24>1+3>1+2>1+1;
"* {@link InputStream} that reads from an {@link ObjectInput}"	"* {@link OpQueue} also implements {@link Iterator}. Don't mix the {@link #poll()} and {@link #offer(Op)}"	>9-28+8>2+11>1+2>8-10+21>1+17>1+23;
"* {@link OpQueue} also implements {@link Iterator}. Don't mix the {@link #poll()} and {@link #offer(Op)}"	"* {@link OpQueue} backed by this badiff file"	>18-86+26;
"* {@link OpQueue} backed by this badiff file"	"* {@link OpQueue} instances are <b>lazy sequences</b>, and will instantiate"	>18-23>1+16>1+11>1+27;
"* {@link OpQueue} instances are <b>lazy sequences</b>, and will instantiate"	"* {@link OpQueue} similar to {@link FilterOpQueue}, but draws its elements"	>18-52+8>1+10>1+20>1+4>1+6>1+3;
"* {@link OpQueue} similar to {@link FilterOpQueue}, but draws its elements"	"* {@link OpQueue} that draws its pending elements from another wrapped {@link OpQueue}"	>18-36+3>11+8>9+37;
"* {@link OpQueue} that draws its pending elements from another wrapped {@link OpQueue}"	"* {@link OpQueue} that draws its {@link Op} elements"	>32-38>10-5>1+9;
"* {@link OpQueue} that draws its {@link Op} elements"	"* {@link OpQueue} that entirely removes pairs of (INSERT,DELETE) {@link Op}s"	>23-7+2>1+18>1+19>11-8>1;
"* {@link OpQueue} that entirely removes pairs of (INSERT,DELETE) {@link Op}s"	"* {@link OpQueue} that initially populates its {@link OpQueue#pending}"	>23-41+23>10-2+14;
"* {@link OpQueue} that initially populates its {@link OpQueue#pending}"	"* {@link OpQueue} that is pre-populated with two {@link Op}s, one"	>24-8+1>1+4>8-5+10>10-13>1+6;
"* {@link OpQueue} that is pre-populated with two {@link Op}s, one"	"* {@link OpQueue} that lazily chunks pairs of pending"	>23-40+10>1+13>1+5;
"* {@link OpQueue} that lazily chunks pairs of pending"	"* {@link OpQueue} that lazily reads from two input streams (original and target)"	>30-19+3>1+30>1+5>1+5>1+3;
"* {@link OpQueue} that lazily reads from two input streams (original and target)"	"* {@link OpQueue} that locates pairs of ({@link Op#DELETE},{@link Op#INSERT}) and"	>24-54+3>1+48>1+4;
"* {@link OpQueue} that locates pairs of ({@link Op#DELETE},{@link Op#INSERT}) and"	"* {@link OpQueue} that reads from a stream"	>23-57+3>1+15;
"* {@link OpQueue} that reads from a stream"	"* {@link OpQueue} that replaces ({@link Op#DELETE},{@link Op#INSERT}) pairs"	>25-17+50;
"* {@link OpQueue} that replaces ({@link Op#DELETE},{@link Op#INSERT}) pairs"	"* {@link OpQueue} that strips the {@link Op#getData()} from {@link Op#DELETE}s"	>23-7+5>1+11>1+10>1+8>17-24>1;
"* {@link OpQueue} that strips the {@link Op#getData()} from {@link Op#DELETE}s"	"* {@link OpQueue} that will draw elements from a {@link Future}{@code <OpQueue>}"	>23-31+18>5+2>8-11+24;
"* {@link OpQueue} that will draw elements from a {@link Future}{@code <OpQueue>}"	"* {@link OutputFormat} and {@link InputFormat} for writing/reading GDIFF"	>10-34+6>1+1>1+3>2+2>8-23+11>1+26;
"* {@link OutputFormat} and {@link InputFormat} for writing/reading GDIFF"	"* {@link OutputStream} that reads from an {@link ObjectOutput}"	>15-10+16>1+9>8-38+13;
"* {@link OutputStream} that reads from an {@link ObjectOutput}"	"* {@link Queueable} that reads its elements from an {@link InputStream}."	>9-12+9>11+13>17-9+2>2+2>1+4>1+1;
"* {@link Queueable} that reads its elements from an {@link InputStream}."	"* {@link RuntimeException} wrapper around {@link IOException}"	>9-38+5>1+19>2+3>1+1>9-12+11;
"* {@link RuntimeException} wrapper around {@link IOException}"	"+ DefaultSerialization.getInstance().getClass().getSimpleName());"	-61+65;
"+ DefaultSerialization.getInstance().getClass().getSimpleName());"	"+ Digests.pretty(actualPostHash));"	>3-57+9>1+3>1+14>3;
"+ Digests.pretty(actualPostHash));"	"+ Digests.pretty(actualPreHash));"	>24-3+2>7;
"+ Digests.pretty(actualPreHash));"	"+ Digests.pretty(expectedPostHash) + , actual"	>17+22>6-10;
"+ Digests.pretty(expectedPostHash) + , actual"	"+ Digests.pretty(expectedPreHash) + , actual"	>26-3+2>16;
"+ Digests.pretty(expectedPreHash) + , actual"	"+ SmallNumberSerialization.getInstance().getClass().getSimpleName());"	-41+8>1+37>1+12>1+9;
"+ SmallNumberSerialization.getInstance().getClass().getSimpleName());"	"+ serial.getClass().getSimpleName() + , file declares"	-40+8>27-2+18;
"+ serial.getClass().getSimpleName() + , file declares"	"// @Test"	-51+5>2+1;
"// @Test"	"// Compute the stats"	>3-2+10>1+1>1+2>1+1;
"// Compute the stats"	"// Copy the ops"	>5-15+10;
"// Copy the ops"	"// S D I N"	>3-12+7;
"// S D I N"	"// Write the header"	>3-7+16;
"// Write the header"	"// bump the pair into the ready queue"	>3-14+21>1+1>1+10;
"// bump the pair into the ready queue"	"// construct a task and submit it to the pool"	>3-32+22>1+13>1+5;
"// construct a task and submit it to the pool"	"// magic"	>3-42+5;
"// magic"	"// mark entry costs"	>5-2+9>1+4;
"// mark entry costs"	"// strange switch fallthrough?"	>3-13>2+6>1+18;
"// strange switch fallthrough?"	"// version"	>3-27+7;
"// version"	"@Deprecated"	-10+11;
"@Deprecated"	"@Override"	-9+3>1+3>1+1;
"@Override"	"@SuppressWarnings(resource)"	-8+25>1+1;
"@SuppressWarnings(resource)"	"@SuppressWarnings({ rawtypes, unchecked })"	>18-9+24;
"@SuppressWarnings({ rawtypes, unchecked })"	"@Test"	-42+5;
"@Test"	"Assert.assertEquals(-1, DefaultSerialization.getInstance().readLong(din));"	-2+46>1+3>2+22;
"Assert.assertEquals(-1, DefaultSerialization.getInstance().readLong(din));"	"Assert.assertEquals(-159, DefaultSerialization.getInstance().readLong(din));"	>22+2>52;
"Assert.assertEquals(-159, DefaultSerialization.getInstance().readLong(din));"	"Assert.assertEquals(1, DefaultSerialization.getInstance().readLong(din));"	>20-4+1>52;
"Assert.assertEquals(1, DefaultSerialization.getInstance().readLong(din));"	"Assert.assertEquals(159, DefaultSerialization.getInstance().readLong(din));"	>21+2>52;
"Assert.assertEquals(159, DefaultSerialization.getInstance().readLong(din));"	"Assert.assertEquals(Integer.MAX_VALUE + 1L, DefaultSerialization.getInstance().readLong(din));"	>20-3+22>52;
"Assert.assertEquals(Integer.MAX_VALUE + 1L, DefaultSerialization.getInstance().readLong(din));"	"Assert.assertEquals(Integer.MIN_VALUE - 1L, DefaultSerialization.getInstance().readLong(din));"	>29-10+10>55;
"Assert.assertEquals(Integer.MIN_VALUE - 1L, DefaultSerialization.getInstance().readLong(din));"	"Assert.assertEquals(new String(target), new String(result));"	>20-69+27>2+8>3;
"Assert.assertEquals(new String(target), new String(result));"	"Assert.assertEquals(target, new String(bout.toByteArray()));"	>19-11>7-1>13-5+9>1+8>3;
"Assert.assertEquals(target, new String(bout.toByteArray()));"	"Assert.assertEquals(target, new String(result));"	>39-18+6>3;
"Assert.assertEquals(target, new String(result));"	"Assert.assertTrue(Arrays.equals(target, result));"	>13-1+13>14-11>9;
"Assert.assertTrue(Arrays.equals(target, result));"	"Assert.assertTrue(Arrays.equals(target.toByteArray(), result.toByteArray()));"	>38+14>8+14>3;
"Assert.assertTrue(Arrays.equals(target.toByteArray(), result.toByteArray()));"	"BadiffFileDiff bd = new BadiffFileDiff(File.createTempFile(badiff, .tmp));"	-74+71>3;
"BadiffFileDiff bd = new BadiffFileDiff(File.createTempFile(badiff, .tmp));"	"BadiffFileDiff diff = new BadiffFileDiff(args[1]);"	>15-1>1+3>22-33+7>2;
"BadiffFileDiff diff = new BadiffFileDiff(args[1]);"	"BadiffFileDiff.Header header = diff.header();"	>14+16>5-29+8>2;
"BadiffFileDiff.Header header = diff.header();"	"BadiffFileDiff.Optional opt = header.getOptional();"	>11-21>4+15>6+12>3;
"BadiffFileDiff.Optional opt = header.getOptional();"	"BadiffFileDiff.Stats stats = header.getStats();"	>15-11+9>1+1>13-8+5>3;
"BadiffFileDiff.Stats stats = header.getStats();"	"BadiffFileDiff.store(out, DefaultSerialization.getInstance(), opt, diff.queue());"	>15-25+17>1+8>1+7>1+2>1+24>1+1>2;
"BadiffFileDiff.store(out, DefaultSerialization.getInstance(), opt, diff.queue());"	"BufferedReader br = new BufferedReader(new FileReader(java));"	>1-72>1+19>1+3>1+25>1+1>1+4>3;
"BufferedReader br = new BufferedReader(new FileReader(java));"	"Byte b1 = o1.getOp();"	-59+19>2;
"Byte b1 = o1.getOp();"	"Byte b2 = o2.getOp();"	>6-6+6>9;
"Byte b2 = o2.getOp();"	"ByteArrayInputStream b = new ByteArrayInputStream(buf);"	>4-13+36>1+8>1+3>2;
"ByteArrayInputStream b = new ByteArrayInputStream(buf);"	"ByteArrayOutputStream b = new ByteArrayOutputStream();"	>9-2+3>27-2+3>10-3>2;
"ByteArrayOutputStream b = new ByteArrayOutputStream();"	"ByteArrayOutputStream bout = new ByteArrayOutputStream();"	>23+3>31;
"ByteArrayOutputStream bout = new ByteArrayOutputStream();"	"ByteArrayOutputStream buf = new ByteArrayOutputStream();"	>23-3+2>31;
"ByteArrayOutputStream buf = new ByteArrayOutputStream();"	"ByteArrayOutputStream orig = new ByteArrayOutputStream(SIZE);"	>22-3+4>29+4>2;
"ByteArrayOutputStream orig = new ByteArrayOutputStream(SIZE);"	"ByteArrayOutputStream out = new ByteArrayOutputStream();"	>23-3+2>29-4>2;
"ByteArrayOutputStream out = new ByteArrayOutputStream();"	"ByteArrayOutputStream result = new ByteArrayOutputStream();"	>22-1+3>1+1>32;
"ByteArrayOutputStream result = new ByteArrayOutputStream();"	"ByteArrayOutputStream result = new ByteArrayOutputStream(SIZE);"	>57+4>2;
"ByteArrayOutputStream result = new ByteArrayOutputStream(SIZE);"	"ByteArrayOutputStream target = new ByteArrayOutputStream(SIZE);"	>22-5+5>36;
"ByteArrayOutputStream target = new ByteArrayOutputStream(SIZE);"	"CHUNK);"	-61+5>2;
"CHUNK);"	"Collections.reverse(ops);"	-5+23>2;
"Collections.reverse(ops);"	"Collections.sort(filtering, OP_ORDER);"	>12-10>1+23>2;
"Collections.sort(filtering, OP_ORDER);"	"DataInputInputStream din = new DataInputInputStream(ext);"	-36+55>2;
"DataInputInputStream din = new DataInputInputStream(ext);"	"DataInputStream din = new DataInputStream(new ByteArrayInputStream(bout.toByteArray()));"	>4-5>31+20>12-2+9>1+9>2;
"DataInputStream din = new DataInputStream(new ByteArrayInputStream(bout.toByteArray()));"	"DataInputStream in = new DataInputStream(new FileInputStream(this));"	>16-1>29-9+4>12-18+4>3;
"DataInputStream in = new DataInputStream(new FileInputStream(this));"	"DataOutputOutputStream dout = new DataOutputOutputStream(out);"	>4-2+9>10-2+4>11-22+9>10-5+3>2;
"DataOutputOutputStream dout = new DataOutputOutputStream(out);"	"DataOutputStream dout = new DataOutputStream(bout);"	>4-6>28-6>13+1>5;
"DataOutputStream dout = new DataOutputStream(bout);"	"DataOutputStream out = new DataOutputStream(new FileOutputStream(this));"	>17-1>27-2+12>1+8>1+4>2;
"DataOutputStream out = new DataOutputStream(new FileOutputStream(this));"	"DataOutputStream self = new DataOutputStream(new FileOutputStream(this));"	>17-3+4>52;
"DataOutputStream self = new DataOutputStream(new FileOutputStream(this));"	"DefaultSerialization.getInstance().writeLong(dout, -1);"	-68+17>1+8>1+6>1+19>2;
"DefaultSerialization.getInstance().writeLong(dout, -1);"	"DefaultSerialization.getInstance().writeLong(dout, -159);"	>53+2>2;
"DefaultSerialization.getInstance().writeLong(dout, -159);"	"DefaultSerialization.getInstance().writeLong(dout, 1);"	>51-4+1>2;
"DefaultSerialization.getInstance().writeLong(dout, 1);"	"DefaultSerialization.getInstance().writeLong(dout, 159);"	>52+2>2;
"DefaultSerialization.getInstance().writeLong(dout, 159);"	"DefaultSerialization.getInstance().writeLong(dout, Integer.MAX_VALUE + 1L);"	>51-3+22>2;
"DefaultSerialization.getInstance().writeLong(dout, Integer.MAX_VALUE + 1L);"	"DefaultSerialization.getInstance().writeLong(dout, Integer.MIN_VALUE - 1L);"	>60-10+10>5;
"DefaultSerialization.getInstance().writeLong(dout, Integer.MIN_VALUE - 1L);"	"Diffs.apply(diff, orig, target);"	-73+30>2;
"Diffs.apply(diff, orig, target);"	"Diffs.apply(new UndoOpQueue(diff.queue()), target, orig);"	>12-10+29>8+6>2;
"Diffs.apply(new UndoOpQueue(diff.queue()), target, orig);"	"DigestInputStream digin = new DigestInputStream("	-57+48;
"DigestInputStream digin = new DigestInputStream("	"DigestInputStream digin = new DigestInputStream(new FileInputStream(file), digest);"	>48+35;
"DigestInputStream digin = new DigestInputStream(new FileInputStream(file), digest);"	"DigestInputStream digin = new DigestInputStream(new RandomInputStream(orig), Digests.defaultDigest());"	>52-4+6>12-4+4>3+8>1+7>5+2>2;
"DigestInputStream digin = new DigestInputStream(new RandomInputStream(orig), Digests.defaultDigest());"	"DigestOutputStream digout = new DigestOutputStream(new NoopOutputStream(), Digests.defaultDigest());"	>6-2+3>13-2+3>13-2+3>14-8+7>10-4>28;
"DigestOutputStream digout = new DigestOutputStream(new NoopOutputStream(), Digests.defaultDigest());"	"DigestOutputStream digout = null;"	>29-71+4;
"DigestOutputStream digout = null;"	"Digests.digest(opt.getHashAlgorithm()));"	>6-27+34;
"Digests.digest(opt.getHashAlgorithm()));"	"EditGraph g = new EditGraph((orig.length + 1) * (target.length + 1));"	-35+28>1+15>1+21>3;
"EditGraph g = new EditGraph((orig.length + 1) * (target.length + 1));"	"File orig = File.createTempFile(orig, .tmp);"	-67+42>2;
"File orig = File.createTempFile(orig, .tmp);"	"File orig = File.createTempFile(target.getName(), .orig);"	>32+19>4-6>2;
"File orig = File.createTempFile(target.getName(), .orig);"	"File orig = new File(args[2]);"	>12-41+5>1+5>1+4>2;
"File orig = new File(args[2]);"	"File target = File.createTempFile(orig.getName(), .target);"	>5-23+52>2;
"File target = File.createTempFile(orig.getName(), .target);"	"File target = File.createTempFile(target, .tmp);"	>34-17>6+6>2;
"File target = File.createTempFile(target, .tmp);"	"File target = new File(args[3]);"	>14-32+16>2;
"File target = new File(args[3]);"	"File tmp = new File(target.getParentFile(), target.getName() + .patching);"	>5-5>1+2>12-7+52>2;
"File tmp = new File(target.getParentFile(), target.getName() + .patching);"	"FileDiff fd = FileDiffs.mdiff(orig, target);"	-36>4-2+30>8-22>2;
"FileDiff fd = FileDiffs.mdiff(orig, target);"	"FileDiff fd = new FileDiff(File.createTempFile(filediff, .diff));"	>13+4>9-18+8>1+1>1+26>2;
"FileDiff fd = new FileDiff(File.createTempFile(filediff, .diff));"	"FileDiff fd = new FileDiff(File.createTempFile(filediff, .tmp));"	>58-4+3>3;
"FileDiff fd = new FileDiff(File.createTempFile(filediff, .tmp));"	"FileDiff fd = new FileDiff(File.createTempFile(orig.getName(), .diff));"	>47-14+21>3;
"FileDiff fd = new FileDiff(File.createTempFile(orig.getName(), .diff));"	"FileDiff fd = new FileDiff(File.createTempFile(orig.getName(), .udiff));"	>64+1>7;
"FileDiff fd = new FileDiff(File.createTempFile(orig.getName(), .udiff));"	"FileDiff md = new FileDiff(File.createTempFile(FileDiff, .tmp));"	>9-1+1>37-19+5>3+6>3;
"FileDiff md = new FileDiff(File.createTempFile(FileDiff, .tmp));"	"FileDiff tmp = new FileDiff(File.createTempFile(filediff, .tmp));"	>9-2+3>36-5+5>12;
"FileDiff tmp = new FileDiff(File.createTempFile(filediff, .tmp));"	"FileDiff tmp = new FileDiff(getParentFile(), getName() + .tmp);"	>28-34+25>1+7>2;
"FileDiff tmp = new FileDiff(getParentFile(), getName() + .tmp);"	"FileDiff ud = new FileDiff(File.createTempFile(udiff, .udiff));"	>9-3+2>16-9>4-16>1+4>1+3>2+19>2;
"FileDiff ud = new FileDiff(File.createTempFile(udiff, .udiff));"	"FileDiff ud = new FileDiff(File.createTempFile(undo, .undo));"	>48-12+10>3;
"FileDiff ud = new FileDiff(File.createTempFile(undo, .undo));"	"FileInputStream in = new FileInputStream(this);"	>4-7+14>11-37+16>2;
"FileInputStream in = new FileInputStream(this);"	"FileInputStream oin = new FileInputStream(orig);"	>16+1>25-4+4>2;
"FileInputStream oin = new FileInputStream(orig);"	"FileInputStream tin = new FileInputStream(target);"	>16-1+1>25-3+3>1+2>2;
"FileInputStream tin = new FileInputStream(target);"	"FileOutputStream bdo = new FileOutputStream(bd);"	>4-2+3>10-3+3>11-2+3>10-6+2>2;
"FileOutputStream bdo = new FileOutputStream(bd);"	"FileOutputStream out = new FileOutputStream(target);"	>17-2>1+2>24-2+6>2;
"FileOutputStream out = new FileOutputStream(target);"	"FileOutputStream out = new FileOutputStream(this);"	>44-5>1+3>2;
"FileOutputStream out = new FileOutputStream(this);"	"Graph graph = new InertialGraph(200 * 200);"	-48+41>2;
"Graph graph = new InertialGraph(200 * 200);"	"Hash mismatch on original, expected"	-43+35;
"Hash mismatch on original, expected"	"Hash mismatch on target, expected"	>17-8+6>10;
"Hash mismatch on target, expected"	"Header header = header();"	-31+17>1+1>1+5;
"Header header = header();"	"Header header = new Header();"	>16-1+5>8;
"Header header = new Header();"	"Header header = readHeader(in, serial);"	>15-4>1+4>7+10>2;
"Header header = readHeader(in, serial);"	"Incompatible serialization; expected"	-38+26>1+9;
"Incompatible serialization; expected"	"InertialGraph ig = new InertialGraph((orig.length + 1) * (target.length + 1));"	-36+78;
"InertialGraph ig = new InertialGraph((orig.length + 1) * (target.length + 1));"	"InputStream in = new FileInputStream(this);"	-76+41>2;
"InputStream in = new FileInputStream(this);"	"InputStream in = new RandomInputStream(orig);"	>21-4+6>12-4+4>2;
"InputStream in = new RandomInputStream(orig);"	"InputStream oin = new FileInputStream(orig);"	>12+1>9-6+4>18;
"InputStream oin = new FileInputStream(orig);"	"InputStream random = new FileInputStream(/dev/urandom);"	>12-2+2>1+3>23-4+12>2;
"InputStream random = new FileInputStream(/dev/urandom);"	"InputStream tin = new FileInputStream(target);"	>12-6+3>23-12+6>2;
"InputStream tin = new FileInputStream(target);"	"Iterator<String> si = gatherStrings().iterator();"	-38+10>1+12>1+6>1+2>1+6>1+2>1+3>2;
"Iterator<String> si = gatherStrings().iterator();"	"List<Op> ops = new ArrayList<Op>();"	-43+3>1+5>1+11>1+10>3;
"List<Op> ops = new ArrayList<Op>();"	"List<Op> ops = rlist();"	>15-17+5>3;
"List<Op> ops = rlist();"	"List<Op> rdiff = q.drainTo(new ArrayList<Op>());"	>9-8+28>3+4>1+1>2;
"List<Op> rdiff = q.drainTo(new ArrayList<Op>());"	"List<Op> ret = new ArrayList<Op>();"	>10-17+5>18-1>2;
"List<Op> ret = new ArrayList<Op>();"	"MappedByteBuffer obuf = oin.getChannel().map(MapMode.READ_ONLY, 0, orig.length());"	-32+78>1+1>2;
"MappedByteBuffer obuf = oin.getChannel().map(MapMode.READ_ONLY, 0, orig.length());"	"MappedByteBuffer tbuf = oin.getChannel().map(MapMode.READ_ONLY, 0, target.length());"	>17-1+1>49-3+3>1+2>11;
"MappedByteBuffer tbuf = oin.getChannel().map(MapMode.READ_ONLY, 0, target.length());"	"MemoryDiff emd = new MemoryDiff(g.queue());"	-80+39>4;
"MemoryDiff emd = new MemoryDiff(g.queue());"	"MemoryDiff imd = new MemoryDiff(new OneWayOpQueue(ig.queue()));"	>11-1+1>20+19>8+1>3;
"MemoryDiff imd = new MemoryDiff(new OneWayOpQueue(ig.queue()));"	"MemoryDiff md = Serials.deserialize(DefaultSerialization.getInstance(), MemoryDiff.class, diff);"	>11-9+60>11-30+12>2;
"MemoryDiff md = Serials.deserialize(DefaultSerialization.getInstance(), MemoryDiff.class, diff);"	"MemoryDiff md = new MemoryDiff();"	>16-55+3>8-12>3+1>2;
"MemoryDiff md = new MemoryDiff();"	"MemoryDiff md = new MemoryDiff(diff);"	>31+4>2;
"MemoryDiff md = new MemoryDiff(diff);"	"MemoryDiff md = new MemoryDiff(q);"	>31-4+1>2;
"MemoryDiff md = new MemoryDiff(q);"	"MemoryDiff rwd = new MemoryDiff(q);"	>11-1+2>22;
"MemoryDiff rwd = new MemoryDiff(q);"	"Op delete = filtering.get(0);"	-33+27>2;
"Op delete = filtering.get(0);"	"Op delete = filtering.get(1);"	>26-1+1>2;
"Op delete = filtering.get(1);"	"Op delete = null;"	>12-17+5;
"Op delete = null;"	"Op delete;"	>9-7>1;
"Op delete;"	"Op e = chain.peekFirst().poll();"	>3-7+29;
"Op e = chain.peekFirst().poll();"	"Op e = filtering.get(0);"	>7-21+2>1+10>1+1>2;
"Op e = filtering.get(0);"	"Op e = filtering.remove(0);"	>17-3+6>4;
"Op e = filtering.remove(0);"	"Op e = header.serial.readObject(self, Op.class);"	>7-18+39>2;
"Op e = header.serial.readObject(self, Op.class);"	"Op e = input.poll();"	>7-39+11>2;
"Op e = input.poll();"	"Op e = null;"	>7-13+5;
"Op e = null;"	"Op e = ops.next();"	>7-5+11;
"Op e = ops.next();"	"Op e = pipe.poll();"	>7-8+9>3;
"Op e = pipe.poll();"	"Op e = prepared.pollFirst();"	>8-1+2>1+2>1+1>5+5>3;
"Op e = prepared.pollFirst();"	"Op e = q.poll();"	>7-18+6>3;
"Op e = q.poll();"	"Op e = serial.readObject(in, Op.class);"	>7-5+5>1+11>1+12>2;
"Op e = serial.readObject(in, Op.class);"	"Op e = serial.readObject(self, Op.class);"	>25-2+4>12;
"Op e = serial.readObject(self, Op.class);"	"Op e = source.poll();"	>7-31>1+11>2;
"Op e = source.poll();"	"Op e1 = filtering.remove(0);"	>4-13+6>1+13>1+1>2;
"Op e1 = filtering.remove(0);"	"Op e2 = filtering.remove(0);"	>4-1+1>23;
"Op e2 = filtering.remove(0);"	"Op e;"	>4-23>1;
"Op e;"	"Op insert = filtering.get(0);"	>3-2+26;
"Op insert = filtering.get(0);"	"Op insert = filtering.get(1);"	>26-1+1>2;
"Op insert = filtering.get(1);"	"Op insert = null;"	>12-17+5;
"Op insert = null;"	"Op insert;"	>9-7>1;
"Op insert;"	"Op n1 = filtering.remove(0);"	>3-7+25;
"Op n1 = filtering.remove(0);"	"Op n2 = filtering.remove(0);"	>4-1+1>23;
"Op n2 = filtering.remove(0);"	"Op op = new Op();"	>3-23+12>2;
"Op op = new Op();"	"Op u;"	>3-14+2;
"Op u;"	"OpQueue diff = Diffs.queue(orig.getBytes(), target.getBytes());"	-5+63;
"OpQueue diff = Diffs.queue(orig.getBytes(), target.getBytes());"	"OpQueue graphed = new ReplaceOpQueue(delete.getData(), insert.getData());"	>8-48+33>1+3>1+11>1+11>4;
"OpQueue graphed = new ReplaceOpQueue(delete.getData(), insert.getData());"	"OpQueue q = diff.queue();"	>8-63+15>2;
"OpQueue q = diff.queue();"	"OpQueue q = graph.queue();"	>12-4+5>9;
"OpQueue q = graph.queue();"	"OpQueue q = new BufferChunkingOpQueue(obuf, tbuf);"	>12-7+21>5+10>2;
"OpQueue q = new BufferChunkingOpQueue(obuf, tbuf);"	"OpQueue q = new ListOpQueue(ops);"	>16-14+4>9-9+2>2;
"OpQueue q = new ListOpQueue(ops);"	"OpQueue q = new ReplaceOpQueue(orig, target);"	>16-4+7>9-2+11>2;
"OpQueue q = new ReplaceOpQueue(orig, target);"	"OpQueue q = new ReplaceOpQueue(orig.getBytes(), target.getBytes());"	>35+11>8+11>2;
"OpQueue q = new ReplaceOpQueue(orig.getBytes(), target.getBytes());"	"OpQueue q = new StreamChunkingOpQueue("	>16-6+3>1+10>8-36;
"OpQueue q = new StreamChunkingOpQueue("	"OpQueue q = queue();"	>12-21+1>5+2;
"OpQueue q = queue();"	"OpQueue q = tmp.queue();"	>12+4>8;
"OpQueue q = tmp.queue();"	"OpQueue q;"	>9-14>1;
"OpQueue q;"	"OpQueue rq = new GraphOpQueue();"	>8-2+24;
"OpQueue rq = new GraphOpQueue();"	"Optional opt = bd.header().getOptional();"	-28+28>1+9>3;
"Optional opt = bd.header().getOptional();"	"Optional opt = header.getOptional();"	>15-3>6-2>15;
"Optional opt = header.getOptional();"	"Optional opt = new Optional();"	>15-10+4>11;
"Optional opt = new Optional();"	"Optional opt = null;"	>16-14+4;
"Optional opt = null;"	"OutputStream out = new FileOutputStream(tmp);"	-20+45;
"OutputStream out = new FileOutputStream(tmp);"	"OutputStream out;"	>16-28>1;
"OutputStream out;"	"RandomInputStream oin = new RandomInputStream(orig);"	-3+8>11+18>2+12>1;
"RandomInputStream oin = new RandomInputStream(orig);"	"RandomInputStream tin = new RandomInputStream(target);"	>18-1+1>27-3+3>1+2>2;
"RandomInputStream tin = new RandomInputStream(target);"	"Set<String> strings = new TreeSet<String>();"	-48+14>1+2>1+13>1+3>1+6>2;
"Set<String> strings = new TreeSet<String>();"	"Stats stats = computeStats(tmp);"	-41+26>1+3>2;
"Stats stats = computeStats(tmp);"	"Stats stats = new Stats();"	>14-6+1>1+2>6-3>2;
"Stats stats = new Stats();"	"Streams.copy(digin, new NoopOutputStream());"	-18>1-2>1+4>1+33>1+1>2;
"Streams.copy(digin, new NoopOutputStream());"	"Streams.copy(din, bdo);"	>15-27+6>2;
"Streams.copy(din, bdo);"	"Streams.copy(in, out);"	>13-1>4-2>1+2>2;
"Streams.copy(in, out);"	"Streams.copy(in, out, length);"	>20+8>2;
"Streams.copy(in, out, length);"	"Streams.copy(orig, target, run);"	>13-15+17>2;
"Streams.copy(orig, target, run);"	"Streams.copy(random, out = new FileOutputStream(orig), SIZE); out.close();"	>13-14>1+8>1+4>1+44>2;
"Streams.copy(random, out = new FileOutputStream(orig), SIZE); out.close();"	"Streams.copy(random, out = new FileOutputStream(target), SIZE); out.close();"	>48-3+3>1+2>22;
"Streams.copy(random, out = new FileOutputStream(target), SIZE); out.close();"	"String next = si.next();"	-41>3-27+11>1+3>1+2>3;
"String next = si.next();"	"String orig = 12345678901234567890abcdefghjiklmnopqrstuvwxyz;"	>7-17+54;
"String orig = 12345678901234567890abcdefghjiklmnopqrstuvwxyz;"	"String orig = Hello world!;"	>14-47+13;
"String orig = Hello world!;"	"String prev = si.next();"	>7-20+17;
"String prev = si.next();"	"String target = Hellish cruel world!;"	>7-17+30;
"String target = Hellish cruel world!;"	"String target = abcdefghjiklmnopqrstuvwxyz12345678901234567890;"	>16-21+47;
"String target = abcdefghjiklmnopqrstuvwxyz12345678901234567890;"	"StringBuilder sb = new StringBuilder();"	>6-57+33;
"StringBuilder sb = new StringBuilder();"	"System.arraycopy(ddata, dpos, data, 0, data.length);"	-34+4>1+4>1+6>1+33>2;
"System.arraycopy(ddata, dpos, data, 0, data.length);"	"System.arraycopy(e2.getData(), 0, data, e1.getData().length, e2.getData().length);"	>17-14+7>3+2>9+35>9;
"System.arraycopy(e2.getData(), 0, data, e1.getData().length, e2.getData().length);"	"System.arraycopy(idata, ipos, data, 0, data.length);"	>17-12+17>9-35>9;
"System.arraycopy(idata, ipos, data, 0, data.length);"	"System.arraycopy(orig, 0, xval, 1, orig.length);"	>17-25+11>1+10>9;
"System.arraycopy(orig, 0, xval, 1, orig.length);"	"System.arraycopy(target, 0, yval, 1, target.length);"	>17-10+12>8-3+3>1+2>9;
"System.arraycopy(target, 0, yval, 1, target.length);"	"System.out.print(\ + next + \\t);"	>7-43+24>2;
"System.out.print(\ + next + \\t);"	"System.out.print(\ + prev + \\t);"	>21-4+4>8;
"System.out.print(\ + prev + \\t);"	"System.out.println();"	>15-15>1+3>2;
"System.out.println();"	"System.out.println(Command and options required:);"	>19+29>2;
"System.out.println(Command and options required:);"	"System.out.println(Computed FileDiff for + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms);"	>22-26+108>2;
"System.out.println(Computed FileDiff for + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms);"	"System.out.println(Computed parallel graph diff for + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms);"	>28-5+16>99;
"System.out.println(Computed parallel graph diff for + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms);"	"System.out.println(Creating random input files);"	>20-118+7>1+5>1+11>3;
"System.out.println(Creating random input files);"	"System.out.println(Diffed + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms.);"	>19-25+73>1+21>1+1>2;
"System.out.println(Diffed + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms.);"	"System.out.println(Mapping input to RAM...);"	>19-96+22>3;
"System.out.println(Mapping input to RAM...);"	"System.out.println(Starting diff);"	>19-23+13>2;
"System.out.println(Starting diff);"	"System.out.println(\tApply a difference from DIFF_FILE to ORIG_FILE to generate TARGET_FILE);"	>19-8+9>5+58>2;
"System.out.println(\tApply a difference from DIFF_FILE to ORIG_FILE to generate TARGET_FILE);"	"System.out.println(\tCompute the difference between ORIG_FILE and TARGET_FILE and store in DIFF_FILE);"	>21-7+11>12-17+7>11-11+3>7+23>7;
"System.out.println(\tCompute the difference between ORIG_FILE and TARGET_FILE and store in DIFF_FILE);"	"System.out.println(\tDisplay statistics and optional data from DIFF_FILE);"	>21-66+22>1+3>1+1>1+12>12;
"System.out.println(\tDisplay statistics and optional data from DIFF_FILE);"	"System.out.println(diff DIFF_FILE ORIG_FILE TARGET_FILE);"	>19-43+4>5+22>7;
"System.out.println(diff DIFF_FILE ORIG_FILE TARGET_FILE);"	"System.out.println(diff: + diff.length);"	>23-32+15>2;
"System.out.println(diff: + diff.length);"	"System.out.println(edit diff length: + semd.length);"	>19-7+4>5+15>9;
"System.out.println(edit diff length: + semd.length);"	"System.out.println(edit-Diffed + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms.);"	>23-27+98>2;
"System.out.println(edit-Diffed + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms.);"	"System.out.println(emd);"	>20-101+2>2;
"System.out.println(emd);"	"System.out.println(graph.queue().consummerize());"	>19-3+28>2;
"System.out.println(graph.queue().consummerize());"	"System.out.println(header + data);"	>19-28+13>2;
"System.out.println(header + data);"	"System.out.println(imd);"	>19-13+3>2;
"System.out.println(imd);"	"System.out.println(inertial diff length: + simd.length);"	>19+25>3+7>2;
"System.out.println(inertial diff length: + simd.length);"	"System.out.println(inertial-Diffed + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms.);"	>27-27+98>2;
"System.out.println(inertial-Diffed + SIZE + bytes in + TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) + ms.);"	"System.out.println(info DIFF_FILE);"	>21-104+12>2;
"System.out.println(info DIFF_FILE);"	"System.out.println(md + : + Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, md).length);"	>19-14+91>2;
"System.out.println(md + : + Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, md).length);"	"System.out.println(md);"	>21-89>2;
"System.out.println(md);"	"System.out.println(new String(result));"	>19-2+18>2;
"System.out.println(new String(result));"	"System.out.println(patch DIFF_FILE ORIG_FILE TARGET_FILE);"	>19-18+37>2;
"System.out.println(patch DIFF_FILE ORIG_FILE TARGET_FILE);"	"System.out.println(rdiff);"	>19-37+5>2;
"System.out.println(rdiff);"	"System.out.println(result: + new String(result));"	>20-4+27>2;
"System.out.println(result: + new String(result));"	"System.out.println(rwd + : + Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, rwd).length);"	>18-21>2+10>1+6>1+13>1+7>1+14>1+29>1+7>2;
"System.out.println(rwd + : + Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, rwd).length);"	"System.out.println(target: + new String(target));"	>19-93+28>2;
"System.out.println(target: + new String(target));"	"System.out.println(udiff: + udiff.length);"	>19-28+21>2;
"System.out.println(udiff: + udiff.length);"	"Thread t = new Thread(r, ParallelGraphOpQueue.this.toString());"	-38+46>2+13>2;
"Thread t = new Thread(r, ParallelGraphOpQueue.this.toString());"	"Thread t = new Thread(r, PumpingOpQueue.this.toString());"	>26-12+6>25;
"Thread t = new Thread(r, PumpingOpQueue.this.toString());"	"Thread.currentThread().interrupt();"	>6-9+8>6-32>2+11>2;
"Thread.currentThread().interrupt();"	"a.apply(in, out);"	-32+7>1+7>2;
"a.apply(in, out);"	"accum |= (b & 0x7f) << (shift);"	-13+3>1+24>3;
"accum |= (b & 0x7f) << (shift);"	"apply(oin, out);"	-28+13>3;
"apply(oin, out);"	"b[i] = buf.get();"	-12+8>1+4>1+1>2;
"b[i] = buf.get();"	"b[off + i] = buf.get();"	>2+6>15;
"b[off + i] = buf.get();"	"bd.delete();"	-18+6>2+1>3;
"bd.delete();"	"bd.deleteOnExit();"	>9+6>3;
"bd.deleteOnExit();"	"bdo.close();"	-15+9>3;
"bdo.close();"	"beforeDelete = new byte[capacity];"	-12+34;
"beforeDelete = new byte[capacity];"	"beforeDelete[pos] = Op.DELETE;"	>12-22+18;
"beforeDelete[pos] = Op.DELETE;"	"beforeDelete[pos] = Op.INSERT;"	>23-7+7;
"beforeDelete[pos] = Op.INSERT;"	"beforeDelete[pos] = Op.NEXT;"	>23-5+3>2;
"beforeDelete[pos] = Op.NEXT;"	"beforeInsert = new byte[capacity];"	>6-22+28;
"beforeInsert = new byte[capacity];"	"beforeInsert[pos] = Op.DELETE;"	>12-22+18;
"beforeInsert[pos] = Op.DELETE;"	"beforeInsert[pos] = Op.INSERT;"	>23-7+7;
"beforeInsert[pos] = Op.INSERT;"	"beforeInsert[pos] = Op.NEXT;"	>23-5+3>2;
"beforeInsert[pos] = Op.NEXT;"	"beforeNext = new byte[capacity];"	>6-22+26;
"beforeNext = new byte[capacity];"	"beforeNext[pos] = Op.DELETE;"	>10-22+18;
"beforeNext[pos] = Op.DELETE;"	"beforeNext[pos] = Op.INSERT;"	>21-7+7;
"beforeNext[pos] = Op.INSERT;"	"beforeNext[pos] = Op.NEXT;"	>21-5+3>2;
"beforeNext[pos] = Op.NEXT;"	"beforeNext[pos] = Op.STOP;"	>21-5+5;
"beforeNext[pos] = Op.STOP;"	"boolean flushed = false;"	-26+24;
"boolean flushed = false;"	"boolean neg = (v & 1) != 0;"	>8-16+19;
"boolean neg = (v & 1) != 0;"	"boolean pulled = false;"	>8-19+15;
"boolean pulled = false;"	"break;"	-23+6;
"break;"	"buf = new byte[len];"	-6+20;
"buf = new byte[len];"	"buf.compact();"	>3-17+11;
"buf.compact();"	"buf.get();"	>4-6+2>4;
"buf.get();"	"buf.get(b);"	>8+1>2;
"buf.get(b);"	"buf.get(b, off, len);"	>9+10>2;
"buf.get(b, off, len);"	"buf.position((int) pos);"	>4-14+11>1+6>2;
"buf.position((int) pos);"	"buf.position(buf.limit() - r);"	>13-9+15>2;
"buf.position(buf.limit() - r);"	"buf.position(buf.position() + (int) n);"	>17-11+20>2;
"buf.position(buf.position() + (int) n);"	"buf.position(buf.position() + n);"	>29-6>4;
"buf.position(buf.position() + n);"	"buf.put((byte) r);"	-13>5-13+11>2;
"buf.put((byte) r);"	"buf.put(b, 0, r);"	>8-6+5>4;
"buf.put(b, 0, r);"	"buf.put(b, off, r);"	>11-1+3>5;
"buf.put(b, off, r);"	"buf.reset();"	>4-12>1+5>2;
"buf.reset();"	"buf.write(xval[pos % xval.length]);"	>4-4+3>1+1>1+23>2;
"buf.write(xval[pos % xval.length]);"	"buf.write(yval[pos / xval.length]);"	>10-1+1>8-1+1>15;
"buf.write(yval[pos / xval.length]);"	"byte fop = flags[pos];"	-35+22;
"byte fop = flags[pos];"	"byte op = Op.NEXT;"	>5-17+13;
"byte op = Op.NEXT;"	"byte op = Op.STOP;"	>13-5+5;
"byte op = Op.STOP;"	"byte[] actualPostHash = digout.getMessageDigest().digest();"	>4-14+55;
"byte[] actualPostHash = digout.getMessageDigest().digest();"	"byte[] actualPreHash = Digests.digest(orig, Digests.digest(opt.getHashAlgorithm()));"	>14-3+2>7-17>6-2+22>8+23>2;
"byte[] actualPreHash = Digests.digest(orig, Digests.digest(opt.getHashAlgorithm()));"	"byte[] actualPreHash = digin.getMessageDigest().digest();"	>22-21>1+16>6-1+2>8-23>2;
"byte[] actualPreHash = digin.getMessageDigest().digest();"	"byte[] b = new byte[(int) -n];"	>7-50+23;
"byte[] b = new byte[(int) -n];"	"byte[] buf = new byte[8192];"	>8+2>12-8+4>2;
"byte[] buf = new byte[8192];"	"byte[] buf = new byte[Math.min(chunk, in.remaining())];"	>22-4+31>2;
"byte[] buf = new byte[Math.min(chunk, in.remaining())];"	"byte[] buf = new byte[chunk];"	>22-9>5-17>2;
"byte[] buf = new byte[chunk];"	"byte[] buf = new byte[len];"	>22-5+3>2;
"byte[] buf = new byte[len];"	"byte[] data = new byte[Math.min(chunk, ddata.length - dpos)];"	>7-3+4>12+22>3+11>2;
"byte[] data = new byte[Math.min(chunk, ddata.length - dpos)];"	"byte[] data = new byte[Math.min(chunk, idata.length - ipos)];"	>39-1+1>14-1+1>6;
"byte[] data = new byte[Math.min(chunk, idata.length - ipos)];"	"byte[] data = null;"	>15-46+4;
"byte[] data = null;"	"byte[] ddata = delete.getData();"	>7+1>7-5+17;
"byte[] ddata = delete.getData();"	"byte[] diff = ByteArrayDiffs.diff(orig.getBytes(), target.getBytes());"	>8-18+13>1+29>2+13>1+1>2;
"byte[] diff = ByteArrayDiffs.diff(orig.getBytes(), target.getBytes());"	"byte[] expectedPostHash = null;"	>7-63+24;
"byte[] expectedPostHash = null;"	"byte[] expectedPreHash = null;"	>16-3+2>12;
"byte[] expectedPreHash = null;"	"byte[] idata = insert.getData();"	>7-23+25;
"byte[] idata = insert.getData();"	"byte[] magic = new byte[MAGIC.length];"	>7-25+31;
"byte[] magic = new byte[MAGIC.length];"	"byte[] obj = new byte[size];"	>7-5+3>12-12+4>2;
"byte[] obj = new byte[size];"	"byte[] obuf = readChunk(orig);"	>9-19+21;
"byte[] obuf = readChunk(orig);"	"byte[] orig = Hello world!.getBytes();"	>7-17>4+25>2;
"byte[] orig = Hello world!.getBytes();"	"byte[] postHash = Digests.digest(target, Digests.defaultDigest());"	>7-25+48>1+3>2+1>1+1>2;
"byte[] postHash = Digests.digest(target, Digests.defaultDigest());"	"byte[] preHash = Digests.digest(orig, Digests.defaultDigest());"	>8-3+2>22-6+4>27;
"byte[] preHash = Digests.digest(orig, Digests.defaultDigest());"	"byte[] rbuf = result.toByteArray();"	>7-54+26>2;
"byte[] rbuf = result.toByteArray();"	"byte[] rdata = buf.toByteArray();"	>8+7>3-9>15;
"byte[] rdata = buf.toByteArray();"	"byte[] result = Diffs.apply(fd.queue(), orig);"	>7-20>1+14>1+3>1+9>1+7>2;
"byte[] result = Diffs.apply(fd.queue(), orig);"	"byte[] result = Diffs.apply(imd, orig);"	>28-10+3>8;
"byte[] result = Diffs.apply(imd, orig);"	"byte[] result = Diffs.apply(md, orig.getBytes());"	>28-1>8+11>2;
"byte[] result = Diffs.apply(md, orig.getBytes());"	"byte[] semd = Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, emd);"	>7-35+41>1+5>1+3>1+5>2+23>2;
"byte[] semd = Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, emd);"	"byte[] simd = Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, imd);"	>8-1+1>77-1+1>4;
"byte[] simd = Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, imd);"	"byte[] target = Hellish cruel world!.getBytes();"	>7-81+27>1+11>2;
"byte[] target = Hellish cruel world!.getBytes();"	"byte[] tbuf = readChunk(target);"	>7+17>6-33>2;
"byte[] tbuf = readChunk(target);"	"byte[] tbuf = target.toByteArray();"	>14-10>6+13>2;
"byte[] tbuf = target.toByteArray();"	"byte[] udiff = ByteArrayDiffs.udiff(orig.getBytes(), target.getBytes());"	>7-16+8>9+44>1+1>2;
"byte[] udiff = ByteArrayDiffs.udiff(orig.getBytes(), target.getBytes());"	"c.add(e);"	-70+7>2;
"c.add(e);"	"case 0:"	-9+7;
"case 0:"	"case 247:"	>5-2+4;
"case 247:"	"case 248:"	>7-2+2;
"case 248:"	"case 249:"	>7-2+2;
"case 249:"	"case 250:"	>6-3+3;
"case 250:"	"case 251:"	>7-2+2;
"case 251:"	"case 252:"	>7-2+2;
"case 252:"	"case 253:"	>7-2+2;
"case 253:"	"case 254:"	>7-2+2;
"case 254:"	"case 255:"	>7-2+2;
"case 255:"	"case DELETE:"	>5-4+7;
"case DELETE:"	"case DELETE: return - + run;"	>12+16;
"case DELETE: return - + run;"	"case INSERT:"	>5-23+7;
"case INSERT:"	"case INSERT: return + + run;"	>12+16;
"case INSERT: return + + run;"	"case NEXT:"	>5-23+5;
"case NEXT:"	"case NEXT: return > + run;"	>10+16;
"case NEXT: return > + run;"	"case Op.DELETE:"	>5-21+10;
"case Op.DELETE:"	"case Op.INSERT:"	>8-7+7;
"case Op.INSERT:"	"case Op.NEXT:"	>8-5+3>2;
"case Op.NEXT:"	"case STOP: return ;;"	>5-6+1>1+2>1+10;
"case STOP: return ;;"	"chain = (ChainOpQueue) super.source;"	-20+36;
"chain = (ChainOpQueue) super.source;"	"chain.offer(e);"	>5-31+10;
"chain.offer(e);"	"chain.offer(new FutureOpQueue(f));"	>12+16>1+3>2;
"chain.offer(new FutureOpQueue(f));"	"chain.offer(new OpQueue());"	>16-6>8-1>3;
"chain.offer(new OpQueue());"	"chain.offerLast(new OpQueue());"	>11+4>16;
"chain.offerLast(new OpQueue());"	"chain.pollFirst();"	>6-23+10>2;
"chain.pollFirst();"	"close();"	-15+5>3;
"close();"	"closed = false;"	>5-3+10;
"closed = false;"	"closed = true;"	>9-4+3>2;
"closed = true;"	"computeDeleteCost(pos);"	-14+23;
"computeDeleteCost(pos);"	"computeInsertCost(pos);"	>7-5+3>1+2>10;
"computeInsertCost(pos);"	"computeNextCost(pos);"	>7-5+3>11;
"computeNextCost(pos);"	"continue;"	-21+9;
"continue;"	"copy(out, e.getRun(), opos);"	-9+28;
"copy(out, e.getRun(), opos);"	"copy(p, len);"	>5-21+6>2;
"copy(p, len);"	"cost = Short.MAX_VALUE;"	-13+23;
"cost = Short.MAX_VALUE;"	"cost = enterDeleteCost[pos] + 0; // appending a delete is free"	>7-15+24>1+30;
"cost = enterDeleteCost[pos] + 0; // appending a delete is free"	"cost = enterDeleteCost[pos] + 2;"	>30-32+2;
"cost = enterDeleteCost[pos] + 2;"	"cost = enterDeleteCost[pos] + 3;"	>30-2+2;
"cost = enterDeleteCost[pos] + 3;"	"cost = enterDeleteCost[pos] + TRANSITION_COSTS[Op.DELETE][prev];"	>30-2+34;
"cost = enterDeleteCost[pos] + TRANSITION_COSTS[Op.DELETE][prev];"	"cost = enterInsertCost[pos] + 1; // appending an insert costs 1"	>12-5+3>1+2>12-33+1>1+31;
"cost = enterInsertCost[pos] + 1; // appending an insert costs 1"	"cost = enterInsertCost[pos] + 2;"	>30-33+2;
"cost = enterInsertCost[pos] + 2;"	"cost = enterInsertCost[pos] + 3;"	>30-2+2;
"cost = enterInsertCost[pos] + 3;"	"cost = enterInsertCost[pos] + TRANSITION_COSTS[Op.INSERT][prev];"	>30-2+34;
"cost = enterInsertCost[pos] + TRANSITION_COSTS[Op.INSERT][prev];"	"cost = enterNextCost[pos] + 0; // appending a next is free"	>10-5>2+3>13-33+1>1+28;
"cost = enterNextCost[pos] + 0; // appending a next is free"	"cost = enterNextCost[pos] + 3;"	>28-30+2;
"cost = enterNextCost[pos] + 3;"	"count += r;"	-30+11;
"count += r;"	"data = Arrays.copyOf(e1.getData(), e1.getData().length + e2.getData().length);"	-11+78;
"data = Arrays.copyOf(e1.getData(), e1.getData().length + e2.getData().length);"	"data = new byte[rdata.length];"	>7-71+23;
"data = new byte[rdata.length];"	"data = serial.readObject(in, byte[].class);"	>7-23+36;
"data = serial.readObject(in, byte[].class);"	"data(out, e.getData());"	>4-37+17>2;
"data(out, e.getData());"	"data[data.length - i - 1] = rdata[i];"	>4-19+33;
"data[data.length - i - 1] = rdata[i];"	"default:"	-37+8;
"default:"	"delete = filtering.get(0);"	-8+26;
"delete = filtering.get(0);"	"delete = filtering.get(1);"	>23-1+1>2;
"delete = filtering.get(1);"	"delete = filtering.remove(0);"	>19-5+8>2;
"delete = filtering.remove(0);"	"deleteCount = serial.readObject(in, Long.class);"	>6-21+40>2;
"deleteCount = serial.readObject(in, Long.class);"	"deletes.put(pos, e.getData());"	>6-38>1+7>1+13>2;
"deletes.put(pos, e.getData());"	"deletes.remove(deletes.firstKey());"	>8-18+23>4;
"deletes.remove(deletes.firstKey());"	"deletes.subMap(Long.MIN_VALUE, pos - lookbehind).clear();"	-15>8-8+6>1+32>1+7>2;
"deletes.subMap(Long.MIN_VALUE, pos - lookbehind).clear();"	"diff = new GraphOpQueue(diff, 1024);"	-53+12>1+10>1+10>2;
"diff = new GraphOpQueue(diff, 1024);"	"diff.apply(digin, digout);"	-24>4-6+20>2;
"diff.apply(digin, digout);"	"diff.apply(orig, target);"	>11-12+11>3;
"diff.apply(orig, target);"	"diff.diff(orig, target);"	>5-5+4>15;
"diff.diff(orig, target);"	"diff.store(this);"	>5-15+4>1+1>1+3>2;
"diff.store(this);"	"digin.close();"	-13+3>1+5>1+2>2;
"digin.close();"	"digout = new DigestOutputStream(out, Digests.digest(opt.getHashAlgorithm()));"	>3-5+29>1+16>1+7>1+14>1+2>2;
"digout = new DigestOutputStream(out, Digests.digest(opt.getHashAlgorithm()));"	"din = new DataInputStream(pin);"	-6+3>8-7+1>1+3>10-43+3>2;
"din = new DataInputStream(pin);"	"din.readFully(b);"	>1-26>2+12>2;
"din.readFully(b);"	"din.readFully(b, off, len);"	>15+10>2;
"din.readFully(b, off, len);"	"dpos += data.length;"	-27+20;
"dpos += data.length;"	"dpos = en.getKey();"	>5-15+14;
"dpos = en.getKey();"	"drop(2);"	-16+4>1+1>2;
"drop(2);"	"e = new Op(Op.DELETE, 1, new byte[] {xval[pos % xval.length]});"	-6+61>2;
"e = new Op(Op.DELETE, 1, new byte[] {xval[pos % xval.length]});"	"e = new Op(Op.DELETE, e.getRun(), null);"	>22-39+16>2;
"e = new Op(Op.DELETE, e.getRun(), null);"	"e = new Op(Op.INSERT, 1, new byte[] {yval[pos / xval.length]});"	>14-22+37>1+1>1+7>2;
"e = new Op(Op.INSERT, 1, new byte[] {yval[pos / xval.length]});"	"e = new Op(Op.NEXT, 1, null);"	>14-47+13>2;
"e = new Op(Op.NEXT, 1, null);"	"e = pipe.take();"	>4-23+10>2;
"e = pipe.take();"	"e = prepared.pollFirst();"	>5-7+5>1+11>3;
"e = prepared.pollFirst();"	"e.apply(orig, target);"	-22+7>1+12>2;
"e.apply(orig, target);"	"e.serialize(serial, out);"	-18+13>1+8>3;
"e.serialize(serial, out);"	"else if(e.getOp() == Op.INSERT)"	-25+31;
"else if(e.getOp() == Op.INSERT)"	"else if(serial == SmallNumberSerialization.getInstance())"	>8-22+47>1+1;
"else if(serial == SmallNumberSerialization.getInstance())"	"else if(serial == null)"	>18-39+5;
"else if(serial == null)"	"enterDeleteCost = new short[capacity];"	-23+38;
"enterDeleteCost = new short[capacity];"	"enterDeleteCost[pos] = (x == 0) ? Short.MAX_VALUE : leaveDeleteCost[pos-1];"	>15-21+58>2;
"enterDeleteCost[pos] = (x == 0) ? Short.MAX_VALUE : leaveDeleteCost[pos-1];"	"enterInsertCost = new short[capacity];"	>5-68+31>2;
"enterInsertCost = new short[capacity];"	"enterInsertCost[pos] = (y == 0) ? Short.MAX_VALUE : leaveInsertCost[pos-xval.length];"	>14-20>1+9>1+58>2;
"enterInsertCost[pos] = (y == 0) ? Short.MAX_VALUE : leaveInsertCost[pos-xval.length];"	"enterNextCost = new short[capacity];"	>5-76+7>1+8>1+12>2;
"enterNextCost = new short[capacity];"	"enterNextCost[pos] = (!nextable[pos]) ? Short.MAX_VALUE : leaveNextCost[pos-1-xval.length];"	>13-21+76>2;
"enterNextCost[pos] = (!nextable[pos]) ? Short.MAX_VALUE : leaveNextCost[pos-1-xval.length];"	"eof(out);"	-91+9;
"eof(out);"	"expectedPostHash = opt.getPostHash();"	-6+29>1+5>2;
"expectedPostHash = opt.getPostHash();"	"expectedPreHash = opt.getPreHash();"	>9-3+2>15-3+2>7;
"expectedPreHash = opt.getPreHash();"	"ext.readFully(buf);"	-32+13>1+3>2;
"ext.readFully(buf);"	"ext.seek(oldpos);"	>4-13+11>2;
"ext.seek(oldpos);"	"ext.seek(p);"	>9-6+1>2;
"ext.seek(p);"	"fd.delete();"	-10+10>2;
"fd.delete();"	"fd.store(Diffs.improved(Diffs.queue(oin, tin)));"	>3-4+1>1+29>2+10>2;
"fd.store(Diffs.improved(Diffs.queue(oin, tin)));"	"fd.store(Diffs.improved(Diffs.queue(orig, target)));"	>37-7+11>4;
"fd.store(Diffs.improved(Diffs.queue(orig, target)));"	"fd.store(Diffs.improved(new StreamChunkingOpQueue(oin, tin)));"	>24-20+6>1+10>1+6>1+6>1+2>4;
"fd.store(Diffs.improved(new StreamChunkingOpQueue(oin, tin)));"	"fd.store(new OneWayOpQueue(Diffs.improved(Diffs.queue(oin, tin))));"	>7+18>17-21+7>13+1>4;
"fd.store(new OneWayOpQueue(Diffs.improved(Diffs.queue(oin, tin))));"	"fd.store(q);"	>9-56+1>2;
"fd.store(q);"	"field(Copies, stats.getNextCount());"	-10+34>2;
"field(Copies, stats.getNextCount());"	"field(Deletes, stats.getDeleteCount());"	>6-4+5>13-3+4>1+1>9;
"field(Deletes, stats.getDeleteCount());"	"field(Hash, opt.getHashAlgorithm());"	>6-28+23>1+2>4;
"field(Hash, opt.getHashAlgorithm());"	"field(Input Hash, Digests.pretty(opt.getPreHash()));"	>6+6>6+15>7+3>4-9>1+1>3;
"field(Input Hash, Digests.pretty(opt.getPreHash()));"	"field(Input Size, stats.getInputSize());"	>12-37+25>3;
"field(Input Size, stats.getInputSize());"	"field(Inserts, stats.getInsertCount());"	>8-7+1>1+3>13-6+1>1+7>4;
"field(Inserts, stats.getInsertCount());"	"field(Output Hash, Digests.pretty(opt.getPostHash()));"	>6-28+38>1+4>1+1>3;
"field(Output Hash, Digests.pretty(opt.getPostHash()));"	"field(Output Size, stats.getOutputSize());"	>13-38+26>3;
"field(Output Size, stats.getOutputSize());"	"field(Patch Size, diff.length());"	>6-27+2>1+3>3+9>1+4>4;
"field(Patch Size, diff.length());"	"field(Rewinds, stats.getRewindCount());"	>6-23+29>4;
"field(Rewinds, stats.getRewindCount());"	"filtering.add(0, new Op(Op.NEXT, insert.getData().length, null));"	-33+34>1+10>1+1>1+14>3;
"filtering.add(0, new Op(Op.NEXT, insert.getData().length, null));"	"filtering.add(0, new Op(Op.NEXT, n1.getRun() + n2.getRun(), null));"	>33-23+25>9;
"filtering.add(0, new Op(Op.NEXT, n1.getRun() + n2.getRun(), null));"	"filtering.add(0, new Op(e1.getOp(), e1.getRun() + e2.getRun(), data));"	>24-10+13>13-1+1>12-4+4>3;
"filtering.add(0, new Op(e1.getOp(), e1.getRun() + e2.getRun(), data));"	"filtering.add(e);"	>14-54+1>2;
"filtering.add(e);"	"filtering.remove(0);"	>10-4+5>1+2>2;
"filtering.remove(0);"	"filtering.remove(1);"	>17-1+1>2;
"filtering.remove(1);"	"final int CHUNK = 1024;"	-20+23;
"final int CHUNK = 1024;"	"final int SIZE = 1024 * 1024;"	>10-5+4>2+7>6;
"final int SIZE = 1024 * 1024;"	"final int SIZE = 2048 * 2048;"	>17-12+12;
"final int SIZE = 2048 * 2048;"	"final int SIZE = 50 * 1024 * 1024;"	>17-12+17;
"final int SIZE = 50 * 1024 * 1024;"	"flags = new byte[size];"	-34+23;
"flags = new byte[size];"	"flags |= FLAG_DEFAULT_SERIALIZATION;"	>6-17+30;
"flags |= FLAG_DEFAULT_SERIALIZATION;"	"flags |= FLAG_OPTIONAL_DATA;"	>14-22+14;
"flags |= FLAG_OPTIONAL_DATA;"	"flags |= FLAG_RANDOM_ACCESS;"	>14-14+14;
"flags |= FLAG_RANDOM_ACCESS;"	"flags |= FLAG_SMALL_NUMBER_SERIALIZATION;"	>14-14+27;
"flags |= FLAG_SMALL_NUMBER_SERIALIZATION;"	"flags |= FLAG_UNSPECIFIED_SERIALIZATION;"	>14-12+11>15;
"flags |= FLAG_UNSPECIFIED_SERIALIZATION;"	"flags[pos] = Op.DELETE;"	>5-35+18;
"flags[pos] = Op.DELETE;"	"flags[pos] = Op.INSERT;"	>16-7+7;
"flags[pos] = Op.INSERT;"	"flags[pos] = Op.NEXT;"	>16-5+3>2;
"flags[pos] = Op.NEXT;"	"flush();"	-21+8;
"flush();"	"flushed = true;"	>5-3+10;
"flushed = true;"	"for(File java : FileUtils.listFiles(new File(src), new String[]{java}, true)) {"	-15+79;
"for(File java : FileUtils.listFiles(new File(src), new String[]{java}, true)) {"	"for(Map.Entry<Long, byte[]> en : deletes.entrySet()) {"	>4-70+43>1+2>4;
"for(Map.Entry<Long, byte[]> en : deletes.entrySet()) {"	"for(Op e : ops)"	>4-50+11;
"for(Op e : ops)"	"for(Op e = poll(); e != null; e = poll())"	>9-5+30>1+1;
"for(Op e = poll(); e != null; e = poll())"	"for(Op e = q.poll(); e != null; e = q.poll())"	>11+2>23+2>7;
"for(Op e = q.poll(); e != null; e = q.poll())"	"for(Op e = q.poll(); e != null; e = q.poll()) {"	>45+2;
"for(Op e = q.poll(); e != null; e = q.poll()) {"	"for(Op e = rq.poll(); e != null; e = rq.poll())"	>11+1>25+1>9-2;
"for(Op e = rq.poll(); e != null; e = rq.poll())"	"for(Op e = serial.readObject(in, Op.class); e.getOp() != Op.STOP; e = serial.readObject(in, Op.class))"	>11-31+26>1+37>1+11>1+12>2;
"for(Op e = serial.readObject(in, Op.class); e.getOp() != Op.STOP; e = serial.readObject(in, Op.class))"	"for(Op e = source.poll(); e != null; e = source.poll())"	>12-52+23>6-29>1+11>2;
"for(Op e = source.poll(); e != null; e = source.poll())"	"for(Op e = source.poll(); e != null; e = source.poll()) {"	>55+2;
"for(Op e = source.poll(); e != null; e = source.poll()) {"	"for(OpQueue q : links)"	>6-51+16;
"for(OpQueue q : links)"	"for(Serializer s : serializers) {"	>4-16+25>2+2;
"for(Serializer s : serializers) {"	"for(String line = br.readLine(); line != null; line = br.readLine()) {"	>5-25+62>3;
"for(String line = br.readLine(); line != null; line = br.readLine()) {"	"for(byte b : digest) {"	>4-63+15>3;
"for(byte b : digest) {"	"for(int i = 0; i < SIZE; i++) {"	>4-14+2>1+21>3;
"for(int i = 0; i < SIZE; i++) {"	"for(int i = 0; i < b.length; i++) {"	>19-4+8>8;
"for(int i = 0; i < b.length; i++) {"	"for(int i = 0; i < len; i++) {"	>19-8+3>8;
"for(int i = 0; i < len; i++) {"	"for(int i = 0; i < rdata.length; i++) {"	>19+6>3+3>8;
"for(int i = 0; i < rdata.length; i++) {"	"for(int i = 0; i < serializers.size(); i++) {"	>19-12+18>8;
"for(int i = 0; i < serializers.size(); i++) {"	"for(int r = in.read(buf); r != -1; r = in.read(buf)) {"	>8-34+43>3;
"for(int r = in.read(buf); r != -1; r = in.read(buf)) {"	"for(int r = in.read(buf, 0, (int) Math.min(buf.length, length - count));"	>23-31+49;
"for(int r = in.read(buf, 0, (int) Math.min(buf.length, length - count));"	"for(int x = 0; x < xval.length; x++) {"	>8-46+10>1+5>6-10>1+7;
"for(int x = 0; x < xval.length; x++) {"	"for(int y = 0; y < yval.length; y++) {"	>8-12+12>12-1+1>5;
"for(int y = 0; y < yval.length; y++) {"	"g.compute(orig, target);"	-38+24;
"g.compute(orig, target);"	"graph.compute(delete.getData(), insert.getData());"	>1+4>9-6+12>2+8>1+2>2+3>1+3>2;
"graph.compute(delete.getData(), insert.getData());"	"graph.compute(prev.getBytes(), next.getBytes());"	>14-32+30>4;
"graph.compute(prev.getBytes(), next.getBytes());"	"graphed = new GraphOpQueue(graphed, graphs.get());"	>5-37+27>1+8>1+4>4;
"graphed = new GraphOpQueue(graphed, graphs.get());"	"graphed = new ListOpQueue(graphed);"	>14-5+4>15-14>2;
"graphed = new ListOpQueue(graphed);"	"hashAlgorithm = serial.readObject(in, String.class);"	-30+11>1+12>1+1>1+23>2;
"hashAlgorithm = serial.readObject(in, String.class);"	"header = header + ....................;"	-52+39;
"header = header + ....................;"	"header = header.substring(0, 20);"	>15-24+18;
"header = header.substring(0, 20);"	"header = readHeader(self, BadiffFileDiff.this.serial);"	>9-22+43>2;
"header = readHeader(self, BadiffFileDiff.this.serial);"	"header.flags = flags;"	>6-48+15;
"header.flags = flags;"	"header.magic = magic;"	>7-14+14;
"header.magic = magic;"	"header.optional = opt;"	>7-14+15;
"header.optional = opt;"	"header.serial = serial;"	>7-15+16;
"header.serial = serial;"	"header.stats = stats;"	>8-15+13;
"header.stats = stats;"	"header.version = version;"	>7-14+18;
"header.version = version;"	"help();"	-25+7;
"help();"	"if(!Arrays.equals(e.getData(), en.getValue()))"	-7+46;
"if(!Arrays.equals(e.getData(), en.getValue()))"	"if(!Arrays.equals(expectedPostHash, actualPostHash))"	>19-25+31>2;
"if(!Arrays.equals(expectedPostHash, actualPostHash))"	"if(!Arrays.equals(expectedPreHash, actualPreHash))"	>27-3+2>13-3+2>6;
"if(!Arrays.equals(expectedPreHash, actualPreHash))"	"if(!Arrays.equals(magic, MAGIC))"	>18-30+12>2;
"if(!Arrays.equals(magic, MAGIC))"	"if(!Arrays.equals(opt.getPreHash(), actualPreHash))"	>18-12+31>2;
"if(!Arrays.equals(opt.getPreHash(), actualPreHash))"	"if(!closed) {"	>4-46+6>1+2;
"if(!closed) {"	"if(!require(1))"	>4-9+11;
"if(!require(1))"	"if(!require(2))"	>12-1+1>2;
"if(!require(2))"	"if(!worker.isShutdown()) {"	>4-9+18>2+2;
"if(!worker.isShutdown()) {"	"if((b & 0x80) == 0)"	>3-23+16;
"if((b & 0x80) == 0)"	"if((e = chain.poll()) != null)"	>4-14+16>1+9;
"if((e = chain.poll()) != null)"	"if((flags & FLAG_DEFAULT_SERIALIZATION) != 0) {"	>4-24+1>1+38>1+2;
"if((flags & FLAG_DEFAULT_SERIALIZATION) != 0) {"	"if((flags & FLAG_OPTIONAL_DATA) != 0) {"	>17-17+2>4+7>9;
"if((flags & FLAG_OPTIONAL_DATA) != 0) {"	"if((flags & FLAG_SMALL_NUMBER_SERIALIZATION) != 0) {"	>17-12+21>1+4>9;
"if((flags & FLAG_SMALL_NUMBER_SERIALIZATION) != 0) {"	"if((flags & FLAG_UNSPECIFIED_SERIALIZATION) != 0) {"	>17-12+11>23;
"if((flags & FLAG_UNSPECIFIED_SERIALIZATION) != 0) {"	"if((header.flags & FLAG_RANDOM_ACCESS) != 0 && !(orig instanceof Random))"	>4+7>13-34+49;
"if((header.flags & FLAG_RANDOM_ACCESS) != 0 && !(orig instanceof Random))"	"if((op & 0x3) != op)"	>4-68+8>1+7;
"if((op & 0x3) != op)"	"if((orig.length + 1) * (target.length + 1) > capacity)"	>5-14+36>1+12;
"if((orig.length + 1) * (target.length + 1) > capacity)"	"if((val >>> 7) != 0)"	>4-49+9>1+6;
"if((val >>> 7) != 0)"	"if(Arrays.equals(delete.getData(), insert.getData())) {"	>3-16+49>1+2;
"if(Arrays.equals(delete.getData(), insert.getData())) {"	"if(Arrays.equals(insert.getData(), delete.getData())) {"	>17-5+3>1+2>12-5+4>1+1>14;
"if(Arrays.equals(insert.getData(), delete.getData())) {"	"if(args.length != 2) {"	>3-49+16>3;
"if(args.length != 2) {"	"if(args.length != 4) {"	>18-1+1>3;
"if(args.length != 4) {"	"if(args.length == 0) {"	>15-4+4>3;
"if(args.length == 0) {"	"if(buf.length < 65536) {"	>3-4+3>8-4+7>3;
"if(buf.length < 65536) {"	"if(buf.length <= 246) {"	>15-5+4>4;
"if(buf.length <= 246) {"	"if(buf.remaining() < r) {"	>7-13+15>3;
"if(buf.remaining() < r) {"	"if(buf.remaining() == 0) {"	>19-3+4>3;
"if(buf.remaining() == 0) {"	"if(capacity < 4)"	>3-23+13;
"if(capacity < 4)"	"if(chain.size() == 0)"	>4-11+10>1+6;
"if(chain.size() == 0)"	"if(closed)"	>4-17+6;
"if(closed)"	"if(closed) {"	>10+2;
"if(closed) {"	"if(count == length)"	>4-8+15;
"if(count == length)"	"if(diff.equals(args[0])) {"	>3-15+20>1+2;
"if(diff.equals(args[0])) {"	"if(digout != null) {"	>5-18+12>3;
"if(digout != null) {"	"if(dlen <= ilen) {"	>4-11>1+7>1+2>3;
"if(dlen <= ilen) {"	"if(dpos < ddata.length) {"	>4-8+12>3+3>3;
"if(dpos < ddata.length) {"	"if(dpos == -1) {"	>8-14+5>3;
"if(dpos == -1) {"	"if(e != null)"	>3-13+10;
"if(e != null)"	"if(e != null) {"	>13+2;
"if(e != null) {"	"if(e == null)"	>5-1+1>7-2;
"if(e == null)"	"if(e == null) {"	>13+2;
"if(e == null) {"	"if(e.getData() != null && e.getData().length >= minlength) {"	>4-2+12>6+35>3;
"if(e.getData() != null && e.getData().length >= minlength) {"	"if(e.getData().length >= minlength) {"	>3-23>34;
"if(e.getData().length >= minlength) {"	"if(e.getOp() != Op.STOP) {"	>8-26+15>3;
"if(e.getOp() != Op.STOP) {"	"if(e.getOp() == Op.DELETE)"	>13-13+13;
"if(e.getOp() == Op.DELETE)"	"if(e.getOp() == Op.NEXT) {"	>19-5+1>1+2>1+2;
"if(e.getOp() == Op.NEXT) {"	"if(e.getOp() == Op.STOP)"	>19-7+5;
"if(e.getOp() == Op.STOP)"	"if(e.getOp() == Op.STOP) {"	>24+2;
"if(e.getOp() == Op.STOP) {"	"if(e.getRun() < 0)"	>8-18+10;
"if(e.getRun() < 0)"	"if(e1.getData() != null && e2.getData() != null) {"	>4-13+43>1+2;
"if(e1.getData() != null && e2.getData() != null) {"	"if(enterDeleteCost[pos] + 2 < cost) { // costs 2 to switch from delete to next"	>4-42+6>1+23>3+41;
"if(enterDeleteCost[pos] + 2 < cost) { // costs 2 to switch from delete to next"	"if(enterDeleteCost[pos] + 3 < cost) { // costs 3 to switch from delete to insert"	>26-1+1>20-1+1>26-4+6;
"if(enterDeleteCost[pos] + 3 < cost) { // costs 3 to switch from delete to insert"	"if(enterDeleteCost[pos] + TRANSITION_COSTS[Op.DELETE][prev] < cost) {"	>26-1+33>10-43;
"if(enterDeleteCost[pos] + TRANSITION_COSTS[Op.DELETE][prev] < cost) {"	"if(enterInsertCost[pos] + 2 < cost) { // costs 2 to switch from insert to next"	>8-5+3>1+2>12-33+1>10+41;
"if(enterInsertCost[pos] + 2 < cost) { // costs 2 to switch from insert to next"	"if(enterInsertCost[pos] + 3 < cost) { // costs 3 to switch from insert to delete"	>26-1+1>20-1+1>26-3+4>1+1;
"if(enterInsertCost[pos] + 3 < cost) { // costs 3 to switch from insert to delete"	"if(enterInsertCost[pos] + TRANSITION_COSTS[Op.INSERT][prev] < cost) {"	>26-1+33>10-43;
"if(enterInsertCost[pos] + TRANSITION_COSTS[Op.INSERT][prev] < cost) {"	"if(enterNextCost[pos] + 3 < cost) { // costs 3 to switch from next to delete"	>6-5>2+3>13-33+1>10+41;
"if(enterNextCost[pos] + 3 < cost) { // costs 3 to switch from next to delete"	"if(enterNextCost[pos] + 3 < cost) { // costs 3 to switch from next to insert"	>70-5+3>1+2;
"if(enterNextCost[pos] + 3 < cost) { // costs 3 to switch from next to insert"	"if(expectedPostHash != null) {"	>4-71+10>1+15;
"if(expectedPostHash != null) {"	"if(expectedPreHash != null) {"	>12-3+2>15;
"if(expectedPreHash != null) {"	"if(ext.readByte() != (byte) 0x4)"	>5-24+27;
"if(ext.readByte() != (byte) 0x4)"	"if(ext.readByte() != (byte) 0xd1)"	>30-2+3;
"if(ext.readByte() != (byte) 0xd1)"	"if(ext.readByte() != (byte) 0xff)"	>30-3+3;
"if(ext.readByte() != (byte) 0xff)"	"if(filtering.get(0).getOp() != Op.DELETE || filtering.get(1).getOp() != Op.INSERT)"	>3-27>1+40>1+22>1+14;
"if(filtering.get(0).getOp() != Op.DELETE || filtering.get(1).getOp() != Op.INSERT)"	"if(filtering.get(0).getOp() == Op.DELETE && filtering.get(1).getOp() == Op.INSERT) {"	>28-1+1>12-2+2>26-1+1>12+2;
"if(filtering.get(0).getOp() == Op.DELETE && filtering.get(1).getOp() == Op.INSERT) {"	"if(filtering.get(0).getOp() == Op.INSERT && filtering.get(1).getOp() == Op.DELETE) {"	>34-5+3>1+2>35-5+4>1+1>3;
"if(filtering.get(0).getOp() == Op.INSERT && filtering.get(1).getOp() == Op.DELETE) {"	"if(filtering.get(0).getOp() == Op.NEXT && filtering.get(1).getOp() == Op.NEXT) {"	>34-5+3>36-5+1>1+2>3;
"if(filtering.get(0).getOp() == Op.NEXT && filtering.get(1).getOp() == Op.NEXT) {"	"if(filtering.get(0).getOp() == Op.NEXT)"	>38-42+1;
"if(filtering.get(0).getOp() == Op.NEXT)"	"if(i == 0)"	>3-36+7;
"if(i == 0)"	"if(in instanceof InputStream)"	>4-6+25;
"if(in instanceof InputStream)"	"if(in.available() > 0)"	>5-23+11>1+5;
"if(in.available() > 0)"	"if(in.remaining() == 0)"	>6-13+14>3;
"if(in.remaining() == 0)"	"if(info.equals(args[0])) {"	>5-16+15>1+2>1+2;
"if(info.equals(args[0])) {"	"if(ipos < idata.length) {"	>4-19+18>3;
"if(ipos < idata.length) {"	"if(iterNext == null)"	>4-21+16;
"if(iterNext == null)"	"if(line.length() > 4)"	>3-14>1+4>1+6>1+5;
"if(line.length() > 4)"	"if(load)"	>4-17+4;
"if(load)"	"if(mark == -1)"	>3-5+11;
"if(mark == -1)"	"if(n < 0) {"	>3-10+5>1+2;
"if(n < 0) {"	"if(neg)"	>4-7+3;
"if(neg)"	"if(nextable[pos]) {"	>5-1+11>1+2;
"if(nextable[pos]) {"	"if(obj != null)"	>3-16+12;
"if(obj != null)"	"if(obuf != null)"	>5-1+2>9;
"if(obuf != null)"	"if(op != Op.STOP && op != fop) {"	>4-11+25>1+2;
"if(op != Op.STOP && op != fop) {"	"if(op != Op.STOP) {"	>16-13>3;
"if(op != Op.STOP) {"	"if(op == INSERT && data == null)"	>6-13+26;
"if(op == INSERT && data == null)"	"if(op == INSERT || op == DELETE)"	>16-16+16;
"if(op == INSERT || op == DELETE)"	"if(op == Op.DELETE) {"	>3-16>6+3>7+2;
"if(op == Op.DELETE) {"	"if(op == Op.INSERT || op == Op.DELETE) {"	>3+19>18;
"if(op == Op.INSERT || op == Op.DELETE) {"	"if(op == Op.INSERT) {"	>18-19>3;
"if(op == Op.INSERT) {"	"if(op == Op.NEXT)"	>12-9+5;
"if(op == Op.NEXT)"	"if(opt != null)"	>5-12+10;
"if(opt != null)"	"if(opt != null) {"	>15+2;
"if(opt != null) {"	"if(opt.getHashAlgorithm() != null && opt.getPostHash() != null)"	>6+48>9-2;
"if(opt.getHashAlgorithm() != null && opt.getPostHash() != null)"	"if(opt.getHashAlgorithm() != null && opt.getPreHash() != null)"	>45-3+2>15;
"if(opt.getHashAlgorithm() != null && opt.getPreHash() != null)"	"if(opt.getHashAlgorithm() != null && opt.getPreHash() != null) {"	>62+2;
"if(opt.getHashAlgorithm() != null && opt.getPreHash() != null) {"	"if(opt.getHashAlgorithm() != null)"	>33-31+1;
"if(opt.getHashAlgorithm() != null)"	"if(opt.getPostHash() != null)"	>9+4>5-9>11;
"if(opt.getPostHash() != null)"	"if(opt.getPreHash() != null)"	>11-3+2>15;
"if(opt.getPreHash() != null)"	"if(out instanceof OutputStream)"	>4-24+27;
"if(out instanceof OutputStream)"	"if(p > pos)"	>3-28+8;
"if(p > pos)"	"if(p >= pos) {"	>6+1>5+2;
"if(p >= pos) {"	"if(patch.equals(args[0])) {"	>4-6+15>1+4>3;
"if(patch.equals(args[0])) {"	"if(pos < 65536) {"	>4-20+10>3;
"if(pos < 65536) {"	"if(pos <= Integer.MAX_VALUE) {"	>8-6+19>3;
"if(pos <= Integer.MAX_VALUE) {"	"if(pos == 0)"	>7-23+5;
"if(pos == 0)"	"if(r == -1)"	>3-9+8;
"if(r == -1)"	"if(r == chunk)"	>8-3+6;
"if(r == chunk)"	"if(r >= 0) {"	>5-8+4>1+2;
"if(r >= 0) {"	"if(run < 1 && op != DELETE || data != null && run > data.length)"	>4-8+60;
"if(run < 1 && op != DELETE || data != null && run > data.length)"	"if(run < 252) {"	>9-54+3>1+2;
"if(run < 252) {"	"if(run < 256) {"	>11-1+1>3;
"if(run < 256) {"	"if(run < 65536) {"	>9-1+2>1+1>4;
"if(run < 65536) {"	"if(s.type() == type) {"	>3-11+16>3;
"if(s.type() == type) {"	"if(serial != null && serial != DefaultSerialization.getInstance())"	>4-18+62;
"if(serial != null && serial != DefaultSerialization.getInstance())"	"if(serial != null && serial != SmallNumberSerialization.getInstance())"	>31-7+11>28;
"if(serial != null && serial != SmallNumberSerialization.getInstance())"	"if(serial == DefaultSerialization.getInstance())"	>10-32+10>28;
"if(serial == DefaultSerialization.getInstance())"	"if(serial == null)"	>13-35+5;
"if(serial == null)"	"if(serializers.get(i).type() == obj) {"	>8-8>1+26>1+2;
"if(serializers.get(i).type() == obj) {"	"if(size == -1)"	>4-34+10;
"if(size == -1)"	"if(stats.rewindCount > 0)"	>4-10+21;
"if(stats.rewindCount > 0)"	"if(task == null) {"	>3-21+12>1+2;
"if(task == null) {"	"if(tbuf != null)"	>4-5+5>7-2;
"if(tbuf != null)"	"if(val < 0)"	>3-13+8;
"if(val < 0)"	"if(version < 1 || version > VERSION)"	>4-7+32;
"if(version < 1 || version > VERSION)"	"if(x == 0 && y == 0)"	>3-33+17;
"if(x == 0 && y == 0)"	"if(x > 0 && y > 0 && xval[x] == yval[y]) {"	>5-2+1>8-2+1>2+22>1+2;
"if(x > 0 && y > 0 && xval[x] == yval[y]) {"	"ig.compute(orig, target);"	-42+25;
"ig.compute(orig, target);"	"import java.io.BufferedReader;"	-25+30;
"import java.io.BufferedReader;"	"import java.io.ByteArrayInputStream;"	>16-14+20;
"import java.io.ByteArrayInputStream;"	"import java.io.ByteArrayOutputStream;"	>24-2+3>10;
"import java.io.ByteArrayOutputStream;"	"import java.io.DataInput;"	>15-22+10;
"import java.io.DataInput;"	"import java.io.DataInputStream;"	>24+6>1;
"import java.io.DataInputStream;"	"import java.io.DataOutput;"	>19-12+7;
"import java.io.DataOutput;"	"import java.io.DataOutputStream;"	>25+6>1;
"import java.io.DataOutputStream;"	"import java.io.EOFException;"	>15-17+13;
"import java.io.EOFException;"	"import java.io.File;"	>15-13+5;
"import java.io.File;"	"import java.io.FileInputStream;"	>19+11>1;
"import java.io.FileInputStream;"	"import java.io.FileOutputStream;"	>19-2+3>10;
"import java.io.FileOutputStream;"	"import java.io.FileReader;"	>19-13+7;
"import java.io.FileReader;"	"import java.io.FilterInputStream;"	>18-8+15;
"import java.io.FilterInputStream;"	"import java.io.FilterOutputStream;"	>21-2+3>10;
"import java.io.FilterOutputStream;"	"import java.io.IOException;"	>15-19+12;
"import java.io.IOException;"	"import java.io.InputStream;"	>16-11+11;
"import java.io.InputStream;"	"import java.io.NotSerializableException;"	>15-12+25;
"import java.io.NotSerializableException;"	"import java.io.ObjectInput;"	>15-25+12;
"import java.io.ObjectInput;"	"import java.io.ObjectOutput;"	>21-2+3>4;
"import java.io.ObjectOutput;"	"import java.io.OutputStream;"	>15-6>6+6>1;
"import java.io.OutputStream;"	"import java.io.PushbackInputStream;"	>15-3+10>10;
"import java.io.PushbackInputStream;"	"import java.net.URI;"	>12-23+8;
"import java.net.URI;"	"import java.nio.BufferUnderflowException;"	>13-7+28;
"import java.nio.BufferUnderflowException;"	"import java.nio.ByteBuffer;"	>16+4>6-18>1;
"import java.nio.ByteBuffer;"	"import java.nio.MappedByteBuffer;"	>16+6>11;
"import java.nio.MappedByteBuffer;"	"import java.nio.channels.FileChannel.MapMode;"	>16-17+29;
"import java.nio.channels.FileChannel.MapMode;"	"import java.security.DigestInputStream;"	>12-33+27;
"import java.security.DigestInputStream;"	"import java.security.DigestOutputStream;"	>27-2+3>10;
"import java.security.DigestOutputStream;"	"import java.security.MessageDigest;"	>21+7>6-12>1;
"import java.security.MessageDigest;"	"import java.security.NoSuchAlgorithmException;"	>21-14+25;
"import java.security.NoSuchAlgorithmException;"	"import java.util.ArrayDeque;"	>12-34+16;
"import java.util.ArrayDeque;"	"import java.util.ArrayList;"	>22-6+5;
"import java.util.ArrayList;"	"import java.util.Arrays;"	>22-5+2;
"import java.util.Arrays;"	"import java.util.Collections;"	>17-5+10>2;
"import java.util.Collections;"	"import java.util.Comparator;"	>19-10+9;
"import java.util.Comparator;"	"import java.util.Deque;"	>17-11+6;
"import java.util.Deque;"	"import java.util.Iterator;"	>17-6+9;
"import java.util.Iterator;"	"import java.util.List;"	>17-9+5;
"import java.util.List;"	"import java.util.Map;"	>17-5+4;
"import java.util.Map;"	"import java.util.Set;"	>17-4+4;
"import java.util.Set;"	"import java.util.TreeMap;"	>17-4+8;
"import java.util.TreeMap;"	"import java.util.TreeSet;"	>21-4+4;
"import java.util.TreeSet;"	"import java.util.concurrent.ArrayBlockingQueue;"	>17-8+30;
"import java.util.concurrent.ArrayBlockingQueue;"	"import java.util.concurrent.BlockingQueue;"	>28-5>14;
"import java.util.concurrent.BlockingQueue;"	"import java.util.concurrent.Callable;"	>28-12+7>2;
"import java.util.concurrent.Callable;"	"import java.util.concurrent.ExecutionException;"	>28-9+19;
"import java.util.concurrent.ExecutionException;"	"import java.util.concurrent.ExecutorService;"	>34-13+10;
"import java.util.concurrent.ExecutorService;"	"import java.util.concurrent.Executors;"	>36-8+2;
"import java.util.concurrent.Executors;"	"import java.util.concurrent.Future;"	>28-10+7;
"import java.util.concurrent.Future;"	"import java.util.concurrent.LinkedBlockingQueue;"	>28-5+18>2;
"import java.util.concurrent.LinkedBlockingQueue;"	"import java.util.concurrent.ThreadFactory;"	>28-20+14;
"import java.util.concurrent.ThreadFactory;"	"import java.util.concurrent.ThreadPoolExecutor;"	>34-8+13;
"import java.util.concurrent.ThreadPoolExecutor;"	"import java.util.concurrent.TimeUnit;"	>29-18+8;
"import java.util.concurrent.TimeUnit;"	"import org.apache.commons.io.FileUtils;"	>7-30+32;
"import org.apache.commons.io.FileUtils;"	"import org.badiff.Applyable;"	>11-28+17;
"import org.badiff.Applyable;"	"import org.badiff.Diff;"	>18-10+5;
"import org.badiff.Diff;"	"import org.badiff.Op;"	>18-5+3;
"import org.badiff.Op;"	"import org.badiff.Queueable;"	>18-3+10;
"import org.badiff.Queueable;"	"import org.badiff.Storeable;"	>18-4+4>6;
"import org.badiff.Storeable;"	"import org.badiff.alg.EditGraph;"	>18-10+14;
"import org.badiff.alg.EditGraph;"	"import org.badiff.alg.Graph;"	>22-4>6;
"import org.badiff.alg.Graph;"	"import org.badiff.alg.InertialGraph;"	>22+8>6;
"import org.badiff.alg.InertialGraph;"	"import org.badiff.imp.BadiffFileDiff.Optional;"	>18-18+28;
"import org.badiff.imp.BadiffFileDiff.Optional;"	"import org.badiff.imp.BadiffFileDiff;"	>36-9>1;
"import org.badiff.imp.BadiffFileDiff;"	"import org.badiff.imp.FileDiff;"	>22-6>9;
"import org.badiff.imp.FileDiff;"	"import org.badiff.imp.MemoryDiff;"	>22-3+1>1+4>5;
"import org.badiff.imp.MemoryDiff;"	"import org.badiff.io.DataInputInputStream;"	>19-14+23;
"import org.badiff.io.DataInputInputStream;"	"import org.badiff.io.DataOutputOutputStream;"	>25-7+9>10;
"import org.badiff.io.DataOutputOutputStream;"	"import org.badiff.io.DefaultSerialization;"	>22-22+20;
"import org.badiff.io.DefaultSerialization;"	"import org.badiff.io.NoopOutputStream;"	>21-21+17;
"import org.badiff.io.NoopOutputStream;"	"import org.badiff.io.Random;"	>21-14+1>1+3>2;
"import org.badiff.io.Random;"	"import org.badiff.io.RandomInput;"	>27+5>1;
"import org.badiff.io.RandomInput;"	"import org.badiff.io.RandomInputStream;"	>32+6>1;
"import org.badiff.io.RandomInputStream;"	"import org.badiff.io.RuntimeIOException;"	>22-17+18;
"import org.badiff.io.RuntimeIOException;"	"import org.badiff.io.Serialization;"	>21-14+9>5;
"import org.badiff.io.Serialization;"	"import org.badiff.io.Serialized;"	>29-6+3;
"import org.badiff.io.Serialized;"	"import org.badiff.io.SmallNumberSerialization;"	>21+11>8-3+6;
"import org.badiff.io.SmallNumberSerialization;"	"import org.badiff.q.ChunkingOpQueue;"	>18-28+18;
"import org.badiff.q.ChunkingOpQueue;"	"import org.badiff.q.CoalescingOpQueue;"	>21-4+6>11;
"import org.badiff.q.CoalescingOpQueue;"	"import org.badiff.q.CompactingOpQueue;"	>22-4+3>1+1>11;
"import org.badiff.q.CompactingOpQueue;"	"import org.badiff.q.GraphOpQueue;"	>20-10+5>8;
"import org.badiff.q.GraphOpQueue;"	"import org.badiff.q.ListOpQueue;"	>20-5+4>8;
"import org.badiff.q.ListOpQueue;"	"import org.badiff.q.OneWayOpQueue;"	>20-4+6>8;
"import org.badiff.q.OneWayOpQueue;"	"import org.badiff.q.OpQueue;"	>20-6>8;
"import org.badiff.q.OpQueue;"	"import org.badiff.q.ParallelGraphOpQueue;"	>20+13>8;
"import org.badiff.q.ParallelGraphOpQueue;"	"import org.badiff.q.PumpingOpQueue;"	>21-12+6>8;
"import org.badiff.q.PumpingOpQueue;"	"import org.badiff.q.ReplaceOpQueue;"	>20-7+7>8;
"import org.badiff.q.ReplaceOpQueue;"	"import org.badiff.q.RewindingOpQueue;"	>21-5>1+7>8;
"import org.badiff.q.RewindingOpQueue;"	"import org.badiff.q.StreamChunkingOpQueue;"	>20-6+11>11;
"import org.badiff.q.StreamChunkingOpQueue;"	"import org.badiff.q.UnchunkingOpQueue;"	>20-7+3>15;
"import org.badiff.q.UnchunkingOpQueue;"	"import org.badiff.q.UndoOpQueue;"	>22-8+2>8;
"import org.badiff.q.UndoOpQueue;"	"import org.badiff.util.Diffs;"	>18-14+11;
"import org.badiff.util.Diffs;"	"import org.badiff.util.Digests;"	>25-2+4>2;
"import org.badiff.util.Digests;"	"import org.badiff.util.Serials;"	>23-6+6>2;
"import org.badiff.util.Serials;"	"import org.badiff.util.Streams;"	>24-5+5>2;
"import org.badiff.util.Streams;"	"import org.junit.Assert;"	>11-20+13;
"import org.junit.Assert;"	"import org.junit.Test;"	>17-5+3>2;
"import org.junit.Test;"	"in = new FileInputStream(file);"	-22+31;
"in = new FileInputStream(file);"	"in.close();"	-26>1+3>1+2>1+1>2;
"in.close();"	"in.get(buf);"	>3-4+1>1+1>1+3>2;
"in.get(buf);"	"in.read(magic);"	>3-7+10>2;
"in.read(magic);"	"in.readFully(obj);"	>7-6+9>2;
"in.readFully(obj);"	"in.seek(mark);"	>3-13+9>2;
"in.seek(mark);"	"in.seek(pos);"	>8-4+3>2;
"in.seek(pos);"	"in.unread(b);"	>3-8+8>2;
"in.unread(b);"	"inputSize = serial.readObject(in, Long.class);"	-10+24>1+19>2;
"inputSize = serial.readObject(in, Long.class);"	"insert = filtering.get(0);"	-30>2-11>1+21>2;
"insert = filtering.get(0);"	"insert = filtering.get(1);"	>23-1+1>2;
"insert = filtering.get(1);"	"insert = filtering.remove(0);"	>19-5+8>2;
"insert = filtering.remove(0);"	"insertCount = serial.readObject(in, Long.class);"	>6-21+40>2;
"insertCount = serial.readObject(in, Long.class);"	"int b = 0xff & ext.readByte();"	-46+28>2;
"int b = 0xff & ext.readByte();"	"int cost = enterNextCost[pos];"	>4-26+26;
"int cost = enterNextCost[pos];"	"int cost;"	>8-21>1;
"int cost;"	"int dpos = 0;"	>4-5+9;
"int dpos = 0;"	"int ipos = 0;"	>4-1+1>8;
"int ipos = 0;"	"int len = ext.readShort() & 0xffff;"	>4-9+31;
"int len = ext.readShort() & 0xffff;"	"int pos = -1;"	>4-31+9;
"int pos = -1;"	"int pos = x + y * xval.length;"	>10-3+20;
"int pos = x + y * xval.length;"	"int pos = xval.length * yval.length - 1;"	>9-8>2+14>10+4>1;
"int pos = xval.length * yval.length - 1;"	"int r = in.read();"	>4-36+14;
"int r = in.read();"	"int r = in.read(b);"	>16+1>2;
"int r = in.read(b);"	"int r = in.read(b, off, len);"	>17+10>2;
"int r = in.read(b, off, len);"	"int r = in.read(buf);"	>17-10+2>2;
"int r = in.read(buf);"	"int run = 0;"	>5-16+7;
"int run = 0;"	"int size = (int) readLong(in) - 1;"	>4-8+30;
"int size = (int) readLong(in) - 1;"	"int v = (int)(val & 0x7f);"	>4-4+1>8-18+13;
"int v = (int)(val & 0x7f);"	"int version = in.readInt();"	>5-19+20>2;
"int version = in.readInt();"	"ipos += data.length;"	-27+20;
"ipos += data.length;"	"iterNext = null;"	-20+16;
"iterNext = null;"	"iterNext = poll();"	>11-5+7;
"iterNext = poll();"	"leaveDeleteCost = new short[capacity];"	-18+38;
"leaveDeleteCost = new short[capacity];"	"leaveDeleteCost[0] = 3;"	>15-23+8;
"leaveDeleteCost[0] = 3;"	"leaveDeleteCost[pos] = (short) Math.min(cost, Short.MAX_VALUE);"	>16-7+47;
"leaveDeleteCost[pos] = (short) Math.min(cost, Short.MAX_VALUE);"	"leaveInsertCost = new short[capacity];"	>5-58+33;
"leaveInsertCost = new short[capacity];"	"leaveInsertCost[0] = 3;"	>15-23+8;
"leaveInsertCost[0] = 3;"	"leaveInsertCost[pos] = (short) Math.min(cost, Short.MAX_VALUE);"	>16-7+47;
"leaveInsertCost[pos] = (short) Math.min(cost, Short.MAX_VALUE);"	"leaveNextCost = new short[capacity];"	>5-58+31;
"leaveNextCost = new short[capacity];"	"leaveNextCost[0] = 2;"	>13-23+8;
"leaveNextCost[0] = 2;"	"leaveNextCost[pos] = (short) Math.min(cost, Short.MAX_VALUE);"	>14-7+47;
"leaveNextCost[pos] = (short) Math.min(cost, Short.MAX_VALUE);"	"len = 0xff & ext.readByte();"	-59+26>2;
"len = 0xff & ext.readByte();"	"len = 0xffff & ext.readShort();"	>8+2>13-4+5>3;
"len = 0xffff & ext.readShort();"	"len = b;"	>6-25+2;
"len = b;"	"len = ext.readInt();"	>6-2+14;
"len = ext.readInt();"	"lengths = new short[size];"	>3-17+23;
"lengths = new short[size];"	"lengths[0] = Short.MIN_VALUE;"	>7-19+22;
"lengths[0] = Short.MIN_VALUE;"	"lengths[pos] = (short) (1 + lengths[pos - xval.length - 1]);"	>8-21+52;
"lengths[pos] = (short) (1 + lengths[pos - xval.length - 1]);"	"lengths[pos] = dlen;"	>15-45+5;
"lengths[pos] = dlen;"	"lengths[pos] = ilen;"	>15-1+1>4;
"lengths[pos] = ilen;"	"line = line.replaceAll(\, );"	-20+28;
"line = line.replaceAll(\, );"	"line = line.trim().replaceAll(\\s+, );"	>11+7>13+3>4;
"line = line.trim().replaceAll(\\s+, );"	"long b = 0xff & in.readByte();"	-35+15>1+12>2;
"long b = 0xff & in.readByte();"	"long count = 0;"	>5-25+10;
"long count = 0;"	"long dpos = -1;"	>5-10+10;
"long dpos = -1;"	"long end = System.nanoTime();"	>5-10+24;
"long end = System.nanoTime();"	"long flags = 0;"	>5-24+10;
"long flags = 0;"	"long flags = in.readLong();"	>13-2+14;
"long flags = in.readLong();"	"long length = serial.readObject(in, Long.class);"	>5-17+2>2+22>1+14>2;
"long length = serial.readObject(in, Long.class);"	"long oldpos = ext.position();"	>5-39+5>1+9>1+6>2;
"long oldpos = ext.position();"	"long opos = 0;"	>6-2>6-15+2;
"long opos = 0;"	"long opos = orig.position();"	>12-2+16;
"long opos = orig.position();"	"long oprun = op | (((long) run) << 2);"	>7-17+2>1+10>1+15>2;
"long oprun = op | (((long) run) << 2);"	"long oprun = serial.readObject(in, Long.class);"	>13-23+32>2;
"long oprun = serial.readObject(in, Long.class);"	"long osize = 0; // input file size"	>6-40+8>1+19;
"long osize = 0; // input file size"	"long p = ext.readShort() & 0xffff;"	>5-28+9>1+19;
"long p = ext.readShort() & 0xffff;"	"long pos = orig.position();"	>6-28+21;
"long pos = orig.position();"	"long skipped = 0;"	>5-22+12;
"long skipped = 0;"	"long start = System.nanoTime();"	>6-11+25;
"long start = System.nanoTime();"	"long tsize = 0; // output file size"	>5-25+9>1+20;
"long tsize = 0; // output file size"	"long v = Math.abs(val) << 1;"	>5-30+23;
"long v = Math.abs(val) << 1;"	"long v = readLongP(in, 0, 0);"	>9-19+20;
"long v = readLongP(in, 0, 0);"	"long val = v >>> 1;"	>6-23+13;
"long val = v >>> 1;"	"mark = in.position();"	-19+21;
"mark = in.position();"	"md.deserialize(getInstance(), Streams.asStream(in));"	-17+23>1+22>1+3>2;
"md.deserialize(getInstance(), Streams.asStream(in));"	"md.store(Diffs.improved(Diffs.queue(orig, target)));"	>3-46+46>3;
"md.store(Diffs.improved(Diffs.queue(orig, target)));"	"md.store(new OneWayOpQueue(Diffs.improved(Diffs.queue(orig, target))));"	>7+18>41+1>4;
"md.store(new OneWayOpQueue(Diffs.improved(Diffs.queue(orig, target))));"	"md.store(new OneWayOpQueue(md.queue()));"	>27-20+2>7-13>4;
"md.store(new OneWayOpQueue(md.queue()));"	"md.store(new UndoOpQueue(md.queue()));"	>13-6+4>21;
"md.store(new UndoOpQueue(md.queue()));"	"n = Math.max(n, -buf.position());"	-35+30>3;
"n = Math.max(n, -buf.position());"	"n = Math.min(n, buf.remaining());"	>10-18+17>1+1>4;
"n = Math.min(n, buf.remaining());"	"new ByteArrayInputStream(orig.toByteArray()),"	-33+45;
"new ByteArrayInputStream(orig.toByteArray()),"	"new ByteArrayInputStream(target.toByteArray()),"	>25-3+3>1+2>16;
"new ByteArrayInputStream(target.toByteArray()),"	"new DataInputInputStream(orig),"	>4-9+9>12-20+4>2;
"new DataInputInputStream(orig),"	"new Op(Op.STOP, 1, null).serialize(serial, out);"	>4-25+19>1+17>1+6;
"new Op(Op.STOP, 1, null).serialize(serial, out);"	"nextCount = serial.readObject(in, Long.class);"	-43+5>2+21>1+15>2;
"nextCount = serial.readObject(in, Long.class);"	"nextable = new boolean[capacity];"	>4-42+29;
"nextable = new boolean[capacity];"	"nextable[pos] = x > 0 && y > 0 && xval[x] == yval[y];"	>8-22+42>3;
"nextable[pos] = x > 0 && y > 0 && xval[x] == yval[y];"	"obj.serialize(getInstance(), Streams.asStream(out));"	-53+52;
"obj.serialize(getInstance(), Streams.asStream(out));"	"obuf.load();"	-50+10>2;
"obuf.load();"	"offer(q);"	-9+5>1+1>2;
"offer(q);"	"oin.close();"	-7+10>2;
"oin.close();"	"op = (byte)(oprun & 0x3);"	-8+9>1+1>1+11>2;
"op = (byte)(oprun & 0x3);"	"op = Op.DELETE;"	>5-20+10;
"op = Op.DELETE;"	"op = Op.INSERT;"	>8-7+7;
"op = Op.INSERT;"	"op = fop;"	>5-10+4;
"op = fop;"	"op.deserialize(getInstance(), Streams.asStream(in));"	-9+52;
"op.deserialize(getInstance(), Streams.asStream(in));"	"opos += e.getRun();"	-50+17>2;
"opos += e.getRun();"	"ops.add(0, e);"	-16+7>1+4>2;
"ops.add(0, e);"	"ops.add(e);"	>8-3>3;
"ops.add(e);"	"opt = new Optional();"	-8+7>1+11>2;
"opt = new Optional();"	"opt.deserialize(serial, in);"	>3-13+7>2+3>1+10>2;
"opt.deserialize(serial, in);"	"opt.serialize(serial, dout);"	>4-2>18-2+4>2;
"opt.serialize(serial, dout);"	"opt.setHashAlgorithm(Digests.defaultDigest().getAlgorithm());"	>6-17+8>1+18>1+20>1+4>2;
"opt.setHashAlgorithm(Digests.defaultDigest().getAlgorithm());"	"opt.setPostHash(digout.getMessageDigest().digest());"	>7-28+18>1+7>9-12+6>4;
"opt.setPostHash(digout.getMessageDigest().digest());"	"opt.setPostHash(postHash);"	>16-34+8>2;
"opt.setPostHash(postHash);"	"opt.setPreHash(digin.getMessageDigest().digest());"	>8-12+2>4+34>2;
"opt.setPreHash(digin.getMessageDigest().digest());"	"opt.setPreHash(preHash);"	>15-33+7>2;
"opt.setPreHash(preHash);"	"orig.delete();"	-22+12>2;
"orig.delete();"	"orig.deleteOnExit();"	>11+6>3;
"orig.deleteOnExit();"	"orig.seek(opos);"	>5-12+4>1+4>2;
"orig.seek(opos);"	"orig.seek(p + len);"	>10-4+7>2;
"orig.seek(p + len);"	"orig.skip(run);"	>6-10+6>3;
"orig.skip(run);"	"orig.write((int)(256 * Math.random()));"	>5-7+25>1+6>2;
"orig.write((int)(256 * Math.random()));"	"osize += e.getRun();"	-37+18>2;
"osize += e.getRun();"	"out = digout;"	-20+13;
"out = digout;"	"out.close();"	-9>3-1+9;
"out.close();"	"out.write(MAGIC);"	>4-4+4>2+5>2;
"out.write(MAGIC);"	"out.write(b);"	>10-5+1>2;
"out.write(b);"	"out.write(buf);"	>11+2>2;
"out.write(buf);"	"out.write(buf, 0, r);"	>13+6>2;
"out.write(buf, 0, r);"	"out.write(obj);"	>10-9+3>2;
"out.write(obj);"	"out.writeByte(0);"	>9-4+6>2;
"out.writeByte(0);"	"out.writeByte(0xd1);"	>15+3>2;
"out.writeByte(0xd1);"	"out.writeByte(0xff);"	>16-2+2>2;
"out.writeByte(0xff);"	"out.writeByte(247);"	>14-4+3>2;
"out.writeByte(247);"	"out.writeByte(248);;"	>16-1+1>2+1;
"out.writeByte(248);;"	"out.writeByte(249);"	>16-4+3;
"out.writeByte(249);"	"out.writeByte(250);"	>15-2+2>2;
"out.writeByte(250);"	"out.writeByte(251);"	>16-1+1>2;
"out.writeByte(251);"	"out.writeByte(253);"	>16-1+1>2;
"out.writeByte(253);"	"out.writeByte(254);"	>16-1+1>2;
"out.writeByte(254);"	"out.writeByte(255);"	>16-1+1>2;
"out.writeByte(255);"	"out.writeByte(4);"	>14-3+1>2;
"out.writeByte(4);"	"out.writeByte(buf.length);"	>14-1+10>2;
"out.writeByte(buf.length);"	"out.writeByte(obj);"	>14-10+3>2;
"out.writeByte(obj);"	"out.writeByte(run);"	>14-3+3>2;
"out.writeByte(run);"	"out.writeByte(v);"	>14-3+1>2;
"out.writeByte(v);"	"out.writeInt((int) pos);"	>9-6+13>2;
"out.writeInt((int) pos);"	"out.writeInt(VERSION);"	>13-9+7>2;
"out.writeInt(VERSION);"	"out.writeInt(buf.length);"	>13-7+10>2;
"out.writeInt(buf.length);"	"out.writeInt(run);"	>13-10+3>2;
"out.writeInt(run);"	"out.writeLong(flags);"	>9-6+2>1+7>2;
"out.writeLong(flags);"	"out.writeLong(pos);"	>14-4+2>3;
"out.writeLong(pos);"	"out.writeShort((int) pos);"	>9-4+6>1+5>5;
"out.writeShort((int) pos);"	"out.writeShort(buf.length);"	>15-9+10>2;
"out.writeShort(buf.length);"	"out.writeShort(run);"	>15-10+3>2;
"out.writeShort(run);"	"out.writeUTF(obj);"	>9-9+7>2;
"out.writeUTF(obj);"	"outputSize = serial.readObject(in, Long.class);"	>3-11+22>2+18>2;
"outputSize = serial.readObject(in, Long.class);"	"p = ext.readInt();"	-45+16>2;
"p = ext.readInt();"	"p = ext.readLong();"	>12-3+4>3;
"p = ext.readLong();"	"p = ext.readShort() & 0xffff;"	>12-7+17;
"p = ext.readShort() & 0xffff;"	"package org.badiff.alg;"	-29+23;
"package org.badiff.alg;"	"package org.badiff.cli;"	>19-4+4;
"package org.badiff.cli;"	"package org.badiff.fmt;"	>19-4+4;
"package org.badiff.fmt;"	"package org.badiff.imp;"	>19-4+4;
"package org.badiff.imp;"	"package org.badiff.io;"	>20-3+2;
"package org.badiff.io;"	"package org.badiff.q;"	>19-3+2;
"package org.badiff.q;"	"package org.badiff.util;"	>19-2+5;
"package org.badiff.util;"	"package org.badiff;"	>18-5>1;
"package org.badiff;"	"pin = new PushbufferInputStream(in, size);"	-19+42;
"pin = new PushbufferInputStream(in, size);"	"pin.close();"	>3-36+5>1+1>2;
"pin.close();"	"pin.position(pos);"	>4-5+8>1+3>2;
"pin.position(pos);"	"pipe = new ArrayBlockingQueue<Op>(capacity);"	-16+42>2;
"pipe = new ArrayBlockingQueue<Op>(capacity);"	"pipe.put(e);"	>4-38+6>2;
"pipe.put(e);"	"pipe.put(new Op(Op.STOP, 1, null));"	>9+1>1+22>2;
"pipe.put(new Op(Op.STOP, 1, null));"	"pool = new ThreadPoolExecutor(workers, workers, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {"	-35+133;
"pool = new ThreadPoolExecutor(workers, workers, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {"	"pool.shutdown();"	>4-129+12;
"pool.shutdown();"	"pos += e.getRun();"	-12+14>4;
"pos += e.getRun();"	"pos += r;"	>7-11+2;
"pos += r;"	"pos += skipped;"	>7-2+8;
"pos += skipped;"	"pos -= 1;"	>4-11+5;
"pos -= 1;"	"pos -= xval.length + 1;"	>6+14>3;
"pos -= xval.length + 1;"	"pos -= xval.length;"	>18-4>1;
"pos -= xval.length;"	"pos = pos - 1 - xval.length;"	>4-1>1+10>13;
"pos = pos - 1 - xval.length;"	"pos = pos - 1;"	>13-14>1;
"pos = pos - 1;"	"pos = pos - xval.length;"	>12-2+12;
"pos = pos - xval.length;"	"pos = xval.length * yval.length - 1;"	>5-6>2+14>10+4>1;
"pos = xval.length * yval.length - 1;"	"pos++;"	>3-33+3;
"pos++;"	"postHash = serial.readObject(in, byte[].class);"	>3-3+44;
"postHash = serial.readObject(in, byte[].class);"	"preHash = serial.readObject(in, byte[].class);"	-4+3>43;
"preHash = serial.readObject(in, byte[].class);"	"prepare(e);"	>3-41+6>2;
"prepare(e);"	"prepare(filtering.remove(0));"	>8+15>1+3>2;
"prepare(filtering.remove(0));"	"prepare(new Op(Op.DELETE, (int) (dpos - pos), null));"	>8-18+42>3;
"prepare(new Op(Op.DELETE, (int) (dpos - pos), null));"	"prepare(new Op(Op.DELETE, (int)(-(dpos - pos) - e.getRun()), null));"	>31-1+2>11+14>10;
"prepare(new Op(Op.DELETE, (int)(-(dpos - pos) - e.getRun()), null));"	"prepare(new Op(Op.DELETE, (int)(p - pos), null));"	>32-6+1>6-14>10;
"prepare(new Op(Op.DELETE, (int)(p - pos), null));"	"prepare(new Op(Op.DELETE, data.length, data));"	>26-19+5>1+11>3;
"prepare(new Op(Op.DELETE, data.length, data));"	"prepare(new Op(Op.DELETE, obuf.length, obuf));"	>26-4+4>9-4+4>3;
"prepare(new Op(Op.DELETE, obuf.length, obuf));"	"prepare(new Op(Op.DELETE, orig.length, orig));"	>27-3+3>10-3+3>3;
"prepare(new Op(Op.DELETE, orig.length, orig));"	"prepare(new Op(Op.INSERT, data.length, data));"	>18-12+12>9-4+4>3;
"prepare(new Op(Op.INSERT, data.length, data));"	"prepare(new Op(Op.INSERT, len, buf));"	>26-17+8>3;
"prepare(new Op(Op.INSERT, len, buf));"	"prepare(new Op(Op.INSERT, target.length, target));"	>26-8+21>3;
"prepare(new Op(Op.INSERT, target.length, target));"	"prepare(new Op(Op.INSERT, tbuf.length, tbuf));"	>26-5>1+3>9-5>1+3>3;
"prepare(new Op(Op.INSERT, tbuf.length, tbuf));"	"prepare(new Op(Op.NEXT, e.getRun(), null));"	>18-25+22>3;
"prepare(new Op(Op.NEXT, e.getRun(), null));"	"prepare(new Op(Op.NEXT, len, null));"	>24-10+3>9;
"prepare(new Op(Op.NEXT, len, null));"	"prepare(ops.next());"	>8-25+9>3;
"prepare(ops.next());"	"prepare(pool.submit(newTask(delete, insert)));"	>8-7+10>1+8>1+15>3;
"prepare(pool.submit(newTask(delete, insert)));"	"prepare(u);"	>8-36+1>2;
"prepare(u);"	"prepared.offerLast(e);"	>7-2+13>2;
"prepared.offerLast(e);"	"prev = e.getOp();"	>3-16+7>1+4>2;
"prev = e.getOp();"	"prev = next;"	>7-10+5;
"prev = next;"	"private BadiffFileDiff bd;"	-12+26;
"private BadiffFileDiff bd;"	"private BadiffFormatOpQueue(BadiffFileDiff bd) throws IOException {"	>8+20>17-1+22;
"private BadiffFormatOpQueue(BadiffFileDiff bd) throws IOException {"	"private ByteArrayDiffs() {}"	>9-56+15>2+1;
"private ByteArrayDiffs() {}"	"private DataInputStream self;"	>8-19+21;
"private DataInputStream self;"	"private DefaultSerialization() {"	>9-20+23;
"private DefaultSerialization() {"	"private Deque<Op> prepared = new ArrayDeque<Op>();"	>10-22+40;
"private Deque<Op> prepared = new ArrayDeque<Op>();"	"private Diffs() {"	>9-41+8;
"private Diffs() {"	"private Digests() {}"	>10-2+4>5+1;
"private Digests() {}"	"private FileDiffs() {}"	>8-6+8>6;
"private FileDiffs() {}"	"private Header header;"	>8-14+14;
"private Header header;"	"private Header() {}"	>14-8+5;
"private Header() {}"	"private InputStream self;"	>8-11+17;
"private InputStream self;"	"private List<Serializer<?>> serializers = new ArrayList<Serializer<?>>();"	>8-17+65;
"private List<Serializer<?>> serializers = new ArrayList<Serializer<?>>();"	"private MemoryDiffs() {}"	>8-65+16;
"private MemoryDiffs() {}"	"private MemoryOpQueue(List<Op> ops) {"	>14-10+23;
"private MemoryOpQueue(List<Op> ops) {"	"private OpQueue q;"	>8-6>7-16+3;
"private OpQueue q;"	"private Optional optional;"	>10-8+16;
"private Optional optional;"	"private RandomInput ext;"	>8-18+16;
"private RandomInput ext;"	"private RandomInput orig;"	>20-4+5;
"private RandomInput orig;"	"private Serialization serial;"	>8-17+21;
"private Serialization serial;"	"private Serials() {"	>14-15+5;
"private Serials() {"	"private SmallNumberSerialization() {"	>8+11>6-1+7>4;
"private SmallNumberSerialization() {"	"private Stats stats;"	>9-27+11;
"private Stats stats;"	"private Stats() {}"	>13-7+5;
"private Stats() {}"	"private Streams() {}"	>9-2>1+4>6;
"private Streams() {}"	"private String hashAlgorithm;"	>11-9+18;
"private String hashAlgorithm;"	"private boolean closed;"	>8-21+15;
"private boolean closed;"	"private boolean[] nextable; // Whether this position can do NEXT"	>15-7+11>1+37;
"private boolean[] nextable; // Whether this position can do NEXT"	"private byte op;"	>9-55+7;
"private byte op;"	"private byte prev = Op.STOP;"	>13-3+15;
"private byte prev = Op.STOP;"	"private byte[] beforeDelete, beforeInsert, beforeNext; // The op type that got us to this position"	>12-15+41>1+44;
"private byte[] beforeDelete, beforeInsert, beforeNext; // The op type that got us to this position"	"private byte[] data;"	>15-83+5;
"private byte[] data;"	"private byte[] magic;"	>15-5+6;
"private byte[] magic;"	"private byte[] postHash;"	>15-6+9;
"private byte[] postHash;"	"private byte[] preHash;"	>16-3+2>5;
"private byte[] preHash;"	"private byte[] xval;"	>15-8+5;
"private byte[] xval;"	"private byte[] yval;"	>15-1+1>4;
"private byte[] yval;"	"private class BadiffFormatOpQueue extends OpQueue {"	>8-12+43;
"private class BadiffFormatOpQueue extends OpQueue {"	"private class FileBadiffOpQueue extends OpQueue {"	>14+4>6-6>25;
"private class FileBadiffOpQueue extends OpQueue {"	"private class FileOpQueue extends OpQueue {"	>18-6>25;
"private class FileOpQueue extends OpQueue {"	"private class GdiffOpQueue extends OpQueue {"	>14-4+5>25;
"private class GdiffOpQueue extends OpQueue {"	"private class GraphOpQueue extends OpQueue {"	>15-4+4>25;
"private class GraphOpQueue extends OpQueue {"	"private class MemoryOpQueue extends ListOpQueue {"	>14-5+6>16+4>9;
"private class MemoryOpQueue extends ListOpQueue {"	"private class StreamOpQueue extends OpQueue {"	>14-6+6>16-4>9;
"private class StreamOpQueue extends OpQueue {"	"private int capacity;"	>8-37+13;
"private int capacity;"	"private int pos;"	>12-9+4;
"private int pos;"	"private int run;"	>12-4+4;
"private int run;"	"private int version;"	>12-2+6>2;
"private int version;"	"private long deleteCount;"	>8-12+17;
"private long deleteCount;"	"private long flags;"	>13-12+6;
"private long flags;"	"private long inputSize;"	>13-6+10;
"private long inputSize;"	"private long insertCount;"	>15-8+10;
"private long insertCount;"	"private long nextCount;"	>13-5+3>7;
"private long nextCount;"	"private long outputSize;"	>13-10+11;
"private long outputSize;"	"private long readLong(DataInput in, long accum, int shift) throws IOException {"	>13-11+66;
"private long readLong(DataInput in, long accum, int shift) throws IOException {"	"private long readLongP(DataInput in, long accum, int shift) throws IOException {"	>21+1>58;
"private long readLongP(DataInput in, long accum, int shift) throws IOException {"	"private long rewindCount;"	>15-65+10;
"private long rewindCount;"	"private short[] enterDeleteCost, enterInsertCost, enterNextCost; // Entry costs for this position"	>8-14+43>1+10>2+33;
"private short[] enterDeleteCost, enterInsertCost, enterNextCost; // Entry costs for this position"	"private short[] leaveDeleteCost, leaveInsertCost, leaveNextCost; // Exit costs for this position"	>16-5+5>12-5+5>12-5+5>14-4+3>24;
"private short[] leaveDeleteCost, leaveInsertCost, leaveNextCost; // Exit costs for this position"	"private static DefaultSerialization instance = new DefaultSerialization();"	>9-80+24>1+4>1+25>1+2>4+3;
"private static DefaultSerialization instance = new DefaultSerialization();"	"private static SmallNumberSerialization instance = new SmallNumberSerialization();"	>15-7+11>29-7+11>16;
"private static SmallNumberSerialization instance = new SmallNumberSerialization();"	"private static abstract class Serializer<T> {"	>15-50+4>1+10>8-8+7;
"private static abstract class Serializer<T> {"	"private static final GraphFactory DEFAULT_GRAPH = EDIT_GRAPH;"	>15-30+46;
"private static final GraphFactory DEFAULT_GRAPH = EDIT_GRAPH;"	"private static final long serialVersionUID = 0;"	>21-40+26;
"private static final long serialVersionUID = 0;"	"private static final short[][] TRANSITION_COSTS = new short[][] {"	>21-26+44;
"private static final short[][] TRANSITION_COSTS = new short[][] {"	"private static void field(String header, Object data) {"	>15-48+38>2;
"private static void field(String header, Object data) {"	"private static void help() {"	>20-32+5>3;
"private static void help() {"	"private void close() {"	>8-16+10>4;
"private void close() {"	"private void computeDeleteCost(int pos) {"	>14-3+11>1+4>1+7>3;
"private void computeDeleteCost(int pos) {"	"private void computeInsertCost(int pos) {"	>20-5+3>1+2>15;
"private void computeInsertCost(int pos) {"	"private void computeNextCost(int pos) {"	>20-5+3>16;
"private void computeNextCost(int pos) {"	"private void copy(DataOutput out, int run, long pos) throws IOException {"	>15-13+2>1+16>3+10>5+19>2;
"private void copy(DataOutput out, int run, long pos) throws IOException {"	"private void copy(long p, int len) throws IOException {"	>18-25>6-2+9>22;
"private void copy(long p, int len) throws IOException {"	"private void data(DataOutput out, byte[] buf) throws IOException {"	>13-20+31>22;
"private void data(DataOutput out, byte[] buf) throws IOException {"	"private void eof(DataOutput out) throws IOException {"	>13-4+3>15-12>22;
"private void eof(DataOutput out) throws IOException {"	"private void writeLongP(DataOutput out, long val) throws IOException {"	>13-3+10>15+10>22;
"private void writeLongP(DataOutput out, long val) throws IOException {"	"protected BlockingQueue<Op> pipe;"	-70+33;
"protected BlockingQueue<Op> pipe;"	"protected ByteArrayDiffsTest(Serialization serial) {"	>11-22+41;
"protected ByteArrayDiffsTest(Serialization serial) {"	"protected ByteBuffer buf;"	>14-38+11;
"protected ByteBuffer buf;"	"protected ByteBuffer orig;"	>21-4+5;
"protected ByteBuffer orig;"	"protected ByteBuffer target;"	>21-5+7;
"protected ByteBuffer target;"	"protected Callable<OpQueue> newTask(final Op delete, final Op insert) {"	>10-18+61;
"protected Callable<OpQueue> newTask(final Op delete, final Op insert) {"	"protected ChainOpQueue chain;"	>11-60+18;
"protected ChainOpQueue chain;"	"protected Class<T> type;"	>11-18+13;
"protected Class<T> type;"	"protected DataInput in;"	>10-14+13;
"protected DataInput in;"	"protected DataInputStream din;"	>19+6>1+1>3;
"protected DataInputStream din;"	"protected DataOutput out;"	>14-16+11;
"protected DataOutput out;"	"protected Deque<OpQueue> chain = new ArrayDeque<OpQueue>();"	>11-14+48;
"protected Deque<OpQueue> chain = new ArrayDeque<OpQueue>();"	"protected ExecutorService worker;"	>10-49+23;
"protected ExecutorService worker;"	"protected FileInputStream in;"	>10-23+19;
"protected FileInputStream in;"	"protected Future<OpQueue> source;"	>11-18+22;
"protected Future<OpQueue> source;"	"protected Graph graph;"	>10-23+12;
"protected Graph graph;"	"protected Graph initialValue() {"	>16-6+16;
"protected Graph initialValue() {"	"protected GraphFactory graphFactory;"	>15-17+21;
"protected GraphFactory graphFactory;"	"protected Header readHeader(DataInputStream in, Serialization serial) throws IOException {"	>10-26+80;
"protected Header readHeader(DataInputStream in, Serialization serial) throws IOException {"	"protected InputStream in;"	>10-22>14-44+1;
"protected InputStream in;"	"protected InputStream orig;"	>22-3+5;
"protected InputStream orig;"	"protected InputStream target;"	>22-5+7;
"protected InputStream target;"	"protected List<Op> filtering = new ArrayList<Op>();"	>10-19+41;
"protected List<Op> filtering = new ArrayList<Op>();"	"protected List<Op> ops = new ArrayList<Op>();"	>19-9+3>23;
"protected List<Op> ops = new ArrayList<Op>();"	"protected Op iterNext;"	>10-35+12;
"protected Op iterNext;"	"protected OpQueue input;"	>12-8+10>2;
"protected OpQueue input;"	"protected OpQueue source;"	>18-6+7;
"protected OpQueue source;"	"protected OutputStream out;"	>11-14+16;
"protected OutputStream out;"	"protected PushbackInputStream in;"	>10-3+10>10-4+3;
"protected PushbackInputStream in;"	"protected PushbufferInputStream pin;"	>15-3+5>12+1>3;
"protected PushbufferInputStream pin;"	"protected RandomInput in;"	>9-22>1+8>1+3>3;
"protected RandomInput in;"	"protected Runnable createTask() {"	>11-14+22;
"protected Runnable createTask() {"	"protected Runnable task;"	>19-14+5;
"protected Runnable task;"	"protected Serialization serial = DefaultSerialization.getInstance();"	>10-14+58;
"protected Serialization serial = DefaultSerialization.getInstance();"	"protected Serialization serial = null;"	>33-35+5;
"protected Serialization serial = null;"	"protected Serialization serial;"	>29-7>2;
"protected Serialization serial;"	"protected ThreadFactory workerFactory(final OpQueue source) {"	>10-21+51;
"protected ThreadFactory workerFactory(final OpQueue source) {"	"protected ThreadLocal<Graph> graphs = new ThreadLocal<Graph>() {"	>16-40+2>1+26>1+15>3;
"protected ThreadLocal<Graph> graphs = new ThreadLocal<Graph>() {"	"protected ThreadPoolExecutor pool;"	>16-48+18;
"protected ThreadPoolExecutor pool;"	"protected TreeMap<Long, byte[]> deletes = new TreeMap<Long, byte[]>();"	>11-23+59;
"protected TreeMap<Long, byte[]> deletes = new TreeMap<Long, byte[]>();"	"protected boolean flush() {"	>10-60+17;
"protected boolean flush() {"	"protected boolean pull() {"	>18-5+4>4;
"protected boolean pull() {"	"protected boolean require(int count) {"	>18-4+7>1+9>3;
"protected boolean require(int count) {"	"protected byte[] flags;"	>11-27+12;
"protected byte[] flags;"	"protected byte[] readChunk(ByteBuffer in) {"	>17-6+26;
"protected byte[] readChunk(ByteBuffer in) {"	"protected byte[] readChunk(InputStream in) {"	>27-9+7>1+3>6;
"protected byte[] readChunk(InputStream in) {"	"protected byte[] xval;"	>17-27+5;
"protected byte[] xval;"	"protected byte[] yval;"	>17-1+1>4;
"protected byte[] yval;"	"protected int chunk;"	>10-12+10;
"protected int chunk;"	"protected int maxkeys;"	>14-6+8;
"protected int maxkeys;"	"protected int minlength;"	>15-7+9;
"protected int minlength;"	"protected long lookbehind;"	>10-14+16;
"protected long lookbehind;"	"protected long mark = -1;"	>15-11+10;
"protected long mark = -1;"	"protected long pos;"	>15-10+4;
"protected long pos;"	"protected short[] lengths;"	>10-6+2>1+11>2;
"protected short[] lengths;"	"protected static Set<String> gatherStrings() throws IOException {"	>11-15+54;
"protected static Set<String> gatherStrings() throws IOException {"	"protected static Stats computeStats(Diff diff) throws IOException {"	>18-23+16>2+9>22;
"protected static Stats computeStats(Diff diff) throws IOException {"	"protected static final Comparator<Op> OP_ORDER = new Comparator<Op>() {"	>17-45+1>1+12>1+17>1+19>2;
"protected static final Comparator<Op> OP_ORDER = new Comparator<Op>() {"	"protected static void writeHeader(Serialization serial, Stats stats, Optional opt, DataOutput out) throws IOException {"	>17-50+16>1+63>1+19>2;
"protected static void writeHeader(Serialization serial, Stats stats, Optional opt, DataOutput out) throws IOException {"	"protected void drop(int count) {"	>10-104+10>1+4>1+1>1+2>2;
"protected void drop(int count) {"	"protected void prepare(Future<OpQueue> f) {"	>15-13+10>1+14>3;
"protected void prepare(Future<OpQueue> f) {"	"protected void prepare(Op e) {"	>23-17+4>3;
"protected void prepare(Op e) {"	"public <T extends Diff> T drainTo(T diff) throws IOException {"	-24>1+8>1+3>1+26>1+19>2;
"public <T extends Diff> T drainTo(T diff) throws IOException {"	"public <T extends List<Op>> T drainTo(T c) {"	>18-4+8>14-24+2>2;
"public <T extends List<Op>> T drainTo(T c) {"	"public <T extends OpQueue> T drainTo(T q) {"	>18-8+7>14-1+1>3;
"public <T extends OpQueue> T drainTo(T q) {"	"public <T> T readObject(InputStream in, Class<T> type) throws IOException {"	>9-31+44>1+19>2;
"public <T> T readObject(InputStream in, Class<T> type) throws IOException {"	"public <T> T readObject(InputStream in, Class<T> type) throws IOException;"	>73-2+1;
"public <T> T readObject(InputStream in, Class<T> type) throws IOException;"	"public <T> void writeObject(OutputStream out, Class<T> type, T object)"	>11-15+20>10-2+3>15-21+11;
"public <T> void writeObject(OutputStream out, Class<T> type, T object)"	"public <T> void writeObject(OutputStream out, Class<T> type, T object) throws IOException;"	>70+20;
"public <T> void writeObject(OutputStream out, Class<T> type, T object) throws IOException;"	"public BadiffFileDiff(File file) {"	>7-83+27;
"public BadiffFileDiff(File file) {"	"public BadiffFileDiff(File file, Serialization serial) {"	>31+22>3;
"public BadiffFileDiff(File file, Serialization serial) {"	"public BadiffFileDiff(File parent, String child) {"	>27-24+1>1+16>1+1>3;
"public BadiffFileDiff(File parent, String child) {"	"public BadiffFileDiff(File parent, String child, Serialization serial) {"	>47+22>3;
"public BadiffFileDiff(File parent, String child, Serialization serial) {"	"public BadiffFileDiff(String parent, String child) {"	>22-4+6>21-22>3;
"public BadiffFileDiff(String parent, String child) {"	"public BadiffFileDiff(String parent, String child, Serialization serial) {"	>49+22>3;
"public BadiffFileDiff(String parent, String child, Serialization serial) {"	"public BadiffFileDiff(String pathname) {"	>31-40+6>3;
"public BadiffFileDiff(String pathname) {"	"public BadiffFileDiff(String pathname, Serialization serial) {"	>37+22>3;
"public BadiffFileDiff(String pathname, Serialization serial) {"	"public BadiffFileDiff(URI uri) {"	>22-37+7>3;
"public BadiffFileDiff(URI uri) {"	"public BadiffFileDiff(URI uri, Serialization serial) {"	>29+22>3;
"public BadiffFileDiff(URI uri, Serialization serial) {"	"public BufferChunkingOpQueue(ByteBuffer orig, ByteBuffer target) {"	>8-43+55>3;
"public BufferChunkingOpQueue(ByteBuffer orig, ByteBuffer target) {"	"public BufferChunkingOpQueue(ByteBuffer orig, ByteBuffer target, int chunk) {"	>63+11>3;
"public BufferChunkingOpQueue(ByteBuffer orig, ByteBuffer target, int chunk) {"	"public Byte read(DataInput in) throws IOException {"	>8-66+21>1+19>2;
"public Byte read(DataInput in) throws IOException {"	"public ByteArrayDiffsTest() {"	>11-38+16>2;
"public ByteArrayDiffsTest() {"	"public ByteBufferRandomInput(ByteBuffer buf) {"	>11-13+16>2+14>3;
"public ByteBufferRandomInput(ByteBuffer buf) {"	"public ByteBufferRandomInput(byte[] buf) {"	>29-10+6>7;
"public ByteBufferRandomInput(byte[] buf) {"	"public ChainOpQueue(OpQueue... links) {"	>7-32+29>3;
"public ChainOpQueue(OpQueue... links) {"	"public ChunkingOpQueue(OpQueue source) {"	>9-1+3>2+1>15-8+1>1+5>3;
"public ChunkingOpQueue(OpQueue source) {"	"public ChunkingOpQueue(OpQueue source, int chunk) {"	>37+11>3;
"public ChunkingOpQueue(OpQueue source, int chunk) {"	"public Class read(DataInput in) throws IOException {"	>8-40+22>1+19>2;
"public Class read(DataInput in) throws IOException {"	"public Class<T> type() {"	>12-38+10>2;
"public Class<T> type() {"	"public CoalescingOpQueue(OpQueue source) {"	>8-10+10>1+4>2+14>3;
"public CoalescingOpQueue(OpQueue source) {"	"public CompactingOpQueue(OpQueue source) {"	>9-4+3>1+1>28;
"public CompactingOpQueue(OpQueue source) {"	"public DataInputInputStream(DataInput in) {"	>7-31+17>1+15>3;
"public DataInputInputStream(DataInput in) {"	"public DataOutputOutputStream(DataOutput out) {"	>11-7+9>14-8+10>3;
"public DataOutputOutputStream(DataOutput out) {"	"public Deque<OpQueue> getChain() {"	>8-34+10>1+5>1+6>3;
"public Deque<OpQueue> getChain() {"	"public EditGraph(int size) {"	>7-23+9>1+8>3;
"public EditGraph(int size) {"	"public FileBadiffOpQueue() throws IOException {"	>7-17+16>1+1>1+19>2;
"public FileBadiffOpQueue() throws IOException {"	"public FileDiff read(DataInput in) throws IOException {"	>11-12+6>1+2>1+12>22;
"public FileDiff read(DataInput in) throws IOException {"	"public FileDiff(File file) {"	>15-38+11>2;
"public FileDiff(File file) {"	"public FileDiff(File file, Serialization serialization) {"	>25+29>3;
"public FileDiff(File file, Serialization serialization) {"	"public FileDiff(File parent, String child) {"	>21-32+12>1+7>3;
"public FileDiff(File parent, String child) {"	"public FileDiff(File parent, String child, Serialization serialization) {"	>41+29>3;
"public FileDiff(File parent, String child, Serialization serialization) {"	"public FileDiff(String parent, String child) {"	>16-4+6>21-29>3;
"public FileDiff(String parent, String child) {"	"public FileDiff(String parent, String child, Serialization serialization) {"	>43+29>3;
"public FileDiff(String parent, String child, Serialization serialization) {"	"public FileDiff(String pathname) {"	>25-46+2>1+3>3;
"public FileDiff(String pathname) {"	"public FileDiff(String pathname, Serialization serialization) {"	>31+29>3;
"public FileDiff(String pathname, Serialization serialization) {"	"public FileDiff(URI uri) {"	>16-44+7>3;
"public FileDiff(URI uri) {"	"public FileDiff(URI uri, Serialization serialization) {"	>23+29>3;
"public FileDiff(URI uri, Serialization serialization) {"	"public FileOpQueue() throws IOException {"	>11-41+8>1+19>2;
"public FileOpQueue() throws IOException {"	"public FileRandomInput(File file) throws IOException {"	>10-7>1+11>1+9>22;
"public FileRandomInput(File file) throws IOException {"	"public FileRandomInput(File file, boolean load) throws IOException {"	>32+14>22;
"public FileRandomInput(File file, boolean load) throws IOException {"	"public FilterOpQueue(OpQueue source) {"	>10-56+26>2;
"public FilterOpQueue(OpQueue source) {"	"public FutureOpQueue(Future<OpQueue> source) {"	>8-4+3>1+1>8+7>7+1>10;
"public FutureOpQueue(Future<OpQueue> source) {"	"public GdiffOpQueue(RandomInput orig, RandomInput ext) throws IOException {"	>7-6+5>8-21+30>1+2>1+19>2;
"public GdiffOpQueue(RandomInput orig, RandomInput ext) throws IOException {"	"public Graph newGraph(int capacity) {"	>8-64+15>1+11>2;
"public Graph newGraph(int capacity) {"	"public Graph newGraph(int capacity);"	>35-2+1;
"public Graph newGraph(int capacity);"	"public GraphOpQueue() {"	>12-24+11;
"public GraphOpQueue() {"	"public GraphOpQueue(OpQueue source, Graph graph) {"	>20+27>3;
"public GraphOpQueue(OpQueue source, Graph graph) {"	"public GraphOpQueue(OpQueue source, int chunk) {"	>36-10+5>1+3>3;
"public GraphOpQueue(OpQueue source, int chunk) {"	"public Header header() throws IOException {"	>7-38+14>1+19>2;
"public Header header() throws IOException {"	"public InertialGraph(int capacity) {"	>7-33+15>1+11>2;
"public InertialGraph(int capacity) {"	"public Integer read(DataInput in) throws IOException {"	>9-24+23>1+19>2;
"public Integer read(DataInput in) throws IOException {"	"public List<Op> rlist() {"	>7-45+16>2;
"public List<Op> rlist() {"	"public ListOpQueue(Iterator<Op> ops) {"	>11+16>5-6+3>3;
"public ListOpQueue(Iterator<Op> ops) {"	"public ListOpQueue(List<Op> ops) {"	>19-8+4>11;
"public ListOpQueue(List<Op> ops) {"	"public Long read(DataInput in) throws IOException {"	>8-23+21>1+19>2;
"public Long read(DataInput in) throws IOException {"	"public MemoryDiff read(DataInput in) throws IOException {"	>7-4+10>40;
"public MemoryDiff read(DataInput in) throws IOException {"	"public MemoryDiff() {}"	>17-38+2>2+1;
"public MemoryDiff() {}"	"public MemoryDiff(Iterator<Op> ops) {"	>18+16>3-1;
"public MemoryDiff(Iterator<Op> ops) {"	"public NonClosingInputStream(InputStream in) {"	>7-26+6>1+29>3;
"public NonClosingInputStream(InputStream in) {"	"public NonClosingOutputStream(OutputStream out) {"	>17-2+3>10-2+3>10-2+3>3;
"public NonClosingOutputStream(OutputStream out) {"	"public NoopOutputStream() {"	>9-8+2>13-16>3;
"public NoopOutputStream() {"	"public OneWayOpQueue(OpQueue source) {"	>7-16+13>1+14>3;
"public OneWayOpQueue(OpQueue source) {"	"public Op next() {"	>8-26+3>1+3>3;
"public Op next() {"	"public Op poll() {"	>10-4+4>4;
"public Op poll() {"	"public Op read(DataInput in) throws IOException {"	>10-4+4>1+12>1+19>2;
"public Op read(DataInput in) throws IOException {"	"public Op() {}"	>9-38+2>2+1;
"public Op() {}"	"public Op(byte op, int run, byte[] data) {"	>10+29>3-1;
"public Op(byte op, int run, byte[] data) {"	"public OpQueue call() throws Exception {"	>9-29+7>1+3>1+17>2;
"public OpQueue call() throws Exception {"	"public OpQueue importDiff(RandomInput orig, RandomInput ext)"	>15-25+45;
"public OpQueue importDiff(RandomInput orig, RandomInput ext)"	"public OpQueue importDiff(RandomInput orig, RandomInput ext) throws IOException {"	>60+21;
"public OpQueue importDiff(RandomInput orig, RandomInput ext) throws IOException {"	"public OpQueue importDiff(RandomInput orig, RandomInput ext) throws IOException;"	>79-2+1;
"public OpQueue importDiff(RandomInput orig, RandomInput ext) throws IOException;"	"public OpQueue queue() throws IOException {"	>15-44+6>20-1+2;
"public OpQueue queue() throws IOException {"	"public OpQueue queue() throws IOException;"	>41-2+1;
"public OpQueue queue() throws IOException;"	"public OpQueue queue() {"	>23-19+1;
"public OpQueue queue() {"	"public OpQueue queue();"	>22-2+1;
"public OpQueue queue();"	"public Optional getOptional() {"	>9-14+22;
"public Optional getOptional() {"	"public ParallelGraphOpQueue(OpQueue source) {"	>7-18+3>1+3>1+12>1+14>3;
"public ParallelGraphOpQueue(OpQueue source) {"	"public ParallelGraphOpQueue(OpQueue source, GraphFactory graphFactory) {"	>42+27>3;
"public ParallelGraphOpQueue(OpQueue source, GraphFactory graphFactory) {"	"public ParallelGraphOpQueue(OpQueue source, int workers, int chunk, GraphFactory graphFactory) {"	>42+24>30;
"public ParallelGraphOpQueue(OpQueue source, int workers, int chunk, GraphFactory graphFactory) {"	"public PumpingOpQueue(OpQueue source) {"	>8-12+6>22-51>3;
"public PumpingOpQueue(OpQueue source) {"	"public PumpingOpQueue(OpQueue source, int capacity) {"	>36+14>3;
"public PumpingOpQueue(OpQueue source, int capacity) {"	"public PushbufferInputStream(InputStream in, int size) {"	>9-41+44>3;
"public PushbufferInputStream(InputStream in, int size) {"	"public RandomInputStream(ByteBuffer buf) {"	>7-10+6>12-23+8>1+5>3;
"public RandomInputStream(ByteBuffer buf) {"	"public RandomInputStream(File file) throws IOException {"	>25-13+5>1+3>1+19>2;
"public RandomInputStream(File file) throws IOException {"	"public RandomInputStream(InputStream in, int bufSize) {"	>25-28+17>1+10>2;
"public RandomInputStream(InputStream in, int bufSize) {"	"public RandomInputStream(RandomInput in) {"	>25+6>5-22+3>3;
"public RandomInputStream(RandomInput in) {"	"public RandomInputStream(byte[] buf) {"	>25-14+10>3;
"public RandomInputStream(byte[] buf) {"	"public ReferenceOpQueue(OpQueue source, int size) {"	>8-26+1>1+38>3;
"public ReferenceOpQueue(OpQueue source, int size) {"	"public ReplaceOpQueue(byte[] orig, byte[] target) {"	>9-5+3>10-23+24>1+1>3;
"public ReplaceOpQueue(byte[] orig, byte[] target) {"	"public RewindingOpQueue(OpQueue source) {"	>8-5>1+7>8-26+14>3;
"public RewindingOpQueue(OpQueue source) {"	"public RewindingOpQueue(OpQueue source, long lookbehind) {"	>38+17>3;
"public RewindingOpQueue(OpQueue source, long lookbehind) {"	"public RewindingOpQueue(OpQueue source, long lookbehind, int minlength) {"	>55+15>3;
"public RewindingOpQueue(OpQueue source, long lookbehind, int minlength) {"	"public RewindingOpQueue(OpQueue source, long lookbehind, int minlength, int maxkeys) {"	>70+13>3;
"public RewindingOpQueue(OpQueue source, long lookbehind, int minlength, int maxkeys) {"	"public RuntimeIOException(IOException cause) {"	>8-74+33>1+1>3;
"public RuntimeIOException(IOException cause) {"	"public RuntimeIOException(String message, IOException cause) {"	>26+16>20;
"public RuntimeIOException(String message, IOException cause) {"	"public Serialization getSerial() {"	>7-51+18>1+5>3;
"public Serialization getSerial() {"	"public Serializer(Class<T> type) {"	>15-15+2>1+13>3;
"public Serializer(Class<T> type) {"	"public Stats getStats() {"	>8-22+6>1+7>3;
"public Stats getStats() {"	"public Stats stats() throws IOException {"	>13-4+1>6+19>2;
"public Stats stats() throws IOException {"	"public StreamChunkingOpQueue(InputStream orig, InputStream target) {"	>8-27>1+9>1+22>1+6>1+17>2;
"public StreamChunkingOpQueue(InputStream orig, InputStream target) {"	"public StreamChunkingOpQueue(InputStream orig, InputStream target, int chunk) {"	>65+11>3;
"public StreamChunkingOpQueue(InputStream orig, InputStream target, int chunk) {"	"public StreamQueueable(InputStream in) {"	>13-10>4+4>14-35+2>3;
"public StreamQueueable(InputStream in) {"	"public StreamQueueable(InputStream in, Serialization serial) {"	>37+22>3;
"public StreamQueueable(InputStream in, Serialization serial) {"	"public StreamRandomInput(InputStream in, int size) {"	>13-9+11>17-20+8>3;
"public StreamRandomInput(InputStream in, int size) {"	"public StreamStoreable(OutputStream out) {"	>13-14+13>10-12+3>3;
"public StreamStoreable(OutputStream out) {"	"public StreamStoreable(OutputStream out, Serialization serial) {"	>39+22>3;
"public StreamStoreable(OutputStream out, Serialization serial) {"	"public String consummerize() {"	>10-51+17>3;
"public String consummerize() {"	"public String getHashAlgorithm() {"	>14-11+1>1+14>4;
"public String getHashAlgorithm() {"	"public String read(DataInput in) throws IOException {"	>14-16+4>1+12>1+19>2;
"public String read(DataInput in) throws IOException {"	"public String readLine() throws IOException {"	>18-11+1>2+2>22;
"public String readLine() throws IOException {"	"public String readUTF() throws IOException {"	>18-4+3>23;
"public String readUTF() throws IOException {"	"public String toString() {"	>14-26+1>1+4>1+3>2;
"public String toString() {"	"public Thread newThread(Runnable r) {"	>7-15+16>1+10>3;
"public Thread newThread(Runnable r) {"	"public UnchunkingOpQueue(OpQueue source) {"	>7-24+24>2+3>1+2>3;
"public UnchunkingOpQueue(OpQueue source) {"	"public UndoOpQueue(OpQueue source) {"	>9-8+2>25;
"public UndoOpQueue(OpQueue source) {"	"public abstract T read(DataInput in) throws IOException;"	>7-29+49;
"public abstract T read(DataInput in) throws IOException;"	"public abstract void write(DataOutput out, T obj) throws IOException;"	>16-19+32>21;
"public abstract void write(DataOutput out, T obj) throws IOException;"	"public boolean hasNext() {"	>7-62+19;
"public boolean hasNext() {"	"public boolean markSupported() {"	>15-6+10>1+2>4;
"public boolean markSupported() {"	"public boolean offer(Op e) {"	>15-13+5>1+4>3;
"public boolean offer(Op e) {"	"public boolean offer(OpQueue q) {"	>23-1+4>1+2>3;
"public boolean offer(OpQueue q) {"	"public boolean readBoolean() throws IOException {"	>15-15+12>1+19>2;
"public boolean readBoolean() throws IOException {"	"public byte getOp() {"	>8-39+11>2;
"public byte getOp() {"	"public byte readByte() throws IOException {"	>12-5+8>2+19>2;
"public byte readByte() throws IOException {"	"public byte[] getData() {"	>11-30+12>2;
"public byte[] getData() {"	"public byte[] getMagic() {"	>16-3>1+1>1+3>4;
"public byte[] getMagic() {"	"public byte[] getPostHash() {"	>17-5+8>4;
"public byte[] getPostHash() {"	"public byte[] getPreHash() {"	>18-3+2>8;
"public byte[] getPreHash() {"	"public byte[] read(DataInput in) throws IOException {"	>14-10+4>1+12>1+19>2;
"public byte[] read(DataInput in) throws IOException {"	"public char readChar() throws IOException {"	>7-24+14>22;
"public char readChar() throws IOException {"	"public class BadiffCli {"	>8-33+14>2;
"public class BadiffCli {"	"public class BadiffFileDiff extends File implements Diff, Serialized {"	>19-1+44>2+3>2;
"public class BadiffFileDiff extends File implements Diff, Serialized {"	"public class BadiffFormat implements InputFormat, OutputFormat {"	>20-20+5>12-16+25>2;
"public class BadiffFormat implements InputFormat, OutputFormat {"	"public class BehaviorTestDataGenerator {"	>14-46+20>2+2>2;
"public class BehaviorTestDataGenerator {"	"public class BufferChunkingOpQueue extends OpQueue {"	>14-23+4>1+31>2;
"public class BufferChunkingOpQueue extends OpQueue {"	"public class ByteArrayDiffs {"	>14-35+2>1+10>2;
"public class ByteArrayDiffs {"	"public class ByteArrayDiffsTest {"	>27+4>2;
"public class ByteArrayDiffsTest {"	"public class ByteBufferRandomInput implements RandomInput {"	>17-11+24>1+2>1+11>3;
"public class ByteBufferRandomInput implements RandomInput {"	"public class ChainOpQueue extends OpQueue {"	>13-40+4>1+1>1+3>1+4>1+12>2;
"public class ChainOpQueue extends OpQueue {"	"public class ChunkingOpQueue extends FilterOpQueue {"	>15-1+3>2+1>16+6>9;
"public class ChunkingOpQueue extends FilterOpQueue {"	"public class CoalescingOpQueue extends FilterOpQueue {"	>14-4+6>34;
"public class CoalescingOpQueue extends FilterOpQueue {"	"public class CompactingOpQueue extends FilterOpQueue {"	>15-4+3>1+1>34;
"public class CompactingOpQueue extends FilterOpQueue {"	"public class DataInputInputStream extends InputStream {"	>13-15+12>1+4>1+2>9-11+3>1+4>1+2>2;
"public class DataInputInputStream extends InputStream {"	"public class DataOutputOutputStream extends OutputStream {"	>17-7+9>18-2+3>11;
"public class DataOutputOutputStream extends OutputStream {"	"public class DefaultFileDiffTest {"	>14-42+18>2;
"public class DefaultFileDiffTest {"	"public class DefaultSerialization implements Serialization {"	>20-9+20>1+2>1+10>1+3>2;
"public class DefaultSerialization implements Serialization {"	"public class DefaultSerializationTest {"	>20-25>13+4>2;
"public class DefaultSerializationTest {"	"public class Diffs {"	>14-23+4>2;
"public class Diffs {"	"public class DiffsTest {"	>18+4>2;
"public class DiffsTest {"	"public class Digests {"	>15-4+1>3+1>2;
"public class Digests {"	"public class EditGraph implements Graph {"	>13-5+18>2+6>2;
"public class EditGraph implements Graph {"	"public class EditGraphBehaviorTest {"	>22-16+2>1+9>2;
"public class EditGraphBehaviorTest {"	"public class EmptyInputStream extends InputStream {"	>14-17+19>1+2>1+7>1+4>2;
"public class EmptyInputStream extends InputStream {"	"public class FileDiff extends File implements Diff, Serialized {"	>13-16+8>9-10+10>1+21>2;
"public class FileDiff extends File implements Diff, Serialized {"	"public class FileDiffs {"	>21-41+1>2;
"public class FileDiffs {"	"public class FileDiffsTest {"	>22+4>2;
"public class FileDiffsTest {"	"public class FileRandomInput extends ByteBufferRandomInput {"	>17-6+15>1+2>1+21>3;
"public class FileRandomInput extends ByteBufferRandomInput {"	"public class FilterOpQueue extends OpQueue {"	>16-11>1+9>9-21+7>2;
"public class FilterOpQueue extends OpQueue {"	"public class FutureOpQueue extends OpQueue {"	>14-4+3>1+1>25;
"public class FutureOpQueue extends OpQueue {"	"public class GdiffFormat implements OutputFormat, InputFormat {"	>13-28+18>1+29>2;
"public class GdiffFormat implements OutputFormat, InputFormat {"	"public class GraphOpQueue extends FilterOpQueue {"	>14-45+1>1+21>1+9>2;
"public class GraphOpQueue extends FilterOpQueue {"	"public class GraphOpQueueTest {"	>25-21+1>1+2>2;
"public class GraphOpQueueTest {"	"public class InertialGraph implements Graph {"	>11+25>7-11>2;
"public class InertialGraph implements Graph {"	"public class InertialGraphBehaviorTest {"	>26-16+2>1+9>2;
"public class InertialGraphBehaviorTest {"	"public class IntertialGraphTest {"	>15+1>11-8>6;
"public class IntertialGraphTest {"	"public class ListOpQueue extends OpQueue {"	>13-16+2>1+11>1+12>2;
"public class ListOpQueue extends OpQueue {"	"public class MemoryDiff implements Diff, Serialized {"	>13-26+36>1+1>2;
"public class MemoryDiff implements Diff, Serialized {"	"public class MemoryDiffs {"	>23-28+1>2;
"public class MemoryDiffs {"	"public class NonClosingInputStream extends FilterInputStream {"	>13-10+28>1+18>2;
"public class NonClosingInputStream extends FilterInputStream {"	"public class NonClosingOutputStream extends FilterOutputStream {"	>23-2+3>24-2+3>11;
"public class NonClosingOutputStream extends FilterOutputStream {"	"public class NoopOutputStream extends OutputStream {"	>15-8+2>21-6>14;
"public class NoopOutputStream extends OutputStream {"	"public class OneWayOpQueue extends FilterOpQueue {"	>13-16+13>9-12+13>2;
"public class OneWayOpQueue extends FilterOpQueue {"	"public class Op implements Applyable, Serialized {"	>14-33+32>1+1>2;
"public class Op implements Applyable, Serialized {"	"public class OpQueue implements Applyable, Iterator<Op> {"	>15+5>23-10+12>2;
"public class OpQueue implements Applyable, Iterator<Op> {"	"public class ParallelGraphOpQueue extends FilterOpQueue {"	>13+35>7-35>2;
"public class ParallelGraphOpQueue extends FilterOpQueue {"	"public class ParallelGraphOpQueueTest {"	>33-21+1>1+2>2;
"public class ParallelGraphOpQueueTest {"	"public class PumpingOpQueue extends OpQueue {"	>14-12+22>7-4>2;
"public class PumpingOpQueue extends OpQueue {"	"public class PushbufferInputStream extends InputStream {"	>15-8+3>1+2>1+4>1+4>1+2>9-5+3>1+4>1+2>2;
"public class PushbufferInputStream extends InputStream {"	"public class RandomInputStream extends InputStream implements Random {"	>13-10+6>30+18>3;
"public class RandomInputStream extends InputStream implements Random {"	"public class ReferenceOpQueue extends FilterOpQueue {"	>14-16+15>9-29+13>2;
"public class ReferenceOpQueue extends FilterOpQueue {"	"public class ReplaceOpQueue extends OpQueue {"	>15-5+3>18-6>9;
"public class ReplaceOpQueue extends OpQueue {"	"public class RewindingOpQueue extends FilterOpQueue {"	>14-5>1+7>16+6>9;
"public class RewindingOpQueue extends FilterOpQueue {"	"public class RewindingOpQueueTest {"	>29-21+1>1+2>2;
"public class RewindingOpQueueTest {"	"public class RuntimeIOException extends RuntimeException {"	>14-16+21>1+2>1+13>1+3>2;
"public class RuntimeIOException extends RuntimeException {"	"public class Serials {"	>13-43+7>2;
"public class Serials {"	"public class SmallNumberSerialization implements Serialization {"	>13+11>6+17>1+14>2;
"public class SmallNumberSerialization implements Serialization {"	"public class StreamChunkingOpQueue extends OpQueue {"	>14-47+25>1+10>2;
"public class StreamChunkingOpQueue extends OpQueue {"	"public class StreamQueueable implements Queueable {"	>19-25+12>1+8>4+4>3;
"public class StreamQueueable implements Queueable {"	"public class StreamRandomInput implements RandomInput {"	>19-9+11>12-9+11>2;
"public class StreamRandomInput implements RandomInput {"	"public class StreamStoreable implements Storeable {"	>19-10+1>1+7>12-10+1>1+7>2;
"public class StreamStoreable implements Storeable {"	"public class Streams {"	>19-30+1>2;
"public class Streams {"	"public class UnchunkingOpQueue extends FilterOpQueue {"	>13-6+24>1+14>2;
"public class UnchunkingOpQueue extends FilterOpQueue {"	"public class UndoOpQueue extends FilterOpQueue {"	>15-8+2>31;
"public class UndoOpQueue extends FilterOpQueue {"	"public double readDouble() throws IOException {"	>7-35+2>1+5>1+4>1+18>1+5>2;
"public double readDouble() throws IOException {"	"public final int DEFAULT_CHUNK = 1024;"	>7-40+31;
"public final int DEFAULT_CHUNK = 1024;"	"public float readFloat() throws IOException {"	>8-30+37;
"public float readFloat() throws IOException {"	"public int available() throws IOException {"	>7-14+2>1+10>23;
"public int available() throws IOException {"	"public int available() throws IOException;"	>41-2+1;
"public int available() throws IOException;"	"public int compare(Op o1, Op o2) {"	>11-31+23;
"public int compare(Op o1, Op o2) {"	"public int getRun() {"	>11-20+7>3;
"public int getRun() {"	"public int getVersion() {"	>14-2+6>5;
"public int getVersion() {"	"public int read() throws IOException {"	>11-10+4>2+19>2;
"public int read() throws IOException {"	"public int read() throws IOException;"	>36-2+1;
"public int read() throws IOException;"	"public int read(byte[] b) throws IOException {"	>16+8>20-1+2;
"public int read(byte[] b) throws IOException {"	"public int read(byte[] b) throws IOException;"	>44-2+1;
"public int read(byte[] b) throws IOException;"	"public int read(byte[] b, int off, int len) throws IOException {"	>24+18>20-1+2;
"public int read(byte[] b, int off, int len) throws IOException {"	"public int read(byte[] b, int off, int len) throws IOException;"	>62-2+1;
"public int read(byte[] b, int off, int len) throws IOException;"	"public int readInt() throws IOException {"	>15-26+1>1+2>20-1+2;
"public int readInt() throws IOException {"	"public int readUnsignedByte() throws IOException {"	>15-1+5>1+4>1+1>23;
"public int readUnsignedByte() throws IOException {"	"public int readUnsignedShort() throws IOException {"	>23-4+5>23;
"public int readUnsignedShort() throws IOException {"	"public int skipBytes(int n) throws IOException {"	>11-16+6>1+2>1+5>22;
"public int skipBytes(int n) throws IOException {"	"public interface Applyable {"	>10-36+16>2;
"public interface Applyable {"	"public interface Diff extends Applyable, Storeable, Queueable {"	>16+13>6+22>6;
"public interface Diff extends Applyable, Storeable, Queueable {"	"public interface Graph {"	>17-44+5>2;
"public interface Graph {"	"public interface InputFormat {"	>17-5+11>2;
"public interface InputFormat {"	"public interface OutputFormat {"	>17-2+3>11;
"public interface OutputFormat {"	"public interface Queueable {"	>17-12+9>2;
"public interface Queueable {"	"public interface Random {"	>17-9+6>2;
"public interface Random {"	"public interface RandomInput extends DataInput, Random {"	>16+31>9;
"public interface RandomInput extends DataInput, Random {"	"public interface Serialization {"	>17-37+13>2;
"public interface Serialization {"	"public interface Serialized {"	>25-5+2>2;
"public interface Serialized {"	"public interface Storeable {"	>18-9+8>2;
"public interface Storeable {"	"public long first() {"	>7-19+12>2;
"public long first() {"	"public long first();"	>19-2+1;
"public long first();"	"public long getDeleteCount() {"	>12-8+18;
"public long getDeleteCount() {"	"public long getFlags() {"	>14-11>1+5>4;
"public long getFlags() {"	"public long getInputSize() {"	>15-5+9>4;
"public long getInputSize() {"	"public long getInsertCount() {"	>17-6+1>1+7>4;
"public long getInsertCount() {"	"public long getNextCount() {"	>15-5+3>10;
"public long getNextCount() {"	"public long getOutputSize() {"	>15-8+5>1+4>4;
"public long getOutputSize() {"	"public long getRewindCount() {"	>15-9+1>1+9>4;
"public long getRewindCount() {"	"public long last() {"	>12-13+3>5;
"public long last() {"	"public long last();"	>18-2+1;
"public long last();"	"public long position() {"	>12-7+12;
"public long position() {"	"public long position();"	>22-2+1;
"public long position();"	"public long readLong() throws IOException {"	>12-11+31;
"public long readLong() throws IOException {"	"public long readLong(DataInput in) throws IOException {"	>21+12>22;
"public long readLong(DataInput in) throws IOException {"	"public long skip(long count) throws IOException {"	>11-19>1+2>1+10>1+1>22;
"public long skip(long count) throws IOException {"	"public long skip(long count) throws IOException;"	>47-2+1;
"public long skip(long count) throws IOException;"	"public long skip(long n) throws IOException {"	>22-5+1>20-1+2;
"public long skip(long n) throws IOException {"	"public short readShort() throws IOException {"	>7-16+16>22;
"public short readShort() throws IOException {"	"public static <T> T deserialize(Serialization serial, Class<T> type, byte[] buf) {"	>8-31+33>4+35>2;
"public static <T> T deserialize(Serialization serial, Class<T> type, byte[] buf) {"	"public static <T> byte[] serialize(Serialization serial, Class<T> type, T object) {"	>18-3+3>1+3>47-10+8>3;
"public static <T> byte[] serialize(Serialization serial, Class<T> type, T object) {"	"public static DefaultSerialization getInstance() {"	>14-21+7>14-30+6>1+5>3;
"public static DefaultSerialization getInstance() {"	"public static File apply(File orig, Diff diff) throws IOException {"	>14-31+3>1+6>1+20>1+19>2;
"public static File apply(File orig, Diff diff) throws IOException {"	"public static File undo(File target, Diff diff) throws IOException {"	>19-13+6>1+6>1+2>33;
"public static File undo(File target, Diff diff) throws IOException {"	"public static FileDiff diff(File orig, File target) throws IOException {"	>18-19>9+23>22;
"public static FileDiff diff(File orig, File target) throws IOException {"	"public static FileDiff mdiff(File orig, File target) throws IOException {"	>23+1>49;
"public static FileDiff mdiff(File orig, File target) throws IOException {"	"public static FileDiff udiff(Diff diff) throws IOException {"	>23-28+15>22;
"public static FileDiff udiff(Diff diff) throws IOException {"	"public static FileDiff udiff(File orig, File target) throws IOException {"	>29-9+22>22;
"public static FileDiff udiff(File orig, File target) throws IOException {"	"public static FileDiff undo(Diff diff) throws IOException {"	>24+9>4-23>22;
"public static FileDiff undo(Diff diff) throws IOException {"	"public static InputStream asStream(DataInput in) {"	>14-42+32>1+1>2;
"public static InputStream asStream(DataInput in) {"	"public static MemoryDiff diff(byte[] orig, byte[] target) {"	>14-33+42>3;
"public static MemoryDiff diff(byte[] orig, byte[] target) {"	"public static MemoryDiff udiff(Diff diff) throws IOException {"	>20+11>9-27>1+19>2;
"public static MemoryDiff udiff(Diff diff) throws IOException {"	"public static MemoryDiff udiff(byte[] orig, byte[] target) {"	>31-29+27>2;
"public static MemoryDiff udiff(byte[] orig, byte[] target) {"	"public static MemoryDiff undo(Diff diff) throws IOException {"	>26+9>4-27>1+19>2;
"public static MemoryDiff undo(Diff diff) throws IOException {"	"public static MessageDigest defaultDigest() {"	>16-43+27>2;
"public static MessageDigest defaultDigest() {"	"public static MessageDigest digest(String algorithm) {"	>29-7>6+16>3;
"public static MessageDigest digest(String algorithm) {"	"public static OpQueue improved(OpQueue q) {"	>14-36+9>1+16>3;
"public static OpQueue improved(OpQueue q) {"	"public static OpQueue queue(InputStream orig, InputStream target) {"	>14-17>9+41>3;
"public static OpQueue queue(InputStream orig, InputStream target) {"	"public static OpQueue queue(byte[] orig, byte[] target) {"	>28-29+19>10;
"public static OpQueue queue(byte[] orig, byte[] target) {"	"public static OutputStream asStream(DataOutput out) {"	>15-37+17>1+16>4;
"public static OutputStream asStream(DataOutput out) {"	"public static SmallNumberSerialization getInstance() {"	>14-34+6>1+24>1+5>3;
"public static SmallNumberSerialization getInstance() {"	"public static String pretty(byte[] digest) {"	>15-34+8>1+3>1+13>3;
"public static String pretty(byte[] digest) {"	"public static byte[] apply(Applyable a, byte[] orig) {"	>14-14>7-5+21>1+8>3;
"public static byte[] apply(Applyable a, byte[] orig) {"	"public static byte[] apply(byte[] orig, Diff diff) {"	>27-13>11+11>3;
"public static byte[] apply(byte[] orig, Diff diff) {"	"public static byte[] apply(byte[] orig, byte[] diff) {"	>40-4+6>8;
"public static byte[] apply(byte[] orig, byte[] diff) {"	"public static byte[] diff(byte[] orig, byte[] target) {"	>21-5+4>21-4+6>3;
"public static byte[] diff(byte[] orig, byte[] target) {"	"public static byte[] digest(File file, MessageDigest digest) throws IOException {"	>23-26+32>2+1>2+19>2;
"public static byte[] digest(File file, MessageDigest digest) throws IOException {"	"public static byte[] udiff(byte[] diff) {"	>21-58+18>2;
"public static byte[] udiff(byte[] diff) {"	"public static byte[] udiff(byte[] orig, byte[] target) {"	>34-4+19>3;
"public static byte[] udiff(byte[] orig, byte[] target) {"	"public static byte[] undo(byte[] diff) {"	>22+11>4-27>3;
"public static byte[] undo(byte[] diff) {"	"public static byte[] undo(byte[] target, Diff diff) throws IOException {"	>32+13>6+19>2;
"public static byte[] undo(byte[] target, Diff diff) throws IOException {"	"public static byte[] undo(byte[] target, byte[] diff) {"	>41-4+6>6-19>2;
"public static byte[] undo(byte[] target, byte[] diff) {"	"public static class Header {"	>14-39+12>2;
"public static class Header {"	"public static class Optional implements Serialized {"	>20-4+21>2+7>2;
"public static class Optional implements Serialized {"	"public static class Stats implements Serialized {"	>20-8+5>24;
"public static class Stats implements Serialized {"	"public static final GraphFactory EDIT_GRAPH = new GraphFactory() {"	>14-33+50>2;
"public static final GraphFactory EDIT_GRAPH = new GraphFactory() {"	"public static final GraphFactory INERTIAL_GRAPH = new GraphFactory() {"	>33-2>1+3>1+3>29;
"public static final GraphFactory INERTIAL_GRAPH = new GraphFactory() {"	"public static final byte DELETE = 0x1;"	>20-50+18;
"public static final byte DELETE = 0x1;"	"public static final byte INSERT = 0x2;"	>25-13+13;
"public static final byte INSERT = 0x2;"	"public static final byte NEXT = 0x3;"	>25-13+11;
"public static final byte NEXT = 0x3;"	"public static final byte STOP = 0x0;"	>25-11+11;
"public static final byte STOP = 0x0;"	"public static final byte[] MAGIC = new byte[] {0, (byte)0xde, (byte)0xee, (byte)0xef};"	>24-12+62;
"public static final byte[] MAGIC = new byte[] {0, (byte)0xde, (byte)0xee, (byte)0xef};"	"public static final int VERSION = 1;"	>20-66+16;
"public static final int VERSION = 1;"	"public static final long FLAG_DEFAULT_SERIALIZATION = 0x2;"	>20-16+38;
"public static final long FLAG_DEFAULT_SERIALIZATION = 0x2;"	"public static final long FLAG_OPTIONAL_DATA = 0x10;"	>30-28+21;
"public static final long FLAG_OPTIONAL_DATA = 0x10;"	"public static final long FLAG_RANDOM_ACCESS = 0x1;"	>30-12+7>1+5>6-1>1;
"public static final long FLAG_RANDOM_ACCESS = 0x1;"	"public static final long FLAG_SMALL_NUMBER_SERIALIZATION = 0x4;"	>30-20+33;
"public static final long FLAG_SMALL_NUMBER_SERIALIZATION = 0x4;"	"public static final long FLAG_UNSPECIFIED_SERIALIZATION = 0x8;"	>30-12+11>19-2+2;
"public static final long FLAG_UNSPECIFIED_SERIALIZATION = 0x8;"	"public static interface GraphFactory {"	>14-48+24;
"public static interface GraphFactory {"	"public static long copy(InputStream in, OutputStream out) throws IOException {"	>14-21+8>1+53>2;
"public static long copy(InputStream in, OutputStream out) throws IOException {"	"public static long copy(InputStream in, OutputStream out, long length) throws IOException {"	>56+13>22;
"public static long copy(InputStream in, OutputStream out, long length) throws IOException {"	"public static void apply(Applyable a, File orig, File target) throws IOException {"	>14-55+46>22;
"public static void apply(Applyable a, File orig, File target) throws IOException {"	"public static void main(String[] args) throws Exception {"	>19-40+6>1+11>9-2>11;
"public static void main(String[] args) throws Exception {"	"public static void store(DataOutput out, Serialization serial, Optional opt, Iterator<Op> ops) throws IOException {"	>19-17+73>10+2>11;
"public static void store(DataOutput out, Serialization serial, Optional opt, Iterator<Op> ops) throws IOException {"	"public synchronized void mark(int readlimit) {"	>8-102+7>1+5>1+9>1+12>2;
"public synchronized void mark(int readlimit) {"	"public synchronized void reset() throws IOException {"	>25-17+4>1+1>1+19>2;
"public synchronized void reset() throws IOException {"	"public void apply(File orig, File target) throws IOException {"	>7-23+10>1+22>22;
"public void apply(File orig, File target) throws IOException {"	"public void apply(InputStream orig, OutputStream target)"	>18-14+27>1+2>8-21;
"public void apply(InputStream orig, OutputStream target)"	"public void apply(InputStream orig, OutputStream target) throws IOException {"	>56+21;
"public void apply(InputStream orig, OutputStream target) throws IOException {"	"public void apply(InputStream orig, OutputStream target) throws IOException;"	>75-2+1;
"public void apply(InputStream orig, OutputStream target) throws IOException;"	"public void close() throws IOException {"	>12-43+6>20-1+2;
"public void close() throws IOException {"	"public void close() throws IOException;"	>38-2+1;
"public void close() throws IOException;"	"public void compute(byte[] orig, byte[] target) {"	>13-26+36;
"public void compute(byte[] orig, byte[] target) {"	"public void compute(byte[] orig, byte[] target);"	>47-2+1;
"public void compute(byte[] orig, byte[] target);"	"public void deserialize(Serialization serial, InputStream in)"	>12-36+49;
"public void deserialize(Serialization serial, InputStream in)"	"public void deserialize(Serialization serial, InputStream in) throws IOException;"	>61+20;
"public void deserialize(Serialization serial, InputStream in) throws IOException;"	"public void diff(File orig, File target) throws IOException {"	>13-47+26>20-1+2;
"public void diff(File orig, File target) throws IOException {"	"public void drain() {"	>13-45+3>1+2>2;
"public void drain() {"	"public void exportDiff(Diff diff, RandomInput orig, DataOutput out)"	>12-9+55;
"public void exportDiff(Diff diff, RandomInput orig, DataOutput out)"	"public void exportDiff(Diff diff, RandomInput orig, DataOutput out) throws IOException {"	>67+21;
"public void exportDiff(Diff diff, RandomInput orig, DataOutput out) throws IOException {"	"public void exportDiff(Diff diff, RandomInput orig, DataOutput out) throws IOException;"	>86-2+1;
"public void exportDiff(Diff diff, RandomInput orig, DataOutput out) throws IOException;"	"public void position(long pos) throws IOException {"	>12-53+4>1+12>20-1+2;
"public void position(long pos) throws IOException {"	"public void readFully(byte[] b) throws IOException {"	>12-17+18>22;
"public void readFully(byte[] b) throws IOException {"	"public void readFully(byte[] b, int off, int len) throws IOException {"	>30+18>22;
"public void readFully(byte[] b, int off, int len) throws IOException {"	"public void remove() {"	>14-54+6>2;
"public void remove() {"	"public void run() {"	>13-5+2>4;
"public void run() {"	"public void seek(long pos) throws IOException {"	>12-3+4>1+8>1+19>2;
"public void seek(long pos) throws IOException {"	"public void seek(long pos) throws IOException;"	>45-2+1;
"public void seek(long pos) throws IOException;"	"public void serialize(Serialization serial, OutputStream out)"	>14-32+47;
"public void serialize(Serialization serial, OutputStream out)"	"public void serialize(Serialization serial, OutputStream out) throws IOException;"	>61+20;
"public void serialize(Serialization serial, OutputStream out) throws IOException;"	"public void setHashAlgorithm(String hashAlgorithm) {"	>14-67+38;
"public void setHashAlgorithm(String hashAlgorithm) {"	"public void setPostHash(byte[] postHash) {"	>14+20>5-30>3;
"public void setPostHash(byte[] postHash) {"	"public void setPreHash(byte[] preHash) {"	>16-3+2>13-3+2>7;
"public void setPreHash(byte[] preHash) {"	"public void store(Iterator<Op> ops) throws IOException {"	>13-24+21>1+19>2;
"public void store(Iterator<Op> ops) throws IOException {"	"public void store(Iterator<Op> ops) throws IOException;"	>54-2+1;
"public void store(Iterator<Op> ops) throws IOException;"	"public void store(Iterator<Op> ops) {"	>36-19+1;
"public void store(Iterator<Op> ops) {"	"public void test() throws Exception {"	>12-21+2>1+2>1+17>2;
"public void test() throws Exception {"	"public void testDiff() throws Exception {"	>16+4>21;
"public void testDiff() throws Exception {"	"public void testGraph() {"	>16-23+7>2;
"public void testGraph() {"	"public void testGraphOpQueue() throws IOException {"	>21+7>2+19>2;
"public void testGraphOpQueue() throws IOException {"	"public void testLongs() throws Exception {"	>16-12+5>10-2>11;
"public void testLongs() throws Exception {"	"public void testPerformance() throws Exception {"	>16-5+11>21;
"public void testPerformance() throws Exception {"	"public void testPerformanceBig() throws Exception {"	>27+3>21;
"public void testPerformanceBig() throws Exception {"	"public void testPerformanceInertial() throws Exception {"	>27-3+8>21;
"public void testPerformanceInertial() throws Exception {"	"public void testWriteRead() throws Exception {"	>16-19+9>21;
"public void testWriteRead() throws Exception {"	"public void write(DataOutput out, Byte obj) throws IOException {"	>12-13+5>1+24>9+2>11;
"public void write(DataOutput out, Byte obj) throws IOException {"	"public void write(DataOutput out, Class obj) throws IOException {"	>34-4+5>26;
"public void write(DataOutput out, Class obj) throws IOException {"	"public void write(DataOutput out, FileDiff obj)"	>34-31+13;
"public void write(DataOutput out, FileDiff obj)"	"public void write(DataOutput out, Integer obj) throws IOException {"	>34-8+7>5+21;
"public void write(DataOutput out, Integer obj) throws IOException {"	"public void write(DataOutput out, Long obj) throws IOException {"	>34-7+4>26;
"public void write(DataOutput out, Long obj) throws IOException {"	"public void write(DataOutput out, MemoryDiff obj)"	>34-30+15;
"public void write(DataOutput out, MemoryDiff obj)"	"public void write(DataOutput out, Op obj) throws IOException {"	>34-10+2>5+21;
"public void write(DataOutput out, Op obj) throws IOException {"	"public void write(DataOutput out, String obj) throws IOException {"	>34-2+6>26;
"public void write(DataOutput out, String obj) throws IOException {"	"public void write(DataOutput out, byte[] obj) throws IOException {"	>34-6+6>26;
"public void write(DataOutput out, byte[] obj) throws IOException {"	"public void write(byte[] b) throws IOException {"	>18-16>7-3+1>22;
"public void write(byte[] b) throws IOException {"	"public void write(byte[] b, int off, int len) throws IOException {"	>26+18>22;
"public void write(byte[] b, int off, int len) throws IOException {"	"public void write(int b) throws IOException {"	>18-25+1>1+3>22;
"public void write(int b) throws IOException {"	"public void writeLong(DataOutput out, long val) throws IOException {"	>17-6+29>22;
"public void writeLong(DataOutput out, long val) throws IOException {"	"pull();"	-68+7;
"pull();"	"pulled = true;"	>4-3+10;
"pulled = true;"	"q = bd.queue();"	-14+15;
"q = bd.queue();"	"q = md.queue();"	>4-1+1>10;
"q = md.queue();"	"q = new ChunkingOpQueue(q);"	>4-4+15>5+1>2;
"q = new ChunkingOpQueue(q);"	"q = new ChunkingOpQueue(q, CHUNK);"	>25+7>2;
"q = new ChunkingOpQueue(q, CHUNK);"	"q = new CoalescingOpQueue(q);"	>9-4+6>12-7>2;
"q = new CoalescingOpQueue(q);"	"q = new CompactingOpQueue(q);"	>10-4+3>1+1>14;
"q = new CompactingOpQueue(q);"	"q = new GraphOpQueue(q, CHUNK);"	>8-10+5>9+7>2;
"q = new GraphOpQueue(q, CHUNK);"	"q = new GraphOpQueue(q, Diff.DEFAULT_CHUNK);"	>24+13>7;
"q = new GraphOpQueue(q, Diff.DEFAULT_CHUNK);"	"q = new GraphOpQueue(q, ig);"	>24-18+2>2;
"q = new GraphOpQueue(q, ig);"	"q = new GraphOpQueue(q, new InertialGraph((CHUNK + 1) * (CHUNK + 1)));"	>24-2+44>2;
"q = new GraphOpQueue(q, new InertialGraph((CHUNK + 1) * (CHUNK + 1)));"	"q = new OneWayOpQueue(q);"	>8-5+6>9-46>2;
"q = new OneWayOpQueue(q);"	"q = new ParallelGraphOpQueue(q);"	>8-6+13>11;
"q = new ParallelGraphOpQueue(q);"	"q = new ParallelGraphOpQueue(q, ParallelGraphOpQueue.INERTIAL_GRAPH);"	>30+37>2;
"q = new ParallelGraphOpQueue(q, ParallelGraphOpQueue.INERTIAL_GRAPH);"	"q = new PumpingOpQueue(q);"	>9-12+6>9-37>2;
"q = new PumpingOpQueue(q);"	"q = new ReplaceOpQueue(tbuf, rbuf);"	>8-7+7>8-1+10>2;
"q = new ReplaceOpQueue(tbuf, rbuf);"	"q = new RewindingOpQueue(q);"	>9-5>1+7>8-10+1>2;
"q = new RewindingOpQueue(q);"	"q = new StreamChunkingOpQueue(oin, tin);"	>8-6+11>11-1+8>2;
"q = new StreamChunkingOpQueue(oin, tin);"	"q = new UnchunkingOpQueue(q);"	>8-7+3>15-8+1>2;
"q = new UnchunkingOpQueue(q);"	"q.apply("	-29+8;
"q.apply("	"q.offer(e);"	-7+7>1+3;
"q.offer(e);"	"r != -1;"	-11+8;
"r != -1;"	"r = in.read(buf, 0, (int) Math.min(buf.length, length - count))) {"	-8+66;
"r = in.read(buf, 0, (int) Math.min(buf.length, length - count))) {"	"random.close();"	-66+15;
"random.close();"	"read();"	>1-10>1+2>3;
"read();"	"result);"	-5+6>2;
"result);"	"ret.add(new Op(op, run, data));"	-5+26>1+2>2;
"ret.add(new Op(op, run, data));"	"return (InputStream) in;"	>3-28+21;
"return (InputStream) in;"	"return (OutputStream) out;"	>8-2+3>11-3+4;
"return (OutputStream) out;"	"return (T) s.read(new DataInputStream(in));"	>8-2+16>1+3>9-6+6;
"return (T) s.read(new DataInputStream(in));"	"return (int) pin.skip(n);"	>7-30>3+1>1+11>2;
"return (int) pin.skip(n);"	"return (int) readLong(in);"	>13-8+8>1+1>3;
"return (int) readLong(in);"	"return -1;"	>7-19+3;
"return -1;"	"return 0;"	>7-3+2;
"return 0;"	"return 0xff & buf.get();"	>8+15>1;
"return 0xff & buf.get();"	"return 0xff & in.readByte();"	>14-5+4>1+4>1+1>3;
"return 0xff & in.readByte();"	"return 0xffff & buf.getShort();"	>11-13+10>1+6>3;
"return 0xffff & buf.getShort();"	"return ?;"	>7-24+2;
"return ?;"	"return Arrays.copyOf(buf, r);"	>7-2+22;
"return Arrays.copyOf(buf, r);"	"return Diffs.apply(diff, orig);"	>7-16+15>3+1>1+2>2;
"return Diffs.apply(diff, orig);"	"return Diffs.apply(md, orig);"	>19-4+2>8;
"return Diffs.apply(md, orig);"	"return Diffs.apply(new UndoOpQueue(diff.queue()), target);"	>19-6+17>1+16>1+2>2;
"return Diffs.apply(new UndoOpQueue(diff.queue()), target);"	"return Diffs.apply(new UndoOpQueue(md.queue()), target);"	>35-4+2>19;
"return Diffs.apply(new UndoOpQueue(md.queue()), target);"	"return Long.MAX_VALUE;"	>7-49+15;
"return Long.MAX_VALUE;"	"return MessageDigest.getInstance(MD5);"	>7-15+31;
"return MessageDigest.getInstance(MD5);"	"return MessageDigest.getInstance(SHA-1);"	>33-3+5>2;
"return MessageDigest.getInstance(SHA-1);"	"return MessageDigest.getInstance(algorithm);"	>33-5+9>2;
"return MessageDigest.getInstance(algorithm);"	"return Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, md);"	>7-10+1>1+6>1+25>1+3>13-8+21>1+1>2;
"return Serials.serialize(DefaultSerialization.getInstance(), MemoryDiff.class, md);"	"return accum;"	>7-76+6;
"return accum;"	"return b.length;"	>7-6+9;
"return b.length;"	"return b.toByteArray();"	>9-7+14;
"return b.toByteArray();"	"return b1.compareTo(b2);"	>8-12+11>1+2>2;
"return b1.compareTo(b2);"	"return bd.getName();"	>8-14+10>2;
"return bd.getName();"	"return buf.get() != 0;"	>8-12+14;
"return buf.get() != 0;"	"return buf.get();"	>16-5>1;
"return buf.get();"	"return buf.getChar();"	>14+4>3;
"return buf.getChar();"	"return buf.getDouble();"	>14-4+6>3;
"return buf.getDouble();"	"return buf.getFloat();"	>14-6+5>3;
"return buf.getFloat();"	"return buf.getInt();"	>14-4+2>4;
"return buf.getInt();"	"return buf.getLong();"	>13-3>1+4>3;
"return buf.getLong();"	"return buf.getShort();"	>14-4+5>3;
"return buf.getShort();"	"return buf.limit();"	>11-7+4>4;
"return buf.limit();"	"return buf.position();"	>11-3+3>2+3>3;
"return buf.position();"	"return buf.remaining();"	>11-7+7>1+1>3;
"return buf.remaining();"	"return buf;"	>10-12>1;
"return buf;"	"return c;"	>7-4+2;
"return c;"	"return chain.offerLast(q);"	>8+17>1;
"return chain.offerLast(q);"	"return chain.peekLast().offer(e);"	>12+11>6-6+2>2;
"return chain.peekLast().offer(e);"	"return chain;"	>12-20>1;
"return chain;"	"return count;"	>8-5+5;
"return count;"	"return data;"	>7-6+5;
"return data;"	"return deleteCount;"	>8-4+11;
"return deleteCount;"	"return diff;"	>8-11+4;
"return diff;"	"return digin.getMessageDigest().digest();"	>9-3+32;
"return digin.getMessageDigest().digest();"	"return din.read();"	>9-29+6>3;
"return din.read();"	"return din.read(b);"	>16+1>2;
"return din.read(b);"	"return din.read(b, off, len);"	>17+10>2;
"return din.read(b, off, len);"	"return din.readBoolean();"	>15-9+3>2+1>1+1>2;
"return din.readBoolean();"	"return din.readByte();"	>16-6+3>3;
"return din.readByte();"	"return din.readChar();"	>15-4+4>3;
"return din.readChar();"	"return din.readDouble();"	>15-4+6>3;
"return din.readDouble();"	"return din.readFloat();"	>15-6+5>3;
"return din.readFloat();"	"return din.readInt();"	>15-4+2>4;
"return din.readInt();"	"return din.readLine();"	>15-3+4>3;
"return din.readLine();"	"return din.readLong();"	>16-3+3>3;
"return din.readLong();"	"return din.readShort();"	>15-4+5>3;
"return din.readShort();"	"return din.readUTF();"	>15-5+3>3;
"return din.readUTF();"	"return din.readUnsignedByte();"	>16-2+11>3;
"return din.readUnsignedByte();"	"return din.readUnsignedShort();"	>23-4+5>3;
"return din.readUnsignedShort();"	"return e != null;"	>7-24+10;
"return e != null;"	"return e;"	>8-8>1;
"return e;"	"return false;"	>7+4>2;
"return false;"	"return fd;"	>8-5+2;
"return fd;"	"return flags;"	>8-2+5;
"return flags;"	"return flush();"	>9-4+6;
"return flush();"	"return flushed;"	>12-3+3;
"return flushed;"	"return getClass().getSimpleName() + <- + input;"	>7-8+40;
"return getClass().getSimpleName() + <- + input;"	"return getClass().getSimpleName() + <- + source;"	>41-6+7;
"return getClass().getSimpleName() + <- + source;"	"return getClass().getSimpleName();"	>33-14>1;
"return getClass().getSimpleName();"	"return getName();"	>10-17>7;
"return getName();"	"return graphFactory.newGraph((chunk+1) * (chunk+1));"	>8-5+13>1+19>1+8>2;
"return graphFactory.newGraph((chunk+1) * (chunk+1));"	"return graphed;"	>12-40+3;
"return graphed;"	"return hashAlgorithm;"	>7-8+14;
"return hashAlgorithm;"	"return header().stats;"	>8-13+14;
"return header().stats;"	"return header;"	>13-8>1;
"return header;"	"return i;"	>7-7+2;
"return i;"	"return in.available();"	>8+13>1;
"return in.available();"	"return in.first();"	>10-9+5>3;
"return in.first();"	"return in.last();"	>10-3+2>5;
"return in.last();"	"return in.position();"	>10-2+2>1+1>1+3>3;
"return in.position();"	"return in.read();"	>10-8+4>3;
"return in.read();"	"return in.read(b);"	>15+1>2;
"return in.read(b);"	"return in.read(b, off, len);"	>16+10>2;
"return in.read(b, off, len);"	"return in.readByte();"	>14-12+5>2;
"return in.readByte();"	"return in.readUTF();"	>14-4+3>3;
"return in.readUTF();"	"return in.skip(n);"	>10-7+4>1+1>2;
"return in.skip(n);"	"return input.offer(e);"	>8-7>1+11>2;
"return input.offer(e);"	"return inputSize;"	>12-10+5;
"return inputSize;"	"return insertCount;"	>9-8+10;
"return insertCount;"	"return instance;"	>10-9+6;
"return instance;"	"return iterNext != null;"	>8-8+16;
"return iterNext != null;"	"return iterNext;"	>15-8>1;
"return iterNext;"	"return len;"	>7-9+4;
"return len;"	"return magic;"	>7-4+6;
"return magic;"	"return md;"	>8-5+2;
"return md;"	"return n;"	>7-3+2;
"return n;"	"return new BadiffFormatOpQueue(bd);"	>8+26>1;
"return new BadiffFormatOpQueue(bd);"	"return new Callable<OpQueue>() {"	>11-24+21;
"return new Callable<OpQueue>() {"	"return new DataInputInputStream(in);"	>11-21+25;
"return new DataInputInputStream(in);"	"return new DataOutputOutputStream(out);"	>15-7+9>10-2+3>2;
"return new DataOutputOutputStream(out);"	"return new EditGraph(capacity);"	>11-25+16>1+1>2;
"return new EditGraph(capacity);"	"return new FileBadiffOpQueue();"	>11-18+18>2;
"return new FileBadiffOpQueue();"	"return new FileOpQueue();"	>15-6>10;
"return new FileOpQueue();"	"return new GdiffOpQueue(orig, ext);"	>11-4+5>8+9>2;
"return new GdiffOpQueue(orig, ext);"	"return new InertialGraph(capacity);"	>11-21+20>1+1>2;
"return new InertialGraph(capacity);"	"return new ListOpQueue(ops);"	>11-22+15>2;
"return new ListOpQueue(ops);"	"return new MemoryDiff(Diffs.improved(Diffs.queue(orig, target)));"	>11-12+3>1+15>1+10>1+21>2;
"return new MemoryDiff(Diffs.improved(Diffs.queue(orig, target)));"	"return new MemoryDiff(new OneWayOpQueue(Diffs.improved(Diffs.queue(orig, target))));"	>21+18>40+1>4;
"return new MemoryDiff(new OneWayOpQueue(Diffs.improved(Diffs.queue(orig, target))));"	"return new MemoryDiff(new OneWayOpQueue(diff.queue()));"	>40-20+4>7-13>4;
"return new MemoryDiff(new OneWayOpQueue(diff.queue()));"	"return new MemoryDiff(new UndoOpQueue(diff.queue()));"	>26-6+4>23;
"return new MemoryDiff(new UndoOpQueue(diff.queue()));"	"return new MemoryOpQueue(ops);"	>17-13>8-13+3>2;
"return new MemoryOpQueue(ops);"	"return new ReplaceOpQueue(orig, target);"	>11-6+7>9-2+11>2;
"return new ReplaceOpQueue(orig, target);"	"return new Runnable() {"	>12-28+11;
"return new Runnable() {"	"return new StreamChunkingOpQueue(orig, target);"	>11-12+36;
"return new StreamChunkingOpQueue(orig, target);"	"return new StreamOpQueue();"	>17-8>8-12>2;
"return new StreamOpQueue();"	"return new ThreadFactory() {"	>11-16+17;
"return new ThreadFactory() {"	"return nextCount;"	>9-19+8;
"return nextCount;"	"return null;"	>8-9+4;
"return null;"	"return obj;"	>7-5+4;
"return obj;"	"return obuf != null || tbuf != null;"	>9-2+27;
"return obuf != null || tbuf != null;"	"return op;"	>8-28+2;
"return op;"	"return optional;"	>9+6>1;
"return optional;"	"return orig;"	>8-8+4;
"return orig;"	"return out.toByteArray();"	>8-4+17;
"return out.toByteArray();"	"return outputSize;"	>10-15+8;
"return outputSize;"	"return pin.available();"	>7-11+16;
"return pin.available();"	"return pin.first();"	>11-9+5>3;
"return pin.first();"	"return pin.position();"	>11-3+2>1+1>1+3>3;
"return pin.position();"	"return pin.skip(count);"	>11-8+4>1+5>2;
"return pin.skip(count);"	"return pos - buf.position();"	>8-12+13>1+4>2;
"return pos - buf.position();"	"return pos;"	>10-17>1;
"return pos;"	"return postHash;"	>10+5>1;
"return postHash;"	"return preHash;"	>8-3+2>5;
"return preHash;"	"return prepared.offerLast(e);"	>10-5+19;
"return prepared.offerLast(e);"	"return pulled;"	>8-21+6;
"return pulled;"	"return q;"	>7-7+2;
"return q;"	"return queue().consummerize();"	>8+21>1;
"return queue().consummerize();"	"return r;"	>7-23+2;
"return r;"	"return readLong(in);"	>8+11>1;
"return readLong(in);"	"return readLong(in, 0, 0);"	>18+6>2;
"return readLong(in, 0, 0);"	"return readLong(in, accum, shift + 7);"	>20-4+16>2;
"return readLong(in, accum, shift + 7);"	"return readLongP(in, accum, shift + 7);"	>15+1>23;
"return readLongP(in, accum, shift + 7);"	"return ret;"	>9-30+2;
"return ret;"	"return rewindCount;"	>9+8>2;
"return rewindCount;"	"return run;"	>8-11+3;
"return run;"	"return sb.toString();"	>7-4+14;
"return sb.toString();"	"return serial.readObject(b, type);"	>8-10+16>1+7>2;
"return serial.readObject(b, type);"	"return serial;"	>13-20>1;
"return serial;"	"return serializers.get((int) readLong(in)).type();"	>13+36>1;
"return serializers.get((int) readLong(in)).type();"	"return skipBytes((int) count);"	>8-37+2>1+3>1+2>1+10>2;
"return skipBytes((int) count);"	"return skipped;"	>11-19+4;
"return skipped;"	"return source.offer(e);"	>8-7+15;
"return source.offer(e);"	"return stats;"	>8-15+5;
"return stats;"	"return strings;"	>8-2>1+4>2;
"return strings;"	"return t;"	>7-8+2;
"return t;"	"return target;"	>7+5>2;
"return target;"	"return true;"	>8-6+4;
"return true;"	"return type;"	>8-2+2>2;
"return type;"	"return ud;"	>7-5+3;
"return ud;"	"return val;"	>7-3+4;
"return val;"	"return version;"	>8-3+7;
"return version;"	"return;"	>5-8>2;
"return;"	"rewindCount = serial.readObject(in, Long.class);"	-7+48;
"rewindCount = serial.readObject(in, Long.class);"	"run = (int)(oprun >>> 2);"	-46+23>2;
"run = (int)(oprun >>> 2);"	"run = 0;"	>6-19+2;
"run = 0;"	"run++;"	>3-5+3;
"run++;"	"rwd.apply(new RandomInputStream(orig.getBytes()), bout);"	-6+56;
"rwd.apply(new RandomInputStream(orig.getBytes()), bout);"	"s.write(new DataOutputStream(out), object);"	-21+8>1+10>10-19>2+9>3;
"s.write(new DataOutputStream(out), object);"	"sb.append(String.format(%02x, 0xff & b));"	-40+22>1+16>2;
"sb.append(String.format(%02x, 0xff & b));"	"sb.append(e);"	>10-29+1>2;
"sb.append(e);"	"sb.append(new Op(Op.STOP, 1, null));"	>10+1>1+22>2;
"sb.append(new Op(Op.STOP, 1, null));"	"self = new DataInputStream(new FileInputStream(BadiffFileDiff.this));"	-28+10>1+5>1+1>1+14>1+21>1+10>3;
"self = new DataInputStream(new FileInputStream(BadiffFileDiff.this));"	"self = new FileInputStream(FileDiff.this);"	>7-20>20-6>13-1>2;
"self = new FileInputStream(FileDiff.this);"	"self.close();"	>4-35+4>1+2>2;
"self.close();"	"serial = DefaultSerialization.getInstance();"	-6+21>1+5>1+7>1+4>4;
"serial = DefaultSerialization.getInstance();"	"serial = SmallNumberSerialization.getInstance();"	>9-7+11>28;
"serial = SmallNumberSerialization.getInstance();"	"serial.writeObject(b, type, object);"	>6-38+9>1+2>1+15>2;
"serial.writeObject(b, type, object);"	"serial.writeObject(dout, Op.class, e);"	>19-14+3>1+13>2;
"serial.writeObject(dout, Op.class, e);"	"serial.writeObject(dout, Op.class, new Op(Op.STOP, 1, null));"	>35+1>1+22>2;
"serial.writeObject(dout, Op.class, new Op(Op.STOP, 1, null));"	"serial.writeObject(out, Long.class, deleteCount);"	>19-8+9>8-24+11>2;
"serial.writeObject(out, Long.class, deleteCount);"	"serial.writeObject(out, Long.class, inputSize);"	>36-9+1>1+2>1+4>2;
"serial.writeObject(out, Long.class, inputSize);"	"serial.writeObject(out, Long.class, insertCount);"	>38-6+1>1+7>2;
"serial.writeObject(out, Long.class, insertCount);"	"serial.writeObject(out, Long.class, length());"	>36-9+2>1+1>1+3>2;
"serial.writeObject(out, Long.class, length());"	"serial.writeObject(out, Long.class, nextCount);"	>36-8+9>2;
"serial.writeObject(out, Long.class, nextCount);"	"serial.writeObject(out, Long.class, oprun);"	>36-9+5>2;
"serial.writeObject(out, Long.class, oprun);"	"serial.writeObject(out, Long.class, outputSize);"	>37-4+9>2;
"serial.writeObject(out, Long.class, outputSize);"	"serial.writeObject(out, Long.class, rewindCount);"	>36-9+1>1+9>2;
"serial.writeObject(out, Long.class, rewindCount);"	"serial.writeObject(out, Op.class, e);"	>24-4+2>8-11+1>2;
"serial.writeObject(out, Op.class, e);"	"serial.writeObject(out, Op.class, new Op(Op.STOP, 1, null));"	>34+1>1+22>2;
"serial.writeObject(out, Op.class, new Op(Op.STOP, 1, null));"	"serial.writeObject(out, Op.class, ops.next());"	>34-23+9>3;
"serial.writeObject(out, Op.class, ops.next());"	"serial.writeObject(out, String.class, hashAlgorithm);"	>24-2+6>8-10+13>2;
"serial.writeObject(out, String.class, hashAlgorithm);"	"serial.writeObject(out, byte[].class, data);"	>24-6+6>8-13+4>2;
"serial.writeObject(out, byte[].class, data);"	"serial.writeObject(out, byte[].class, postHash);"	>38-2+3>1+1>1+2>2;
"serial.writeObject(out, byte[].class, postHash);"	"serial.writeObject(out, byte[].class, preHash);"	>39-3+2>6;
"serial.writeObject(out, byte[].class, preHash);"	"serializers.add(new Serializer<Byte>(Byte.class) {"	>6-41+44;
"serializers.add(new Serializer<Byte>(Byte.class) {"	"serializers.add(new Serializer<Class>(Class.class) {"	>31-10+12>9;
"serializers.add(new Serializer<Class>(Class.class) {"	"serializers.add(new Serializer<FileDiff>(FileDiff.class) {"	>31-12+18>9;
"serializers.add(new Serializer<FileDiff>(FileDiff.class) {"	"serializers.add(new Serializer<Integer>(Integer.class) {"	>31-18+16>9;
"serializers.add(new Serializer<Integer>(Integer.class) {"	"serializers.add(new Serializer<Long>(Long.class) {"	>31-16+10>9;
"serializers.add(new Serializer<Long>(Long.class) {"	"serializers.add(new Serializer<MemoryDiff>(MemoryDiff.class) {"	>31-10+22>9;
"serializers.add(new Serializer<MemoryDiff>(MemoryDiff.class) {"	"serializers.add(new Serializer<Op>(Op.class) {"	>31-22+6>9;
"serializers.add(new Serializer<Op>(Op.class) {"	"serializers.add(new Serializer<String>(String.class) {"	>31-6+14>9;
"serializers.add(new Serializer<String>(String.class) {"	"serializers.add(new Serializer<byte[]>(byte[].class) {"	>31-14+14>9;
"serializers.add(new Serializer<byte[]>(byte[].class) {"	"short dlen = x > 0 ? (short)(1 + lengths[pos-1]) : Short.MAX_VALUE;"	-54+67;
"short dlen = x > 0 ? (short)(1 + lengths[pos-1]) : Short.MAX_VALUE;"	"short ilen = y > 0 ? (short)(1 + lengths[pos - xval.length]) : Short.MAX_VALUE;"	>6-8+8>30-2+14>21;
"short ilen = y > 0 ? (short)(1 + lengths[pos - xval.length]) : Short.MAX_VALUE;"	"skip(pos - this.pos);"	-79+21;
"skip(pos - this.pos);"	"skipped = n;"	>4-17+8;
"skipped = n;"	"skipped++;"	>7-5+3;
"skipped++;"	"stats.deleteCount++;"	-6+6>1+10>3;
"stats.deleteCount++;"	"stats.deserialize(serial, in);"	>8-12+22;
"stats.deserialize(serial, in);"	"stats.inputSize = osize;"	>6-24+18;
"stats.inputSize = osize;"	"stats.insertCount++;"	>8-16+12;
"stats.insertCount++;"	"stats.nextCount++;"	>6-5+3>9;
"stats.nextCount++;"	"stats.outputSize = tsize;"	>6-12+19;
"stats.outputSize = tsize;"	"stats.rewindCount++;"	>6-19+14;
"stats.rewindCount++;"	"stats.serialize(serial, dout);"	>6-14+24;
"stats.serialize(serial, dout);"	"store(ops);"	-16>1-10>1+7>2;
"store(ops);"	"store(out, serial, null, ops);"	>6+19>5;
"store(out, serial, null, ops);"	"store(self, serial, opt, tmp.queue());"	>6-3+4>10-9+16>2;
"store(self, serial, opt, tmp.queue());"	"strings.add(line);"	-36+16>2;
"strings.add(line);"	"super((ByteBuffer) null);"	-15+15>1+7>2;
"super((ByteBuffer) null);"	"super(cause);"	>6-17+5>2;
"super(cause);"	"super(file.toURI());"	>6-4+3>1+8>2;
"super(file.toURI());"	"super(in);"	>6-12+2>2;
"super(in);"	"super(message, cause);"	>6-2+14>2;
"super(message, cause);"	"super(new ChainOpQueue());"	>6-13+15>1+2>2;
"super(new ChainOpQueue());"	"super(ops);"	>6-18+3>2;
"super(ops);"	"super(out);"	>7-2+2>2;
"super(out);"	"super(parent, child);"	>6-2+5>1+7>2;
"super(parent, child);"	"super(pathname);"	>8-11+6>2;
"super(pathname);"	"super(source);"	>6-7+5>3;
"super(source);"	"super(uri);"	>6-6+3>2;
"super(uri);"	"super.buf = in.getChannel().map(MapMode.READ_ONLY, 0, file.length());"	>4-3>1+50>1+11>2;
"super.buf = in.getChannel().map(MapMode.READ_ONLY, 0, file.length());"	"super.close();"	>6-61+6>2;
"super.close();"	"super.prepare(e);"	>6-4+6>2+1>2;
"super.prepare(e);"	"switch(b) {"	-17+11;
"switch(b) {"	"switch(e.getOp()) {"	>7-1+9>3;
"switch(e.getOp()) {"	"switch(op) {"	>7-9+2>3;
"switch(op) {"	"t.setDaemon(true);"	-12+18;
"t.setDaemon(true);"	"target.delete();"	-15+12>1+1>2;
"target.delete();"	"target.deleteOnExit();"	>13+6>3;
"target.deleteOnExit();"	"target.write((int)(256 * Math.random()));"	>7-10+7>1+12>1+8>1+2>2;
"target.write((int)(256 * Math.random()));"	"target.write(data, 0, run);"	>13-26+12>2;
"target.write(data, 0, run);"	"tbuf.load();"	-25+10>2;
"tbuf.load();"	"this();"	-9+4>3;
"this();"	"this(ByteBuffer.wrap(buf));"	>5+20>2;
"this(ByteBuffer.wrap(buf));"	"this(DefaultSerialization.getInstance());"	>5-18+2>1+30>3;
"this(DefaultSerialization.getInstance());"	"this(file, true);"	>5-34+10>2;
"this(file, true);"	"this(file.toURI());"	>8-6>1+8>2;
"this(file.toURI());"	"this(in, DefaultSerialization.getInstance());"	>5-9+28>1+7>4;
"this(in, DefaultSerialization.getInstance());"	"this(new ByteBufferRandomInput(buf));"	>5-35+12>1+12>1+3>3;
"this(new ByteBufferRandomInput(buf));"	"this(new FileRandomInput(file));"	>9-10+4>12-2>1+3>3;
"this(new FileRandomInput(file));"	"this(new StreamRandomInput(in, bufSize));"	>9-3+3>1+2>12-3+10>4;
"this(new StreamRandomInput(in, bufSize));"	"this(orig, target, Diff.DEFAULT_CHUNK);"	>5-34+32>2;
"this(orig, target, Diff.DEFAULT_CHUNK);"	"this(out, DefaultSerialization.getInstance());"	>6-31+38>2;
"this(out, DefaultSerialization.getInstance());"	"this(source, 1024);"	>5-39+12>2;
"this(source, 1024);"	"this(source, 1024*1024);"	>13+5>6;
"this(source, 1024*1024);"	"this(source, Diff.DEFAULT_CHUNK);"	>13-9+18>2;
"this(source, Diff.DEFAULT_CHUNK);"	"this(source, Runtime.getRuntime().availableProcessors(), Diff.DEFAULT_CHUNK, DEFAULT_GRAPH);"	>11+44>20+15>2;
"this(source, Runtime.getRuntime().availableProcessors(), Diff.DEFAULT_CHUNK, DEFAULT_GRAPH);"	"this(source, Runtime.getRuntime().availableProcessors(), Diff.DEFAULT_CHUNK, graphFactory);"	>77-13+12>2;
"this(source, Runtime.getRuntime().availableProcessors(), Diff.DEFAULT_CHUNK, graphFactory);"	"this(source, lookbehind, 16);"	>13-76+14>2;
"this(source, lookbehind, 16);"	"this(source, lookbehind, minlength, 1024);"	>25-2+15>2;
"this(source, lookbehind, minlength, 1024);"	"this(source, new EditGraph((chunk+1) * (chunk+1)));"	>13-27+36>2;
"this(source, new EditGraph((chunk+1) * (chunk+1)));"	"this.bd = bd;"	>4-47+9;
"this.bd = bd;"	"this.buf = ByteBuffer.allocate(size);"	>6-7+31;
"this.buf = ByteBuffer.allocate(size);"	"this.buf = buf;"	>11-26+4;
"this.buf = buf;"	"this.capacity = capacity;"	>5-10+20;
"this.capacity = capacity;"	"this.chunk = chunk;"	>6-19+13;
"this.chunk = chunk;"	"this.data = data;"	>5-14+12;
"this.data = data;"	"this.ext = ext;"	>5-12+10;
"this.ext = ext;"	"this.graph = graph;"	>5-10+14;
"this.graph = graph;"	"this.graphFactory = graphFactory;"	>10+7>8+7>1;
"this.graphFactory = graphFactory;"	"this.hashAlgorithm = hashAlgorithm;"	>5-28+30;
"this.hashAlgorithm = hashAlgorithm;"	"this.in = in;"	>5-30+8;
"this.in = in;"	"this.in = new PushbackInputStream(in, size);"	>10+24>2+7>1;
"this.in = new PushbackInputStream(in, size);"	"this.input = source;"	>7-37+13;
"this.input = source;"	"this.lookbehind = lookbehind;"	>5-15+24;
"this.lookbehind = lookbehind;"	"this.maxkeys = maxkeys;"	>5-24+18;
"this.maxkeys = maxkeys;"	"this.minlength = minlength;"	>6-17+21;
"this.minlength = minlength;"	"this.op = op;"	>5-22+8;
"this.op = op;"	"this.ops.add(ops.next());"	>7-6+18;
"this.ops.add(ops.next());"	"this.ops.clear();"	>9-14+6>2;
"this.ops.clear();"	"this.orig = orig;"	>6-11+11;
"this.orig = orig;"	"this.out = out;"	>6-11+9;
"this.out = out;"	"this.postHash = postHash;"	>5-10+20;
"this.postHash = postHash;"	"this.preHash = preHash;"	>6-3+2>8-3+2>5;
"this.preHash = preHash;"	"this.run = run;"	>5-18+10;
"this.run = run;"	"this.serial = serial;"	>5-10+16;
"this.serial = serial;"	"this.serial = serialization;"	>20+7>1;
"this.serial = serialization;"	"this.serial.writeObject(out, Op.class, e);"	>11-17+31;
"this.serial.writeObject(out, Op.class, e);"	"this.serial.writeObject(out, Op.class, new Op(Op.STOP, 1, null));"	>39+1>1+22>2;
"this.serial.writeObject(out, Op.class, new Op(Op.STOP, 1, null));"	"this.source = source;"	>6-59+15;
"this.source = source;"	"this.target = target;"	>5-16+16;
"this.target = target;"	"this.type = type;"	>6-15+11;
"this.type = type;"	"throw new IOException("	-17+22;
"throw new IOException("	"throw new IOException(Incompatible serialization; expected file to specify, file declares unspecified);"	>22+81;
"throw new IOException(Incompatible serialization; expected file to specify, file declares unspecified);"	"throw new IOException(Invalid badiff magic);"	>24-76+8>1+9>2;
"throw new IOException(Invalid badiff magic);"	"throw new IOException(Not all byts consumed from byte[]);"	>22-19+13>1+19>2;
"throw new IOException(Not all byts consumed from byte[]);"	"throw new IOException(Not all input data consumed: + orig);"	>30-4+10>9-12+8>2;
"throw new IOException(Not all input data consumed: + orig);"	"throw new IOException(Pre-hash mismatch, expected + Arrays.toString(opt.getPreHash()) + , found + Arrays.toString(actualPreHash));"	>22-28+73>3+8>1+2>2+1>1+15>2;
"throw new IOException(Pre-hash mismatch, expected + Arrays.toString(opt.getPreHash()) + , found + Arrays.toString(actualPreHash));"	"throw new IOException(Unrecognized version);"	>22-106+20>2;
"throw new IOException(Unrecognized version);"	"throw new IOException(invalid magic);"	>22-19+1>1+11>2;
"throw new IOException(invalid magic);"	"throw new IOException(invalid version);"	>30-5+7>2;
"throw new IOException(invalid version);"	"throw new IOException(this + requires a random-access original ( + Random.class + ));"	>22-11+3>1+7>1+20>1+14>1+13>2;
"throw new IOException(this + requires a random-access original ( + Random.class + ));"	"throw new IOException(unset mark);"	>22-61+10>2;
"throw new IOException(unset mark);"	"throw new IllegalArgumentException(capacity must be >= 4);"	>11-1+14>10-10+21>2;
"throw new IllegalArgumentException(capacity must be >= 4);"	"throw new IllegalArgumentException(diff axes exceed graph capacity);"	>35+23>8-13>2;
"throw new IllegalArgumentException(diff axes exceed graph capacity);"	"throw new IllegalArgumentException(invalid data);"	>35-31+12>2;
"throw new IllegalArgumentException(invalid data);"	"throw new IllegalArgumentException(invalid op);"	>43-4+2>2;
"throw new IllegalArgumentException(invalid op);"	"throw new IllegalArgumentException(invalid run);"	>43-2+3>2;
"throw new IllegalArgumentException(invalid run);"	"throw new NotSerializableException(obj.getName());"	>10-14+2>1+12>10-11+13>2;
"throw new NotSerializableException(obj.getName());"	"throw new NotSerializableException(type.getName());"	>35-3+4>12;
"throw new NotSerializableException(type.getName());"	"throw new RuntimeException(Could not find SHA-1 or MD5);"	>10-14+6>11-14+27>2;
"throw new RuntimeException(Could not find SHA-1 or MD5);"	"throw new RuntimeException(ee);"	>27-27+2>2;
"throw new RuntimeException(ee);"	"throw new RuntimeException(ie);"	>27-1+1>3;
"throw new RuntimeException(ie);"	"throw new RuntimeException(nsae);"	>27-1+3>3;
"throw new RuntimeException(nsae);"	"throw new RuntimeIOException(ioe);"	>17+2>10-3+2>3;
"throw new RuntimeIOException(ioe);"	"throw new UnsupportedOperationException();"	>10-8+11>1+8>10-3>2;
"throw new UnsupportedOperationException();"	"throws IOException {"	>5-25+4>9-3+2;
"throws IOException {"	"tin.close();"	-20+12;
"tin.close();"	"tmp.delete();"	-8+9>4;
"tmp.delete();"	"tmp.renameTo(target);"	>4-5+5>1+2>1+6>2;
"tmp.renameTo(target);"	"tmp.store(ops);"	>4-14+1>1+7>2;
"tmp.store(ops);"	"tmp.store(q);"	>10-3+1>2;
"tmp.store(q);"	"try {"	-13+5;
"try {"	"tsize += e.getRun();"	-5+20;
"tsize += e.getRun();"	"u = e;"	-20+6;
"u = e;"	"u = new Op(Op.DELETE, e.getRun(), e.getData());"	>4-2+43;
"u = new Op(Op.DELETE, e.getRun(), e.getData());"	"u = new Op(Op.INSERT, e.getRun(), e.getData());"	>14-5+3>1+2>27;
"u = new Op(Op.INSERT, e.getRun(), e.getData());"	"ud.store(new OneWayOpQueue(diff.queue()));"	-41+4>1+12>1+19>1+1>3;
"ud.store(new OneWayOpQueue(diff.queue()));"	"ud.store(new UndoOpQueue(diff.queue()));"	>13-6+4>23;
"ud.store(new UndoOpQueue(diff.queue()));"	"v |= 0x80;"	-40+10;
"v |= 0x80;"	"v |= 1;"	>5-5+2;
"v |= 1;"	"val = -val;"	-7+11;
"val = -val;"	"while((e = source.get().poll()) != null) {"	-11+42;
"while((e = source.get().poll()) != null) {"	"while(chain.size() > 0) {"	>6-33+16>3;
"while(chain.size() > 0) {"	"while(count-- > 0)"	>7-18+11;
"while(count-- > 0)"	"while(deletes.size() > maxkeys)"	>6-11+13>1+11;
"while(deletes.size() > maxkeys)"	"while(dpos < ddata.length || ipos < idata.length) {"	>7-22+25>1+15>1+2;
"while(dpos < ddata.length || ipos < idata.length) {"	"while(filtering.get(0).getOp() == filtering.get(1).getOp()) {"	>6-42+52>3;
"while(filtering.get(0).getOp() == filtering.get(1).getOp()) {"	"while(filtering.size() < count) {"	>16-40+4>2+8>3;
"while(filtering.size() < count) {"	"while(filtering.size() > 0) {"	>23-7+3>3;
"while(filtering.size() > 0) {"	"while(n > skipped) {"	>6-20+11>3;
"while(n > skipped) {"	"while(ops.hasNext())"	>6-14+14;
"while(ops.hasNext())"	"while(ops.hasNext()) {"	>20+2;
"while(ops.hasNext()) {"	"while(pos > 0) {"	>6-13+7>3;
"while(pos > 0) {"	"while(require(2)) {"	>6-7+10>3;
"while(require(2)) {"	"while(si.hasNext()) {"	>6-9+11>4;
"while(si.hasNext()) {"	"while(true) {"	>6-12+4>3;
"while(true) {"	"worker = Executors.newSingleThreadExecutor(workerFactory(source));"	-13+66;
"worker = Executors.newSingleThreadExecutor(workerFactory(source));"	"worker.execute(task = createTask());"	>6+13>3-52>1+4>1+5>3;
"worker.execute(task = createTask());"	"worker.shutdown();"	>7-27+9>2;
"worker.shutdown();"	"writeHeader(serial, stats, opt, out);"	-15+11>1+23>2;
"writeHeader(serial, stats, opt, out);"	"writeLong(out, i);"	>5-27+5>3+3>2;
"writeLong(out, i);"	"writeLong(out, obj != null ? obj.length + 1 : 0);"	>15-1+32>2;
"writeLong(out, obj != null ? obj.length + 1 : 0);"	"writeLong(out, obj);"	>18-29>2;
"writeLong(out, obj);"	"writeLong(out, val >>> 7);"	>15-3+9>2;
"writeLong(out, val >>> 7);"	"writeLongP(out, v);"	>9+1>7-8>2;
"writeLongP(out, v);"	"writeLongP(out, val >>> 7);"	>17+8>2;
"writeLongP(out, val >>> 7);"	"xval = new byte[orig.length + 1];"	-27+33;
"xval = new byte[orig.length + 1];"	"xval = new byte[orig.length + 1]; System.arraycopy(orig, 0, xval, 1, orig.length);"	>33+49;
"xval = new byte[orig.length + 1]; System.arraycopy(orig, 0, xval, 1, orig.length);"	"yval = new byte[target.length + 1];"	-1+1>15-3+3>1+2>13-49;
"yval = new byte[target.length + 1];"	"yval = new byte[target.length + 1]; System.arraycopy(target, 0, yval, 1, target.length);"	>35+53;
"yval = new byte[target.length + 1]; System.arraycopy(target, 0, yval, 1, target.length);"	"{0, 0, 3, 2}, // From DELETE to..."	-88+34;
"{0, 0, 3, 2}, // From DELETE to..."	"{0, 3, 1, 2}, // From INSERT to..."	>1-3>4+3>14-5+3>1+2>6;
"{0, 3, 1, 2}, // From INSERT to..."	"{0, 3, 3, 0}, // From NEXT to..."	>7-4+4>11-5+3>7;
"{0, 3, 3, 0}, // From NEXT to..."	"{0, 3, 3, 2}, // From STOP to..."	>10-1+1>11-3+1>1+2>6;
"{0, 3, 3, 2}, // From STOP to..."	"} catch(BufferUnderflowException e) {"	-32+37;
"} catch(BufferUnderflowException e) {"	"} catch(EOFException eof) {"	>8-15+3>11+2>3;
"} catch(EOFException eof) {"	"} catch(ExecutionException ee) {"	>9-2+8>11-2+1>3;
"} catch(ExecutionException ee) {"	"} catch(IOException ioe) {"	>8-9+2>10-1+2>4;
"} catch(IOException ioe) {"	"} catch(InterruptedException ie) {"	>9-1+10>11-1>4;
"} catch(InterruptedException ie) {"	"} catch(InterruptedException ie2) {"	>31+1>3;
"} catch(InterruptedException ie2) {"	"} catch(NoSuchAlgorithmException nsae) {"	>8-11+15>10-3+4>3;
"} catch(NoSuchAlgorithmException nsae) {"	"} catch(NoSuchAlgorithmException nsae2) {"	>37+1>3;
"} catch(NoSuchAlgorithmException nsae2) {"	"} else"	-41+6;
"} else"	"} else if(filtering.get(0).getOp() == Op.INSERT && filtering.get(1).getOp() == Op.DELETE) {"	>6+85;
"} else if(filtering.get(0).getOp() == Op.INSERT && filtering.get(1).getOp() == Op.DELETE) {"	"} else {"	>6-83>2;
"} else {"	"} finally {"	-6+9>2;
